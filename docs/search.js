window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "corems", "modulename": "corems", "kind": "module", "doc": "<p><img src=\"https://github.com/EMSL-Computing/CoreMS/blob/master/docs/CoreMS.COLOR_small.png?raw=true\" alt=\"CoreMS Logo\" />  </p>\n\n<div align=\"left\">\n\n<br>\n<br>\n<a href=\"https://doi.org/10.5281/zenodo.14009575\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.14009575.svg\" alt=\"DOI\"></a>\n<br>\n</div>\n\n<h1 id=\"table-of-contents\">Table of Contents</h1>\n\n<ul>\n<li>Introduction\n<ul>\n<li><a href=\"#CoreMS\">CoreMS</a>  </li>\n<li><a href=\"#current-version\">Current Version</a>  </li>\n<li><a href=\"#main-developers/contact \">Contact Information</a>  </li>\n<li><a href=\"#documentation\">Documentation</a></li>\n<li><a href=\"#contributing\">Contribution Information</a></li>\n<li><a href=\"#data-input-formats\">Data Input</a>  </li>\n<li><a href=\"#data-output-formats\">Data Output</a>  </li>\n<li><a href=\"#data-structure-types\">Data Structure</a>  </li>\n<li><a href=\"#available-features\">Features</a>  </li>\n</ul></li>\n<li>Installation\n<ul>\n<li><a href=\"#corems-installation\">Installation</a>  </li>\n<li><a href=\"#thermo-raw-file-access\">Thermo Raw File on Mac and Linux</a>  </li>\n</ul></li>\n<li>Execution <br />\n<ul>\n<li><a href=\"#docker-stack\">Jupyter Notebook and Docker containers</a>  </li>\n<li><a href=\"#simple-script-example\">Example for FT-ICR Data Processing</a>  </li>\n<li><a href=\"examples/scripts\">Python Examples</a></li>\n<li><a href=\"examples/notebooks\">Jupyter Notebook Examples</a>  </li>\n</ul></li>\n<li>Sibling Projects <br />\n<ul>\n<li><a href=\"https://github.com/EMSL-Computing/EnviroMS\">EnviroMS</a>  </li>\n<li><a href=\"https://github.com/EMSL-Computing/MetaMS\">MetaMS</a>  </li>\n</ul></li>\n</ul>\n\n<hr />\n\n<h1 id=\"corems\">CoreMS</h1>\n\n<p><strong>CoreMS</strong> is a comprehensive mass spectrometry framework for software development and data analysis of small molecules analysis.</p>\n\n<p>Data handling and software development for modern mass spectrometry (MS) is an interdisciplinary endeavor requiring skills in computational science and a deep understanding of MS. To enable scientific software development to keep pace with fast improvements in MS technology, we have developed a Python software framework named CoreMS. The goal of the framework is to provide a fundamental, high-level basis for working with all mass spectrometry data types, allowing custom workflows for data signal processing, annotation, and curation. The data structures were designed with an intuitive, mass spectrometric hierarchical structure, thus allowing organized and easy access to the data and calculations. Moreover, CoreMS supports direct access for almost all vendors\u2019 data formats, allowing for the centralization and automation of all data processing workflows from the raw signal to data annotation and curation.</p>\n\n<p>CoreMS aims to provide </p>\n\n<ul>\n<li>logical mass spectrometric data structure</li>\n<li>self-containing data and metadata storage</li>\n<li>modern molecular formulae assignment algorithms</li>\n<li>dynamic molecular search space database search and generator</li>\n</ul>\n\n<hr />\n\n<h2 id=\"current-version\">Current Version</h2>\n\n<p><code>3.4.1</code></p>\n\n<hr />\n\n<h2 id=\"main-developerscontact\">Main Developers/Contact</h2>\n\n<ul>\n<li><a href=\"mailto:corilo@pnnl.gov\">Yuri. E. Corilo</a>  </li>\n<li><a href=\"mailto:william.kew@pnnl.gov\">William Kew</a></li>\n<li><a href=\"mailto:katherine.heal@pnnl.gov\">Katherine Heal</a></li>\n</ul>\n\n<hr />\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>API documentation can be found <a href=\"https://emsl-computing.github.io/CoreMS/corems.html\">here</a>.</p>\n\n<p>Overview slides can be found <a href=\"https://github.com/EMSL-Computing/CoreMS/blob/master/examples/CoreMS-Overview.pdf\">here</a>.</p>\n\n<hr />\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>As an open source project, CoreMS welcomes contributions of all forms. Before contributing, please see our <a href=\"./CONTRIBUTING.md\">Dev Guide</a></p>\n\n<hr />\n\n<h2 id=\"data-formats\">Data formats</h2>\n\n<h3 id=\"data-input-formats\">Data input formats</h3>\n\n<ul>\n<li>Bruker Solarix (CompassXtract)</li>\n<li>Bruker Solarix transients, ser and fid (FT magnitude mode only)</li>\n<li>ThermoFisher (.raw)</li>\n<li>Spectroswiss signal booster data-acquisition station (.hdf5)</li>\n<li>MagLab ICR data-acquisition station (FT and magnitude mode) (.dat)</li>\n<li>ANDI NetCDF for GC-MS (.cdf)</li>\n<li>mzml for LC-MS (.mzml)</li>\n<li>Generic mass list in profile and centroid mde (include all delimiters types and Excel formats)</li>\n<li>CoreMS exported processed mass list files(excel, .csv, .txt, pandas dataframe as .pkl)</li>\n<li>CoreMS self-containing Hierarchical Data Format (.hdf5)</li>\n<li>Pandas Dataframe</li>\n<li>Support for cloud Storage using s3path.S3path</li>\n</ul>\n\n<h3 id=\"data-output-formats\">Data output formats</h3>\n\n<ul>\n<li>Pandas data frame (can be saved using pickle, h5, etc)</li>\n<li>Text Files (.csv, tab separated .txt, etc)</li>\n<li>Microsoft Excel (xlsx)</li>\n<li>Automatic JSON for metadata storage and reuse</li>\n<li>Self-containing Hierarchical Data Format (.hdf5) including raw data and time-series data-point for processed data-sets with all associated metadata stored as json attributes</li>\n</ul>\n\n<h3 id=\"data-structure-types\">Data structure types</h3>\n\n<ul>\n<li>LC-MS</li>\n<li>GC-MS</li>\n<li>Transient</li>\n<li>Mass Spectra</li>\n<li>Mass Spectrum</li>\n<li>Mass Spectral Peak</li>\n<li>Molecular Formula</li>\n</ul>\n\n<hr />\n\n<h2 id=\"available-features\">Available features</h2>\n\n<h3 id=\"ft-ms-signal-processing-calibration-and-molecular-formula-search-and-assignment\">FT-MS Signal Processing, Calibration, and Molecular Formula Search and Assignment</h3>\n\n<ul>\n<li>Apodization, Zerofilling, and Magnitude mode FT</li>\n<li>Manual and automatic noise threshold calculation</li>\n<li>Peak picking using apex quadratic fitting</li>\n<li>Experimental resolving power calculation</li>\n<li>Frequency and m/z domain calibration functions:</li>\n<li>LedFord equation</li>\n<li>Linear equation</li>\n<li>Quadratic equation</li>\n<li>Automatic search most abundant <strong>Ox</strong> homologue series</li>\n<li>Automatic local (SQLite) or external (PostgreSQL) database check, generation, and search</li>\n<li>Automatic molecular formulae assignments algorithm for ESI(-) MS for natural organic matter analysis</li>\n<li>Automatic fine isotopic structure calculation and search for all isotopes</li>\n<li>Flexible Kendrick normalization base</li>\n<li>Kendrick filter using density-based clustering</li>\n<li>Kendrick classification</li>\n<li>Heteroatoms classification and visualization</li>\n</ul>\n\n<h3 id=\"gc-ms-signal-processing-calibration-and-compound-identification\">GC-MS Signal Processing, Calibration, and Compound Identification</h3>\n\n<ul>\n<li>Baseline detection, subtraction, smoothing </li>\n<li>m/z based Chromatogram Peak Deconvolution,</li>\n<li>Manual and automatic noise threshold calculation</li>\n<li>First and second derivatives peak picking methods</li>\n<li>Peak Area Calculation</li>\n<li>Retention Index Calibration</li>\n<li>Automatic local (SQLite) or external (MongoDB or PostgreSQL) database check, generation, and search</li>\n<li>Automatic molecular match algorithm with all spectral similarity methods </li>\n</ul>\n\n<h3 id=\"high-resolution-mass-spectrum-simulations\">High Resolution Mass Spectrum Simulations</h3>\n\n<ul>\n<li>Peak shape (Lorentz,  Gaussian, Voigt, and pseudo-Voigt)</li>\n<li>Peak fitting for peak shape definition</li>\n<li>Peak position in function of data points, signal to noise and resolving power (Lorentz and Gaussian)</li>\n<li>Prediction of mass error distribution</li>\n<li>Calculated ICR Resolving Power based on magnetic field (B), and transient time(T)</li>\n</ul>\n\n<h3 id=\"lc-ms-signal-processing-molecular-formula-search-and-assignment-and-spectral-similarity-searches\">LC-MS Signal Processing, Molecular Formula Search and Assignment, and Spectral Similarity Searches</h3>\n\n<p>See walkthough in <a href=\"examples/notebooks/LCMS_data_walkthrough.ipynb\">this notebook</a></p>\n\n<ul>\n<li>Two dimensional (m/z and retention time) peak picking using persistent homology</li>\n<li>Smoothing, cetroid detection, and integration of extracted ion chromatograms</li>\n<li>Peak shape metric calculations including half peak height, tailing factor, and dispersity index</li>\n<li>MS1 deconvolution of mass features</li>\n<li>Idenfitication of <sup>13</sup>C isotopes within the mass features</li>\n<li>Compatibility with molecular formula searching on MS1 or MS2 spectra</li>\n<li>Spectral search capability using entropy similarity</li>\n</ul>\n\n<hr />\n\n<h2 id=\"installation\">Installation</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>corems\n</code></pre>\n</div>\n\n<p>By default the molecular formula database will be generated using SQLite</p>\n\n<p>To use Postgresql the easiest way is to build a docker container:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>docker-compose<span class=\"w\"> </span>up<span class=\"w\"> </span>-d\n</code></pre>\n</div>\n\n<ul>\n<li>Change the url_database on MSParameters.molecular_search.url_database to: \"postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/coremsapp\"</li>\n<li>Set the url_database env variable COREMS_DATABASE_URL to: \"postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/coremsapp\"</li>\n</ul>\n\n<h3 id=\"thermo-raw-file-access\">Thermo Raw File Access:</h3>\n\n<p>To be able to open thermo file a installation of pythonnet is needed:</p>\n\n<ul>\n<li>Windows: \n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>pythonnet\n</code></pre>\n</div></li>\n</ul>\n\n<ul>\n<li>Mac and Linux:\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>brew<span class=\"w\"> </span>install<span class=\"w\"> </span>mono\npip<span class=\"w\"> </span>install<span class=\"w\"> </span>pythonnet<span class=\"w\">   </span>\n</code></pre>\n</div></li>\n</ul>\n\n<hr />\n\n<h2 id=\"docker-stack\">Docker stack</h2>\n\n<p>Another option to use CoreMS is to run the docker stack that will start the CoreMS containers</p>\n\n<h3 id=\"molecular-database-and-jupyter-notebook-docker-containers\">Molecular Database and Jupyter Notebook Docker Containers</h3>\n\n<p>A docker container containing:</p>\n\n<ul>\n<li>A custom python distribution will all dependencies installed</li>\n<li>A Jupyter notebook server with workflow examples</li>\n<li>A PostgreSQL database for the molecular formulae assignment</li>\n</ul>\n\n<p>If you don't have docker installed, the easiest way is to <a href=\"https://hub.docker.com/?overlay=onboarding\">install docker for desktop</a></p>\n\n<ol>\n<li><p>Start the containers using docker-compose (easiest way): </p>\n\n<p>On docker-compose-jupyter.yml there is a volume mapping for the tests_data directory with the data provided for testing, to change to your data location: </p>\n\n<ul>\n<li><p>locate the volumes on docker-compose-jupyter.yml:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>volumes:\n<span class=\"w\">  </span>-<span class=\"w\"> </span>./tests/tests_data:/home/CoreMS/data\n</code></pre>\n</div></li>\n<li><p>change \"./tests/tests_data\" to your data directory location</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>volumes:\n<span class=\"w\">  </span>-<span class=\"w\"> </span>path_to_your_data_directory:/home/corems/data\n</code></pre>\n</div></li>\n<li><p>save the file and then call:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>docker-compose<span class=\"w\"> </span>-f<span class=\"w\"> </span>docker-compose-jupyter.yml<span class=\"w\"> </span>up\n</code></pre>\n</div></li>\n</ul></li>\n<li><p>Another option is to manually build the containers: </p>\n\n<ul>\n<li><p>Build the corems image:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>docker<span class=\"w\"> </span>build<span class=\"w\"> </span>-t<span class=\"w\"> </span>corems:local<span class=\"w\"> </span>.\n</code></pre>\n</div></li>\n<li><p>Start the database container:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>docker-compose<span class=\"w\"> </span>up<span class=\"w\"> </span>-d<span class=\"w\">   </span>\n</code></pre>\n</div></li>\n<li><p>Start the Jupyter Notebook:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>docker<span class=\"w\"> </span>run<span class=\"w\"> </span>--rm<span class=\"w\"> </span>-v<span class=\"w\"> </span>./data:/home/CoreMS/data<span class=\"w\"> </span>corems:local\n</code></pre>\n</div></li>\n<li><p>Open your browser, copy and past the URL address provided in the terminal: <code>http://localhost:8888/?token=&lt;token&gt;.</code></p></li>\n<li><p>Open the CoreMS-Tutorial.ipynb</p></li>\n</ul></li>\n</ol>\n\n<hr />\n\n<h2 id=\"example-for-ft-icr-data-processing\">Example for FT-ICR Data Processing</h2>\n\n<p>More examples can be found under the directory examples/scripts, examples/notebooks</p>\n\n<ul>\n<li>Basic functionality example</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">corems.transient.input.brukerSolarix</span> <span class=\"kn\">import</span> <span class=\"n\">ReadBrukerSolarix</span>\n<span class=\"kn\">from</span> <span class=\"nn\">corems.molecular_id.search.molecularFormulaSearch</span> <span class=\"kn\">import</span> <span class=\"n\">SearchMolecularFormulas</span>\n<span class=\"kn\">from</span> <span class=\"nn\">corems.mass_spectrum.output.export</span> <span class=\"kn\">import</span> <span class=\"n\">HighResMassSpecExport</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span>\n\n<span class=\"n\">file_path</span><span class=\"o\">=</span> <span class=\"s1\">&#39;tests/tests_data/ftms/ESI_NEG_SRFA.d&#39;</span>\n\n<span class=\"c1\"># Instatiate the Bruker Solarix reader with the filepath</span>\n<span class=\"n\">bruker_reader</span> <span class=\"o\">=</span> <span class=\"n\">ReadBrukerSolarix</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use the reader to instatiate a transient object</span>\n<span class=\"n\">bruker_transient_obj</span> <span class=\"o\">=</span> <span class=\"n\">bruker_reader</span><span class=\"o\">.</span><span class=\"n\">get_transient</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Calculate the transient duration time</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span>  <span class=\"n\">bruker_transient_obj</span><span class=\"o\">.</span><span class=\"n\">transient_time</span>\n\n<span class=\"c1\"># Use the transient object to instatitate a mass spectrum object</span>\n<span class=\"n\">mass_spectrum_obj</span> <span class=\"o\">=</span> <span class=\"n\">bruker_transient_obj</span><span class=\"o\">.</span><span class=\"n\">get_mass_spectrum</span><span class=\"p\">(</span><span class=\"n\">plot_result</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The following SearchMolecularFormulas function does the following</span>\n<span class=\"c1\"># - searches monoisotopic molecular formulas for all mass spectral peaks</span>\n<span class=\"c1\"># - calculates fine isotopic structure based on monoisotopic molecular formulas found and current dynamic range</span>\n<span class=\"c1\"># - searches molecular formulas of correspondent calculated isotopologues</span>\n<span class=\"c1\"># - settings are stored at SearchConfig.json and can be changed directly on the file or inside the framework class</span>\n\n<span class=\"n\">SearchMolecularFormulas</span><span class=\"p\">(</span><span class=\"n\">mass_spectrum_obj</span><span class=\"p\">,</span> <span class=\"n\">first_hit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run_worker_mass_spectrum</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Iterate over mass spectral peaks objs within the mass_spectrum_obj</span>\n<span class=\"k\">for</span> <span class=\"n\">mspeak</span> <span class=\"ow\">in</span> <span class=\"n\">mass_spectrum_obj</span><span class=\"o\">.</span><span class=\"n\">sort_by_abundance</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># If there is at least one molecular formula associated, mspeak returns True</span>\n    <span class=\"k\">if</span>  <span class=\"n\">mspeak</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># Get the molecular formula with the highest mass accuracy</span>\n        <span class=\"n\">molecular_formula</span> <span class=\"o\">=</span> <span class=\"n\">mspeak</span><span class=\"o\">.</span><span class=\"n\">molecular_formula_lowest_error</span>\n\n        <span class=\"c1\"># Plot mz and peak height</span>\n        <span class=\"n\">pyplot</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">mspeak</span><span class=\"o\">.</span><span class=\"n\">mz_exp</span><span class=\"p\">,</span> <span class=\"n\">mspeak</span><span class=\"o\">.</span><span class=\"n\">abundance</span><span class=\"p\">,</span> <span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">&#39;g&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Iterate over all molecular formulas associated with the ms peaks obj</span>\n        <span class=\"k\">for</span> <span class=\"n\">molecular_formula</span> <span class=\"ow\">in</span> <span class=\"n\">mspeak</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># Check if the molecular formula is a isotopologue</span>\n            <span class=\"k\">if</span> <span class=\"n\">molecular_formula</span><span class=\"o\">.</span><span class=\"n\">is_isotopologue</span><span class=\"p\">:</span>\n\n                <span class=\"c1\"># Access the molecular formula text representation and print</span>\n                <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">molecular_formula</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Get 13C atoms count</span>\n                <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">molecular_formula</span><span class=\"p\">[</span><span class=\"s1\">&#39;13C&#39;</span><span class=\"p\">])</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get mz and peak height</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mspeak</span><span class=\"o\">.</span><span class=\"n\">mz_exp</span><span class=\"p\">,</span><span class=\"n\">mspeak</span><span class=\"o\">.</span><span class=\"n\">abundance</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save data</span>\n<span class=\"c1\">## to a csv file</span>\n<span class=\"n\">mass_spectrum_obj</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">mass_spectrum_obj</span><span class=\"o\">.</span><span class=\"n\">to_hdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># to pandas Datarame pickle</span>\n<span class=\"n\">mass_spectrum_obj</span><span class=\"o\">.</span><span class=\"n\">to_pandas</span><span class=\"p\">(</span><span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Extract data as a pandas Dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">mass_spectrum_obj</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"uml-diagrams\">UML Diagrams</h2>\n\n<p>UML (unified modeling language) diagrams for Direct Infusion FT-MS and GC-MS classes can be found <a href=\"docs/uml\">here</a>.</p>\n\n<hr />\n\n<h2 id=\"citing-corems\">Citing CoreMS</h2>\n\n<p>If you use CoreMS in your work, please use the following citation:</p>\n\n<p>Version <a href=\"https://github.com/EMSL-Computing/CoreMS/releases/tag/v3.4.1\">3.4.1 Release on GitHub</a>, archived on Zenodo:  </p>\n\n<p><a href=\"https://doi.org/10.5281/zenodo.14009575\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.14009575.svg\" alt=\"DOI\" /></a></p>\n\n<p>Yuri E. Corilo, William R. Kew, Lee Ann McCue, Katherine R . Heal, James C. Carr (2024, October 29). EMSL-Computing/CoreMS: CoreMS 3.4.1 (Version v3.4.1), as developed on Github. Zenodo. <a href=\"http://doi.org/10.5281/zenodo.14009575\">http://doi.org/10.5281/zenodo.14009575</a></p>\n\n<p>```</p>\n\n<hr />\n\n<p>This material was prepared as an account of work sponsored by an agency of the\nUnited States Government.  Neither the United States Government nor the United\nStates Department of Energy, nor Battelle, nor any of their employees, nor any\njurisdiction or organization that has cooperated in the development of these\nmaterials, makes any warranty, express or implied, or assumes any legal\nliability or responsibility for the accuracy, completeness, or usefulness or\nany information, apparatus, product, software, or process disclosed, or\nrepresents that its use would not infringe privately owned rights.</p>\n\n<p>Reference herein to any specific commercial product, process, or service by\ntrade name, trademark, manufacturer, or otherwise does not necessarily\nconstitute or imply its endorsement, recommendation, or favoring by the United\nStates Government or any agency thereof, or Battelle Memorial Institute. The\nviews and opinions of authors expressed herein do not necessarily state or\nreflect those of the United States Government or any agency thereof.</p>\n\n<pre><code>             PACIFIC NORTHWEST NATIONAL LABORATORY\n                          operated by\n                            BATTELLE\n                            for the\n               UNITED STATES DEPARTMENT OF ENERGY\n                under Contract DE-AC05-76RL01830\n</code></pre>\n"}, {"fullname": "corems.readme_path", "modulename": "corems", "qualname": "readme_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/heal742/LOCAL/corems_dev/corems/corems/../README.md&#x27;"}, {"fullname": "corems.timeit", "modulename": "corems", "qualname": "timeit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">print_time</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.SuppressPrints", "modulename": "corems", "qualname": "SuppressPrints", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "corems.chunks", "modulename": "corems", "qualname": "chunks", "kind": "function", "doc": "<p>Yield successive n-sized chunks from lst.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.corems_md5", "modulename": "corems", "qualname": "corems_md5", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak", "modulename": "corems.chroma_peak", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.calc", "modulename": "corems.chroma_peak.calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.GCPeakCalculation", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "GCPeakCalculation", "kind": "class", "doc": "<p>Class for performing peak calculations in GC chromatography.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li><code>calc_area(self, tic: List[float], dx: float) -&gt; None</code>: Calculate the area under the curve of the chromatogram.</li>\n<li><code>linear_ri(self, right_ri: float, left_ri: float, left_rt: float, right_rt: float) -&gt; float</code>: Calculate the retention index using linear interpolation.</li>\n<li><code>calc_ri(self, rt_ri_pairs: List[Tuple[float, float]]) -&gt; int</code>: Calculate the retention index based on the given retention time - retention index pairs.</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.GCPeakCalculation.calc_area", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "GCPeakCalculation.calc_area", "kind": "function", "doc": "<p>Calculate the area under the curve of the chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tic</strong> (List[float]):\nThe total ion current (TIC) values.</li>\n<li><strong>dx</strong> (float):\nThe spacing between data points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tic</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">dx</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.GCPeakCalculation.linear_ri", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "GCPeakCalculation.linear_ri", "kind": "function", "doc": "<p>Calculate the retention index using linear interpolation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>right_ri</strong> (float):\nThe retention index at the right reference point.</li>\n<li><strong>left_ri</strong> (float):\nThe retention index at the left reference point.</li>\n<li><strong>left_rt</strong> (float):\nThe retention time at the left reference point.</li>\n<li><strong>right_rt</strong> (float):\nThe retention time at the right reference point.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The calculated retention index.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">right_ri</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">left_ri</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">left_rt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">right_rt</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.GCPeakCalculation.calc_ri", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "GCPeakCalculation.calc_ri", "kind": "function", "doc": "<p>Calculate the retention index based on the given retention time - retention index pairs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rt_ri_pairs</strong> (List[Tuple[float, float]]):\nThe list of retention time - retention index pairs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rt_ri_pairs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.LCMSMassFeatureCalculation", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "LCMSMassFeatureCalculation", "kind": "class", "doc": "<p>Class for performing peak calculations in LC-MS mass spectrometry.</p>\n\n<p>This class is intended to be used as a mixin class for the LCMSMassFeature class.</p>\n"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.LCMSMassFeatureCalculation.calc_dispersity_index", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "LCMSMassFeatureCalculation.calc_dispersity_index", "kind": "function", "doc": "<p>Calculate the dispersity index of the mass feature.</p>\n\n<p>This function calculates the dispersity index of the mass feature and\nstores the result in the <code>_dispersity_index</code> attribute. The dispersity index is calculated as the standard\ndeviation of the retention times that account for 50% of the cummulative intensity, starting from the most\nintense point, as described in [1].</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, stores the result in the <code>_dispersity_index</code> attribute of the class.</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the EIC data are not available.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<p>1) Boiteau, Rene M., et al. \"Relating Molecular Properties to the Persistence of Marine Dissolved\nOrganic Matter with Liquid Chromatography\u2013Ultrahigh-Resolution Mass Spectrometry.\"\nEnvironmental Science &amp; Technology 58.7 (2024): 3267-3277.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.LCMSMassFeatureCalculation.calc_fraction_height_width", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "LCMSMassFeatureCalculation.calc_fraction_height_width", "kind": "function", "doc": "<p>Calculate the height width of the mass feature at a specfic fraction of the maximum intensity.</p>\n\n<p>This function returns a tuple with the minimum and maximum half-height width based on scan resolution.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fraction</strong> (float):\nThe fraction of the maximum intensity to calculate the height width.\nFor example, 0.5 will calculate the half-height width.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[float, float, bool]</strong>: The minimum and maximum half-height width based on scan resolution (in minutes), and a boolean indicating if the width was estimated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fraction</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.LCMSMassFeatureCalculation.calc_half_height_width", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "LCMSMassFeatureCalculation.calc_half_height_width", "kind": "function", "doc": "<p>Calculate the half-height width of the mass feature.</p>\n\n<p>This function calculates the half-height width of the mass feature and\nstores the result in the <code>_half_height_width</code> attribute</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, stores the result in the <code>_half_height_width</code> attribute of the class.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">accept_estimated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.calc.ChromaPeakCalc.LCMSMassFeatureCalculation.calc_tailing_factor", "modulename": "corems.chroma_peak.calc.ChromaPeakCalc", "qualname": "LCMSMassFeatureCalculation.calc_tailing_factor", "kind": "function", "doc": "<p>Calculate the peak asymmetry of the mass feature.</p>\n\n<p>This function calculates the peak asymmetry of the mass feature and\nstores the result in the <code>_tailing_factor</code> attribute.\nCalculations completed at 5% of the peak height in accordance with the USP tailing factor calculation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, stores the result in the <code>_tailing_factor</code> attribute of the class.</strong></li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<p>1) JIS K0124:2011 General rules for high performance liquid chromatography\n2) JIS K0214:2013 Technical terms for analytical chemistry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">accept_estimated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.factory", "modulename": "corems.chroma_peak.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase", "kind": "class", "doc": "<p>Base class for chromatographic peak (ChromaPeak) objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chromatogram_parent</strong> (Chromatogram):\nThe parent chromatogram object.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>start_index</strong> (int):\nThe start index of the peak.</li>\n<li><strong>index</strong> (int):\nThe index of the peak.</li>\n<li><strong>final_index</strong> (int):\nThe final index of the peak.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>start_scan</strong> (int):\nThe start scan of the peak.</li>\n<li><strong>final_scan</strong> (int):\nThe final scan of the peak.</li>\n<li><strong>apex_scan</strong> (int):\nThe apex scan of the peak.</li>\n<li><strong>chromatogram_parent</strong> (Chromatogram):\nThe parent chromatogram object.</li>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>_area</strong> (float):\nThe area of the peak.</li>\n</ul>\n\n<h6 id=\"properties\">Properties</h6>\n\n<ul>\n<li>retention_time : float.\nThe retention time of the peak.</li>\n<li>tic : float.\nThe total ion current of the peak.</li>\n<li>area : float.\nThe area of the peak.</li>\n<li>rt_list : list.\nThe list of retention times within the peak.</li>\n<li>tic_list : list.\nThe list of total ion currents within the peak.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>None</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.__init__", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chromatogram_parent</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectrum_obj</span>,</span><span class=\"param\">\t<span class=\"n\">start_index</span>,</span><span class=\"param\">\t<span class=\"n\">index</span>,</span><span class=\"param\">\t<span class=\"n\">final_index</span></span>)</span>"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.start_scan", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.start_scan", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.final_scan", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.final_scan", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.apex_scan", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.apex_scan", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.chromatogram_parent", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.chromatogram_parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.mass_spectrum", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.mass_spectrum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.retention_time", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.retention_time", "kind": "variable", "doc": "<p>Retention Time</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.tic", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.tic", "kind": "variable", "doc": "<p>Total Ion Current</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.area", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.area", "kind": "variable", "doc": "<p>Peak Area</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.rt_list", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.rt_list", "kind": "variable", "doc": "<p>Retention Time List</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.ChromaPeakBase.tic_list", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "ChromaPeakBase.tic_list", "kind": "variable", "doc": "<p>Total Ion Current List</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature", "kind": "class", "doc": "<p>Class representing a mass feature in a liquid chromatography (LC) chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcms_parent</strong> (LCMS):\nThe parent LCMSBase object.</li>\n<li><strong>mz</strong> (float):\nThe observed mass to charge ratio of the feature.</li>\n<li><strong>retention_time</strong> (float):\nThe retention time of the feature (in minutes), at the apex.</li>\n<li><strong>intensity</strong> (float):\nThe intensity of the feature.</li>\n<li><strong>apex_scan</strong> (int):\nThe scan number of the apex of the feature.</li>\n<li><strong>persistence</strong> (float, optional):\nThe persistence of the feature. Default is None.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_mz_exp</strong> (float):\nThe observed mass to charge ratio of the feature.</li>\n<li><strong>_mz_cal</strong> (float):\nThe calibrated mass to charge ratio of the feature.</li>\n<li><strong>_retention_time</strong> (float):\nThe retention time of the feature (in minutes), at the apex.</li>\n<li><strong>_apex_scan</strong> (int):\nThe scan number of the apex of the feature.</li>\n<li><strong>_intensity</strong> (float):\nThe intensity of the feature.</li>\n<li><strong>_persistence</strong> (float):\nThe persistence of the feature.</li>\n<li><strong>_eic_data</strong> (EIC_Data):\nThe EIC data object associated with the feature.</li>\n<li><strong>_dispersity_index</strong> (float):\nThe dispersity index of the feature.</li>\n<li><strong>_half_height_width</strong> (numpy.ndarray):\nThe half height width of the feature (in minutes, as an array of min and max values).</li>\n<li><strong>_tailing_factor</strong> (float):\nThe tailing factor of the feature.\n&gt; 1 indicates tailing, &lt; 1 indicates fronting, = 1 indicates symmetrical peak.</li>\n<li><strong>_ms_deconvoluted_idx</strong> ([int]):\nThe indexes of the mass_spectrum attribute in the deconvoluted mass spectrum.</li>\n<li><strong>is_calibrated</strong> (bool):\nIf True, the feature has been calibrated. Default is False.</li>\n<li><strong>monoisotopic_mf_id</strong> (int):\nMass feature id that is the monoisotopic version of self.\nIf self.id, then self is the monoisotopic feature). Default is None.</li>\n<li><strong>isotopologue_type</strong> (str):\nThe isotopic class of the feature, i.e. \"13C1\", \"13C2\", \"13C1 37Cl1\" etc.\nDefault is None.</li>\n<li><strong>ms2_scan_numbers</strong> (list):\nList of scan numbers of the MS2 spectra associated with the feature.\nDefault is an empty list.</li>\n<li><strong>ms2_mass_spectra</strong> (dict):\nDictionary of MS2 spectra associated with the feature (key = scan number for DDA).\nDefault is an empty dictionary.</li>\n<li><strong>ms2_similarity_results</strong> (list):\nList of MS2 similarity results associated with the mass feature.\nDefault is an empty list.</li>\n<li><strong>id</strong> (int):\nThe ID of the feature, also the key in the parent LCMS object's\n<code>mass_features</code> dictionary.</li>\n<li><strong>mass_spectrum_deconvoluted_parent</strong> (bool):\nIf True, the mass feature corresponds to the most intense peak in the deconvoluted mass spectrum. Default is None.</li>\n<li><strong>associated_mass_features_deconvoluted</strong> (list):\nList of mass features associated with the deconvoluted mass spectrum. Default is an empty list.</li>\n</ul>\n", "bases": "ChromaPeakBase, corems.chroma_peak.calc.ChromaPeakCalc.LCMSMassFeatureCalculation"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.__init__", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lcms_parent</span>,</span><span class=\"param\">\t<span class=\"n\">mz</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">retention_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">intensity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">apex_scan</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">persistence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.monoisotopic_mf_id", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.monoisotopic_mf_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.isotopologue_type", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.isotopologue_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.ms2_scan_numbers", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.ms2_scan_numbers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.ms2_mass_spectra", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.ms2_mass_spectra", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.ms2_similarity_results", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.ms2_similarity_results", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.mass_spectrum_deconvoluted_parent", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.mass_spectrum_deconvoluted_parent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.associated_mass_features_deconvoluted", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.associated_mass_features_deconvoluted", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.update_mz", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.update_mz", "kind": "function", "doc": "<p>Update the mass to charge ratio from the mass spectrum object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.plot", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.plot", "kind": "function", "doc": "<p>Plot the mass feature.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>to_plot</strong> (list, optional):\nList of strings specifying what to plot, any iteration of\n\"EIC\", \"MS2\", and \"MS1\".\nDefault is [\"EIC\", \"MS1\", \"MS2\"].</li>\n<li><strong>return_fig</strong> (bool, optional):\nIf True, the figure is returned. Default is True.</li>\n<li><strong>plot_smoothed_eic</strong> (bool, optional):\nIf True, the smoothed EIC is plotted. Default is False.</li>\n<li><strong>plot_eic_datapoints</strong> (bool, optional):\nIf True, the EIC data points are plotted. Default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure or None</strong>: The figure object if <code>return_fig</code> is True.\nOtherwise None and the figure is displayed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;EIC&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;MS1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;MS2&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">return_fig</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">plot_smoothed_eic</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_eic_datapoints</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.mz", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.mz", "kind": "variable", "doc": "<p>Mass to charge ratio of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.mass_spectrum_deconvoluted", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.mass_spectrum_deconvoluted", "kind": "variable", "doc": "<p>Returns the deconvoluted mass spectrum object associated with the mass feature, if deconvolution has been performed.</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.retention_time", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.retention_time", "kind": "variable", "doc": "<p>Retention time of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.apex_scan", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.apex_scan", "kind": "variable", "doc": "<p>Apex scan of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.intensity", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.intensity", "kind": "variable", "doc": "<p>Intensity of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.persistence", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.persistence", "kind": "variable", "doc": "<p>Persistence of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.eic_rt_list", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.eic_rt_list", "kind": "variable", "doc": "<p>Retention time list between the beginning and end of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.eic_list", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.eic_list", "kind": "variable", "doc": "<p>EIC List between the beginning and end of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.ms1_peak", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.ms1_peak", "kind": "variable", "doc": "<p>MS1 peak from associated mass spectrum that is closest to the mass feature's m/z</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.tailing_factor", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.tailing_factor", "kind": "variable", "doc": "<p>Tailing factor of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.dispersity_index", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.dispersity_index", "kind": "variable", "doc": "<p>Dispersity index of the mass feature</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.half_height_width", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.half_height_width", "kind": "variable", "doc": "<p>Half height width of the mass feature, average of min and max values, in minutes</p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.LCMSMassFeature.best_ms2", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "LCMSMassFeature.best_ms2", "kind": "variable", "doc": "<p>Points to the best representative MS2 mass spectrum</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>If there is only one MS2 mass spectrum, it will be returned\nIf there are MS2 similarity results, this will return the MS2 mass spectrum with the highest entropy similarity score.\nIf there are no MS2 similarity results, the best MS2 mass spectrum is determined by the closest scan time to the apex of the mass feature, with higher resolving power.  Checks for and disqualifies possible chimeric spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpectrum or None</strong>: The best MS2 mass spectrum.</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak", "kind": "class", "doc": "<p>Class representing a peak in a gas chromatography (GC) chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chromatogram_parent</strong> (Chromatogram):\nThe parent chromatogram object.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object associated with the peak.</li>\n<li><strong>indexes</strong> (tuple):\nThe indexes of the peak in the chromatogram.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_compounds</strong> (list):\nList of compounds associated with the peak.</li>\n<li><strong>_ri</strong> (float or None):\nRetention index of the peak.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>__len__(). Returns the number of compounds associated with the peak.</li>\n<li>__getitem__(position).  Returns the compound at the specified position.</li>\n<li>remove_compound(compounds_obj). Removes the specified compound from the peak.</li>\n<li>clear_compounds(). Removes all compounds from the peak.</li>\n<li>add_compound(compounds_dict, spectral_similarity_scores, ri_score=None, similarity_score=None). Adds a compound to the peak with the specified attributes.</li>\n<li>ri().  Returns the retention index of the peak.</li>\n<li>highest_ss_compound(). Returns the compound with the highest spectral similarity score.</li>\n<li>highest_score_compound(). Returns the compound with the highest similarity score.</li>\n<li>compound_names(). Returns a list of names of compounds associated with the peak.</li>\n</ul>\n", "bases": "ChromaPeakBase, corems.chroma_peak.calc.ChromaPeakCalc.GCPeakCalculation"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.__init__", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatogram_parent</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span>, </span><span class=\"param\"><span class=\"n\">indexes</span></span>)</span>"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.remove_compound", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.remove_compound", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">compounds_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.clear_compounds", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.clear_compounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.add_compound", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.add_compound", "kind": "function", "doc": "<p>Adds a compound to the peak with the specified attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>compounds_dict</strong> (dict):\nDictionary containing the compound information.</li>\n<li><strong>spectral_similarity_scores</strong> (dict):\nDictionary containing the spectral similarity scores.</li>\n<li><strong>ri_score</strong> (float or None, optional):\nThe retention index score of the compound. Default is None.</li>\n<li><strong>similarity_score</strong> (float or None, optional):\nThe similarity score of the compound. Default is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">compounds_dict</span>,</span><span class=\"param\">\t<span class=\"n\">spectral_similarity_scores</span>,</span><span class=\"param\">\t<span class=\"n\">ri_score</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">similarity_score</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.ri", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.ri", "kind": "variable", "doc": "<p>Returns the retention index of the peak.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float or None</strong>: The retention index of the peak.</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.highest_ss_compound", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.highest_ss_compound", "kind": "variable", "doc": "<p>Returns the compound with the highest spectral similarity score.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>LowResCompoundRef or None</strong>: The compound with the highest spectral similarity score.</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.highest_score_compound", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.highest_score_compound", "kind": "variable", "doc": "<p>Returns the compound with the highest similarity score.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>LowResCompoundRef or None</strong>: The compound with the highest similarity score.</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeak.compound_names", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeak.compound_names", "kind": "variable", "doc": "<p>Returns a list of names of compounds associated with the peak.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: List of names of compounds associated with the peak.</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeakDeconvolved", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeakDeconvolved", "kind": "class", "doc": "<p>Represents a deconvolved peak in a chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chromatogram_parent</strong> (Chromatogram):\nThe parent chromatogram object.</li>\n<li><strong>mass_spectra</strong> (list):\nList of mass spectra associated with the peak.</li>\n<li><strong>apex_index</strong> (int):\nIndex of the apex mass spectrum in the <code>mass_spectra</code> list.</li>\n<li><strong>rt_list</strong> (list):\nList of retention times.</li>\n<li><strong>tic_list</strong> (list):\nList of total ion currents.</li>\n</ul>\n", "bases": "GCPeak"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeakDeconvolved.__init__", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeakDeconvolved.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatogram_parent</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span>, </span><span class=\"param\"><span class=\"n\">apex_index</span>, </span><span class=\"param\"><span class=\"n\">rt_list</span>, </span><span class=\"param\"><span class=\"n\">tic_list</span></span>)</span>"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeakDeconvolved.mass_spectra", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeakDeconvolved.mass_spectra", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeakDeconvolved.rt_list", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeakDeconvolved.rt_list", "kind": "variable", "doc": "<p>Get the list of retention times.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The list of retention times.</li>\n</ul>\n"}, {"fullname": "corems.chroma_peak.factory.chroma_peak_classes.GCPeakDeconvolved.tic_list", "modulename": "corems.chroma_peak.factory.chroma_peak_classes", "qualname": "GCPeakDeconvolved.tic_list", "kind": "variable", "doc": "<p>Get the list of total ion currents.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The list of total ion currents.</li>\n</ul>\n"}, {"fullname": "corems.encapsulation", "modulename": "corems.encapsulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.constant", "modulename": "corems.encapsulation.constant", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.constant.Labels", "modulename": "corems.encapsulation.constant", "qualname": "Labels", "kind": "class", "doc": "<p>Class for Labels used in CoreMS</p>\n\n<p>These labels are used to define:</p>\n\n<ul>\n<li>types of columns in plaintext data inputs,</li>\n<li>types of data/mass spectra</li>\n<li>types of assignment for ions</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.constant.Labels.mz", "modulename": "corems.encapsulation.constant", "qualname": "Labels.mz", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;m/z&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.abundance", "modulename": "corems.encapsulation.constant", "qualname": "Labels.abundance", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Peak Height&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.rp", "modulename": "corems.encapsulation.constant", "qualname": "Labels.rp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Resolving Power&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.s2n", "modulename": "corems.encapsulation.constant", "qualname": "Labels.s2n", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;S/N&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.label", "modulename": "corems.encapsulation.constant", "qualname": "Labels.label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;label&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.bruker_profile", "modulename": "corems.encapsulation.constant", "qualname": "Labels.bruker_profile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Bruker_Profile&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.thermo_profile", "modulename": "corems.encapsulation.constant", "qualname": "Labels.thermo_profile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Thermo_Profile&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.simulated_profile", "modulename": "corems.encapsulation.constant", "qualname": "Labels.simulated_profile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Simulated Profile&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.booster_profile", "modulename": "corems.encapsulation.constant", "qualname": "Labels.booster_profile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Booster Profile&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.bruker_frequency", "modulename": "corems.encapsulation.constant", "qualname": "Labels.bruker_frequency", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Bruker_Frequency&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.midas_frequency", "modulename": "corems.encapsulation.constant", "qualname": "Labels.midas_frequency", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Midas_Frequency&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.thermo_centroid", "modulename": "corems.encapsulation.constant", "qualname": "Labels.thermo_centroid", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Thermo_Centroid&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.corems_centroid", "modulename": "corems.encapsulation.constant", "qualname": "Labels.corems_centroid", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;CoreMS_Centroid&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.gcms_centroid", "modulename": "corems.encapsulation.constant", "qualname": "Labels.gcms_centroid", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Thermo_Centroid&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.unassigned", "modulename": "corems.encapsulation.constant", "qualname": "Labels.unassigned", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;unassigned&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.radical_ion", "modulename": "corems.encapsulation.constant", "qualname": "Labels.radical_ion", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RADICAL&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.protonated_de_ion", "modulename": "corems.encapsulation.constant", "qualname": "Labels.protonated_de_ion", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;DE_OR_PROTONATED&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.protonated", "modulename": "corems.encapsulation.constant", "qualname": "Labels.protonated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;protonated&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.de_protonated", "modulename": "corems.encapsulation.constant", "qualname": "Labels.de_protonated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;de-protonated&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.adduct_ion", "modulename": "corems.encapsulation.constant", "qualname": "Labels.adduct_ion", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ADDUCT&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.neutral", "modulename": "corems.encapsulation.constant", "qualname": "Labels.neutral", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;neutral&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.ion_type", "modulename": "corems.encapsulation.constant", "qualname": "Labels.ion_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;IonType&#x27;"}, {"fullname": "corems.encapsulation.constant.Labels.ion_type_translate", "modulename": "corems.encapsulation.constant", "qualname": "Labels.ion_type_translate", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;protonated&#x27;: &#x27;DE_OR_PROTONATED&#x27;, &#x27;de-protonated&#x27;: &#x27;DE_OR_PROTONATED&#x27;, &#x27;radical&#x27;: &#x27;RADICAL&#x27;, &#x27;adduct&#x27;: &#x27;ADDUCT&#x27;, &#x27;ADDUCT&#x27;: &#x27;ADDUCT&#x27;}"}, {"fullname": "corems.encapsulation.constant.Atoms", "modulename": "corems.encapsulation.constant", "qualname": "Atoms", "kind": "class", "doc": "<p>Class for Atoms in CoreMS</p>\n\n<p>This class includes key properties of atoms (and the electron) and isotopes, including their exact masses, relative abundances, and covalences.\nIt also associates which isotopes are for the same element, and provides an ordering of elements.</p>\n\n<p>IUPAC definition of monoisotopic mass is based on the most abundant isotopes of each element present.\nHere, we will use atom symbols with isotope numbers for all isotopes excluding the most abundant one.\nThis list has been corrected up to Iodine.</p>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>NIST - Last Accessed 2019-06-12\n<a href=\"https://www.nist.gov/pml/atomic-weights-and-isotopic-compositions-relative-atomic-masses\">https://www.nist.gov/pml/atomic-weights-and-isotopic-compositions-relative-atomic-masses</a></li>\n</ol>\n"}, {"fullname": "corems.encapsulation.constant.Atoms.electron_mass", "modulename": "corems.encapsulation.constant", "qualname": "Atoms.electron_mass", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.000548579909065"}, {"fullname": "corems.encapsulation.constant.Atoms.atomic_masses", "modulename": "corems.encapsulation.constant", "qualname": "Atoms.atomic_masses", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;H&#x27;: 1.00782503223, &#x27;D&#x27;: 2.01410177812, &#x27;T&#x27;: 3.0160492779, &#x27;3He&#x27;: 3.0160293201, &#x27;He&#x27;: 4.00260325413, &#x27;6Li&#x27;: 6.0151228874, &#x27;Li&#x27;: 7.0160034366, &#x27;Be&#x27;: 9.012183065, &#x27;10B&#x27;: 10.01293695, &#x27;B&#x27;: 11.00930536, &#x27;C&#x27;: 12.0, &#x27;13C&#x27;: 13.00335483507, &#x27;14C&#x27;: 14.0032419884, &#x27;N&#x27;: 14.00307400443, &#x27;15N&#x27;: 15.00010889888, &#x27;O&#x27;: 15.99491461957, &#x27;17O&#x27;: 16.9991317565, &#x27;18O&#x27;: 17.99915961286, &#x27;F&#x27;: 18.99840316273, &#x27;Ne&#x27;: 19.9924401762, &#x27;21Ne&#x27;: 20.993846685, &#x27;22Ne&#x27;: 21.991385114, &#x27;Na&#x27;: 22.989769282, &#x27;Mg&#x27;: 23.985041697, &#x27;25Mg&#x27;: 24.985836976, &#x27;26Mg&#x27;: 25.982592968, &#x27;Al&#x27;: 26.98153853, &#x27;Si&#x27;: 27.97692653465, &#x27;29Si&#x27;: 28.9764946649, &#x27;30Si&#x27;: 29.973770136, &#x27;P&#x27;: 30.97376199842, &#x27;S&#x27;: 31.9720711744, &#x27;33S&#x27;: 32.9714589098, &#x27;34S&#x27;: 33.967867004, &#x27;36S&#x27;: 35.96708071, &#x27;Cl&#x27;: 34.968852682, &#x27;37Cl&#x27;: 36.965902602, &#x27;36Ar&#x27;: 35.967545105, &#x27;38Ar&#x27;: 37.96273211, &#x27;Ar&#x27;: 39.9623831237, &#x27;K&#x27;: 38.9637064864, &#x27;40K&#x27;: 39.963998166, &#x27;41K&#x27;: 40.9618252579, &#x27;Ca&#x27;: 39.962590863, &#x27;42Ca&#x27;: 41.95861783, &#x27;43Ca&#x27;: 42.95876644, &#x27;44Ca&#x27;: 43.95548156, &#x27;46Ca&#x27;: 45.953689, &#x27;48Ca&#x27;: 47.95252276, &#x27;Sc&#x27;: 44.95590828, &#x27;46Ti&#x27;: 45.95262772, &#x27;47Ti&#x27;: 46.95175879, &#x27;Ti&#x27;: 47.94794198, &#x27;49Ti&#x27;: 48.94786568, &#x27;50Ti&#x27;: 49.94478689, &#x27;50V&#x27;: 49.94715601, &#x27;V&#x27;: 50.94395704, &#x27;50Cr&#x27;: 49.94604183, &#x27;Cr&#x27;: 51.94050623, &#x27;53Cr&#x27;: 52.94064815, &#x27;54Cr&#x27;: 53.93887916, &#x27;Mn&#x27;: 54.93804391, &#x27;54Fe&#x27;: 53.93960899, &#x27;Fe&#x27;: 55.93493633, &#x27;57Fe&#x27;: 56.93539284, &#x27;58Fe&#x27;: 57.93327443, &#x27;Co&#x27;: 58.93319429, &#x27;Ni&#x27;: 57.93534241, &#x27;60Ni&#x27;: 59.93078588, &#x27;61Ni&#x27;: 60.93105557, &#x27;62Ni&#x27;: 61.92834537, &#x27;64Ni&#x27;: 63.92796682, &#x27;Cu&#x27;: 62.92959772, &#x27;65Cu&#x27;: 64.9277897, &#x27;Zn&#x27;: 63.92914201, &#x27;66Zn&#x27;: 65.92603381, &#x27;67Zn&#x27;: 66.92712775, &#x27;68Zn&#x27;: 67.92484455, &#x27;70Zn&#x27;: 69.9253192, &#x27;Ga&#x27;: 68.9255735, &#x27;71Ga&#x27;: 70.92470258, &#x27;70Ge&#x27;: 69.92424875, &#x27;72Ge&#x27;: 71.922075826, &#x27;73Ge&#x27;: 72.923458956, &#x27;Ge&#x27;: 73.921177761, &#x27;76Ge&#x27;: 75.921402726, &#x27;As&#x27;: 74.92159457, &#x27;74Se&#x27;: 73.922475934, &#x27;76Se&#x27;: 75.919213704, &#x27;77Se&#x27;: 76.919914154, &#x27;78Se&#x27;: 77.91730928, &#x27;Se&#x27;: 79.9165218, &#x27;82Se&#x27;: 81.9166995, &#x27;Br&#x27;: 78.9183376, &#x27;81Br&#x27;: 80.9162897, &#x27;78Kr&#x27;: 77.92036494, &#x27;80Kr&#x27;: 79.91637808, &#x27;82Kr&#x27;: 81.91348273, &#x27;83Kr&#x27;: 82.91412716, &#x27;Kr&#x27;: 83.9114977282, &#x27;86Kr&#x27;: 85.9106106269, &#x27;Rb&#x27;: 84.9117897379, &#x27;87Rb&#x27;: 86.909180531, &#x27;84Sr&#x27;: 83.9134191, &#x27;86Sr&#x27;: 85.9092606, &#x27;87Sr&#x27;: 86.9088775, &#x27;Sr&#x27;: 87.9056125, &#x27;Y&#x27;: 88.9058403, &#x27;Zr&#x27;: 89.9046977, &#x27;91Zr&#x27;: 90.9056396, &#x27;92Zr&#x27;: 91.9050347, &#x27;94Zr&#x27;: 93.9063108, &#x27;96Zr&#x27;: 95.9082714, &#x27;Nb&#x27;: 92.906373, &#x27;92Mo&#x27;: 91.90680796, &#x27;94Mo&#x27;: 93.9050849, &#x27;95Mo&#x27;: 94.90583877, &#x27;96Mo&#x27;: 95.90467612, &#x27;97Mo&#x27;: 96.90601812, &#x27;Mo&#x27;: 97.90540482, &#x27;100Mo&#x27;: 99.9074718, &#x27;Tc&#x27;: 98.9062508, &#x27;96Ru&#x27;: 95.90759025, &#x27;98Ru&#x27;: 97.9052868, &#x27;99Ru&#x27;: 98.9059341, &#x27;100Ru&#x27;: 99.9042143, &#x27;101Ru&#x27;: 100.9055769, &#x27;Ru&#x27;: 101.9043441, &#x27;104Ru&#x27;: 103.9054275, &#x27;Rh&#x27;: 102.905498, &#x27;102Pd&#x27;: 101.9056022, &#x27;104Pd&#x27;: 103.9040305, &#x27;105Pd&#x27;: 104.9050796, &#x27;Pd&#x27;: 105.9034804, &#x27;108Pd&#x27;: 107.9038916, &#x27;110Pd&#x27;: 109.9051722, &#x27;Ag&#x27;: 106.9050916, &#x27;109Ag&#x27;: 108.9047553, &#x27;106Cd&#x27;: 105.9064599, &#x27;108Cd&#x27;: 107.9041834, &#x27;110Cd&#x27;: 109.90300661, &#x27;111Cd&#x27;: 110.90418287, &#x27;Cd&#x27;: 111.90276287, &#x27;113Cd&#x27;: 112.90440813, &#x27;114Cd&#x27;: 113.90336509, &#x27;116Cd&#x27;: 115.90476315, &#x27;113In&#x27;: 112.90406184, &#x27;In&#x27;: 114.903878776, &#x27;112Sn&#x27;: 111.90482387, &#x27;114Sn&#x27;: 113.9027827, &#x27;115Sn&#x27;: 114.903344699, &#x27;116Sn&#x27;: 115.9017428, &#x27;117Sn&#x27;: 116.90295398, &#x27;118Sn&#x27;: 117.90160657, &#x27;119Sn&#x27;: 118.90331117, &#x27;Sn&#x27;: 119.90220163, &#x27;122Sn&#x27;: 121.9034438, &#x27;124Sn&#x27;: 123.9052766, &#x27;Sb&#x27;: 120.903812, &#x27;123Sb&#x27;: 122.9042132, &#x27;120Te&#x27;: 119.9040593, &#x27;122Te&#x27;: 121.9030435, &#x27;123Te&#x27;: 122.9042698, &#x27;124Te&#x27;: 123.9028171, &#x27;125Te&#x27;: 124.9044299, &#x27;126Te&#x27;: 125.9033109, &#x27;128Te&#x27;: 127.90446128, &#x27;Te&#x27;: 129.906222748, &#x27;I&#x27;: 126.9044719, &#x27;124Xe&#x27;: 123.905892, &#x27;126Xe&#x27;: 125.9042983, &#x27;128Xe&#x27;: 127.903531, &#x27;129Xe&#x27;: 128.9047808611, &#x27;130Xe&#x27;: 129.903509349, &#x27;131Xe&#x27;: 130.90508406, &#x27;Xe&#x27;: 131.9041550856, &#x27;134Xe&#x27;: 133.90539466, &#x27;136Xe&#x27;: 135.907214484, &#x27;Cs&#x27;: 132.905451961, &#x27;130Ba&#x27;: 129.9063207, &#x27;132Ba&#x27;: 131.9050611, &#x27;134Ba&#x27;: 133.90450818, &#x27;135Ba&#x27;: 134.90568838, &#x27;136Ba&#x27;: 135.90457573, &#x27;137Ba&#x27;: 136.90582714, &#x27;Ba&#x27;: 137.905247, &#x27;138La&#x27;: 137.9071149, &#x27;La&#x27;: 138.9063563, &#x27;136Ce&#x27;: 135.90712921, &#x27;138Ce&#x27;: 137.905991, &#x27;Ce&#x27;: 139.9054431, &#x27;142Ce&#x27;: 141.9092504, &#x27;Pr&#x27;: 140.9076576, &#x27;Nd&#x27;: 141.907729, &#x27;143Nd&#x27;: 142.90982, &#x27;144Nd&#x27;: 143.910093, &#x27;145Nd&#x27;: 144.9125793, &#x27;146Nd&#x27;: 145.9131226, &#x27;148Nd&#x27;: 147.9168993, &#x27;150Nd&#x27;: 149.9209022, &#x27;145Pm&#x27;: 144.9127559, &#x27;147Pm&#x27;: 146.915145, &#x27;144Sm&#x27;: 143.9120065, &#x27;147Sm&#x27;: 146.9149044, &#x27;148Sm&#x27;: 147.9148292, &#x27;149Sm&#x27;: 148.9171921, &#x27;150Sm&#x27;: 149.9172829, &#x27;Sm&#x27;: 151.9197397, &#x27;154Sm&#x27;: 153.9222169, &#x27;151Eu&#x27;: 150.9198578, &#x27;Eu&#x27;: 152.921238, &#x27;152Gd&#x27;: 151.9197995, &#x27;154Gd&#x27;: 153.9208741, &#x27;155Gd&#x27;: 154.9226305, &#x27;156Gd&#x27;: 155.9221312, &#x27;157Gd&#x27;: 156.9239686, &#x27;Gd&#x27;: 157.9241123, &#x27;160Gd&#x27;: 159.9270624, &#x27;Tb&#x27;: 158.9253547, &#x27;156Dy&#x27;: 155.9242847, &#x27;158Dy&#x27;: 157.9244159, &#x27;160Dy&#x27;: 159.9252046, &#x27;161Dy&#x27;: 160.9269405, &#x27;162Dy&#x27;: 161.9268056, &#x27;163Dy&#x27;: 162.9287383, &#x27;Dy&#x27;: 163.9291819, &#x27;Ho&#x27;: 164.9303288, &#x27;162Er&#x27;: 161.9287884, &#x27;164Er&#x27;: 163.9292088, &#x27;Er&#x27;: 165.9302995, &#x27;167Er&#x27;: 166.9320546, &#x27;168Er&#x27;: 167.9323767, &#x27;170Er&#x27;: 169.9354702, &#x27;Tm&#x27;: 168.9342179, &#x27;168Yb&#x27;: 167.9338896, &#x27;170Yb&#x27;: 169.9347664, &#x27;171Yb&#x27;: 170.9363302, &#x27;172Yb&#x27;: 171.9363859, &#x27;173Yb&#x27;: 172.9382151, &#x27;Yb&#x27;: 173.9388664, &#x27;176Yb&#x27;: 175.9425764, &#x27;Lu&#x27;: 174.9407752, &#x27;176Lu&#x27;: 175.9426897, &#x27;174Hf&#x27;: 173.9400461, &#x27;176Hf&#x27;: 175.9414076, &#x27;177Hf&#x27;: 176.9432277, &#x27;178Hf&#x27;: 177.9437058, &#x27;179Hf&#x27;: 178.9458232, &#x27;Hf&#x27;: 179.946557, &#x27;180Ta&#x27;: 179.9474648, &#x27;Ta&#x27;: 180.9479958, &#x27;180W&#x27;: 179.9467108, &#x27;182W&#x27;: 181.94820394, &#x27;183W&#x27;: 182.95022275, &#x27;W&#x27;: 183.95093092, &#x27;186W&#x27;: 185.9543628, &#x27;185Re&#x27;: 184.9529545, &#x27;Re&#x27;: 186.9557501, &#x27;184Os&#x27;: 183.9524885, &#x27;186Os&#x27;: 185.953835, &#x27;187Os&#x27;: 186.9557474, &#x27;188Os&#x27;: 187.9558352, &#x27;189Os&#x27;: 188.9581442, &#x27;190Os&#x27;: 189.9584437, &#x27;192Os&#x27;: 191.961477, &#x27;191Ir&#x27;: 190.9605893, &#x27;Ir&#x27;: 192.9629216, &#x27;190Pt&#x27;: 189.9599297, &#x27;192Pt&#x27;: 191.9610387, &#x27;194Pt&#x27;: 193.9626809, &#x27;Pt&#x27;: 194.9647917, &#x27;196Pt&#x27;: 195.96495209, &#x27;198Pt&#x27;: 197.9678949, &#x27;Au&#x27;: 196.96656879, &#x27;196Hg&#x27;: 195.9658326, &#x27;198Hg&#x27;: 197.9667686, &#x27;199Hg&#x27;: 198.96828064, &#x27;200Hg&#x27;: 199.96832659, &#x27;201Hg&#x27;: 200.97030284, &#x27;Hg&#x27;: 201.9706434, &#x27;204Hg&#x27;: 203.97349398, &#x27;203Tl&#x27;: 202.9723446, &#x27;Tl&#x27;: 204.9744278, &#x27;204Pb&#x27;: 203.973044, &#x27;206Pb&#x27;: 205.9744657, &#x27;207Pb&#x27;: 206.9758973, &#x27;Pb&#x27;: 207.9766525, &#x27;Bi&#x27;: 208.9803991, &#x27;209Po&#x27;: 208.9824308, &#x27;210Po&#x27;: 209.9828741, &#x27;210At&#x27;: 209.9871479, &#x27;211At&#x27;: 210.9874966, &#x27;211Rn&#x27;: 210.9906011, &#x27;220Rn&#x27;: 220.0113941, &#x27;222Rn&#x27;: 222.0175782, &#x27;223Fr&#x27;: 223.019736, &#x27;223Ra&#x27;: 223.0185023, &#x27;224Ra&#x27;: 224.020212, &#x27;226Ra&#x27;: 226.0254103, &#x27;228Ra&#x27;: 228.0310707, &#x27;227Ac&#x27;: 227.0277523, &#x27;230Th&#x27;: 230.0331341, &#x27;Th&#x27;: 232.0380558, &#x27;Pa&#x27;: 231.0358842, &#x27;233U&#x27;: 233.0396355, &#x27;234U&#x27;: 234.0409523, &#x27;235U&#x27;: 235.0439301, &#x27;236U&#x27;: 236.0455682, &#x27;U&#x27;: 238.0507884, &#x27;236Np&#x27;: 236.04657, &#x27;237Np&#x27;: 237.0481736, &#x27;238Pu&#x27;: 238.0495601, &#x27;239Pu&#x27;: 239.0521636, &#x27;240Pu&#x27;: 240.0538138, &#x27;241Pu&#x27;: 241.0568517, &#x27;242Pu&#x27;: 242.0587428, &#x27;244Pu&#x27;: 244.0642053, &#x27;241Am&#x27;: 241.0568293, &#x27;243Am&#x27;: 243.0613813, &#x27;243Cm&#x27;: 243.0613893, &#x27;244Cm&#x27;: 244.0627528, &#x27;245Cm&#x27;: 245.0654915, &#x27;246Cm&#x27;: 246.0672238, &#x27;247Cm&#x27;: 247.0703541, &#x27;248Cm&#x27;: 248.0723499, &#x27;247Bk&#x27;: 247.0703073, &#x27;249Bk&#x27;: 249.0749877, &#x27;249Cf&#x27;: 249.0748539, &#x27;250Cf&#x27;: 250.0764062, &#x27;251Cf&#x27;: 251.0795886, &#x27;252Cf&#x27;: 252.0816272, &#x27;252Es&#x27;: 252.08298, &#x27;257Fm&#x27;: 257.0951061, &#x27;258Md&#x27;: 258.0984315, &#x27;260Md&#x27;: 260.10365, &#x27;259No&#x27;: 259.10103, &#x27;262Lr&#x27;: 262.10961, &#x27;267Rf&#x27;: 267.12179, &#x27;268Db&#x27;: 268.12567, &#x27;271Sg&#x27;: 271.13393, &#x27;272Bh&#x27;: 272.13826, &#x27;270Hs&#x27;: 270.13429, &#x27;276Mt&#x27;: 276.15159, &#x27;281Ds&#x27;: 281.16451, &#x27;280Rg&#x27;: 280.16514, &#x27;285Cn&#x27;: 285.17712, &#x27;284Nh&#x27;: 284.17873, &#x27;289Fl&#x27;: 289.19042, &#x27;288Mc&#x27;: 288.19274, &#x27;293Lv&#x27;: 293.20449, &#x27;292Ts&#x27;: 292.20746, &#x27;294Og&#x27;: 294.21392}"}, {"fullname": "corems.encapsulation.constant.Atoms.atoms_order", "modulename": "corems.encapsulation.constant", "qualname": "Atoms.atoms_order", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;C&#x27;, &#x27;H&#x27;, &#x27;O&#x27;, &#x27;N&#x27;, &#x27;P&#x27;, &#x27;S&#x27;, &#x27;F&#x27;, &#x27;Cl&#x27;, &#x27;Br&#x27;, &#x27;I&#x27;, &#x27;At&#x27;, &#x27;Li&#x27;, &#x27;Na&#x27;, &#x27;K&#x27;, &#x27;Rb&#x27;, &#x27;Cs&#x27;, &#x27;Fr&#x27;, &#x27;He&#x27;, &#x27;Ne&#x27;, &#x27;Ar&#x27;, &#x27;Kr&#x27;, &#x27;Xe&#x27;, &#x27;Rn&#x27;, &#x27;Be&#x27;, &#x27;B&#x27;, &#x27;Mg&#x27;, &#x27;Al&#x27;, &#x27;Si&#x27;, &#x27;Ca&#x27;, &#x27;Sc&#x27;, &#x27;Ti&#x27;, &#x27;V&#x27;, &#x27;Cr&#x27;, &#x27;Mn&#x27;, &#x27;Fe&#x27;, &#x27;Co&#x27;, &#x27;Ni&#x27;, &#x27;Cu&#x27;, &#x27;Zn&#x27;, &#x27;Ga&#x27;, &#x27;Ge&#x27;, &#x27;As&#x27;, &#x27;Se&#x27;, &#x27;Sr&#x27;, &#x27;Y&#x27;, &#x27;Zr&#x27;, &#x27;Nb&#x27;, &#x27;Mo&#x27;, &#x27;Tc&#x27;, &#x27;Ru&#x27;, &#x27;Rh&#x27;, &#x27;Pd&#x27;, &#x27;Ag&#x27;, &#x27;Cd&#x27;, &#x27;In&#x27;, &#x27;Sn&#x27;, &#x27;Sb&#x27;, &#x27;Te&#x27;, &#x27;Ba&#x27;, &#x27;La&#x27;, &#x27;Hf&#x27;, &#x27;Ta&#x27;, &#x27;W&#x27;, &#x27;Re&#x27;, &#x27;Os&#x27;, &#x27;Ir&#x27;, &#x27;Pt&#x27;, &#x27;Au&#x27;, &#x27;Hg&#x27;, &#x27;Tl&#x27;, &#x27;Pb&#x27;, &#x27;Bi&#x27;, &#x27;Po&#x27;, &#x27;Ra&#x27;, &#x27;Ac&#x27;, &#x27;Rf&#x27;, &#x27;Db&#x27;, &#x27;Sg&#x27;, &#x27;Bh&#x27;, &#x27;Hs&#x27;, &#x27;Mt&#x27;, &#x27;Ds&#x27;, &#x27;Rg&#x27;, &#x27;Cn&#x27;, &#x27;Nh&#x27;, &#x27;Fl&#x27;, &#x27;Mc&#x27;, &#x27;Lv&#x27;, &#x27;Ts&#x27;, &#x27;Og&#x27;, &#x27;Ce&#x27;, &#x27;Pr&#x27;, &#x27;Nd&#x27;, &#x27;Pm&#x27;, &#x27;Sm&#x27;, &#x27;Eu&#x27;, &#x27;Gd&#x27;, &#x27;Tb&#x27;, &#x27;Dy&#x27;, &#x27;Ho&#x27;, &#x27;Er&#x27;, &#x27;Tm&#x27;, &#x27;Yb&#x27;, &#x27;Lu&#x27;, &#x27;Th&#x27;, &#x27;Pa&#x27;, &#x27;U&#x27;, &#x27;Np&#x27;, &#x27;Pu&#x27;, &#x27;Am&#x27;, &#x27;Cm&#x27;, &#x27;Bk&#x27;, &#x27;Cf&#x27;, &#x27;Es&#x27;, &#x27;Fm&#x27;, &#x27;Md&#x27;, &#x27;No&#x27;, &#x27;Lr&#x27;, &#x27;D&#x27;, &#x27;6Li&#x27;, &#x27;10B&#x27;, &#x27;13C&#x27;, &#x27;15N&#x27;, &#x27;17O&#x27;, &#x27;18O&#x27;, &#x27;22Ne&#x27;, &#x27;25Mg&#x27;, &#x27;26Mg&#x27;, &#x27;29Si&#x27;, &#x27;30Si&#x27;, &#x27;33S&#x27;, &#x27;34S&#x27;, &#x27;36S&#x27;, &#x27;37Cl&#x27;, &#x27;40Ca&#x27;, &#x27;41K&#x27;, &#x27;44Ca&#x27;, &#x27;46Ti&#x27;, &#x27;47Ti&#x27;, &#x27;49Ti&#x27;, &#x27;50Cr&#x27;, &#x27;50Ti&#x27;, &#x27;50V&#x27;, &#x27;53Cr&#x27;, &#x27;54Cr&#x27;, &#x27;54Fe&#x27;, &#x27;57Fe&#x27;, &#x27;58Fe&#x27;, &#x27;60Ni&#x27;, &#x27;61Ni&#x27;, &#x27;62Ni&#x27;, &#x27;65Cu&#x27;, &#x27;66Zn&#x27;, &#x27;67Zn&#x27;, &#x27;68Zn&#x27;, &#x27;70Ge&#x27;, &#x27;71Ga&#x27;, &#x27;72Ge&#x27;, &#x27;73Ge&#x27;, &#x27;76Ge&#x27;, &#x27;76Se&#x27;, &#x27;77Se&#x27;, &#x27;78Se&#x27;, &#x27;81Br&#x27;, &#x27;80Kr&#x27;, &#x27;82Kr&#x27;, &#x27;82Se&#x27;, &#x27;83Kr&#x27;, &#x27;85Rb&#x27;, &#x27;86Kr&#x27;, &#x27;86Sr&#x27;, &#x27;87Rb&#x27;, &#x27;87Sr&#x27;, &#x27;88Sr&#x27;, &#x27;91Zr&#x27;, &#x27;92Mo&#x27;, &#x27;92Zr&#x27;, &#x27;94Mo&#x27;, &#x27;94Zr&#x27;, &#x27;95Mo&#x27;, &#x27;96Mo&#x27;, &#x27;96Ru&#x27;, &#x27;96Zr&#x27;, &#x27;97Mo&#x27;, &#x27;98Ru&#x27;, &#x27;99Ru&#x27;, &#x27;100Mo&#x27;, &#x27;100Ru&#x27;, &#x27;101Ru&#x27;, &#x27;102Pd&#x27;, &#x27;104Pd&#x27;, &#x27;104Ru&#x27;, &#x27;105Pd&#x27;, &#x27;106Cd&#x27;, &#x27;106Pd&#x27;, &#x27;108Cd&#x27;, &#x27;108Pd&#x27;, &#x27;109Ag&#x27;, &#x27;110Cd&#x27;, &#x27;110Pd&#x27;, &#x27;111Cd&#x27;, &#x27;112Cd&#x27;, &#x27;112Sn&#x27;, &#x27;113Cd&#x27;, &#x27;113In&#x27;, &#x27;114Cd&#x27;, &#x27;114Sn&#x27;, &#x27;115In&#x27;, &#x27;115Sn&#x27;, &#x27;116Cd&#x27;, &#x27;116Sn&#x27;, &#x27;117Sn&#x27;, &#x27;118Sn&#x27;, &#x27;119Sn&#x27;, &#x27;120Sn&#x27;, &#x27;120Te&#x27;, &#x27;121Sb&#x27;, &#x27;122Sn&#x27;, &#x27;122Te&#x27;, &#x27;123Sb&#x27;, &#x27;123Te&#x27;, &#x27;124Sn&#x27;, &#x27;124Te&#x27;, &#x27;124Xe&#x27;, &#x27;125Te&#x27;, &#x27;126Te&#x27;, &#x27;126Xe&#x27;, &#x27;128Te&#x27;, &#x27;128Xe&#x27;, &#x27;129Xe&#x27;, &#x27;130Ba&#x27;, &#x27;130Te&#x27;, &#x27;130Xe&#x27;, &#x27;131Xe&#x27;, &#x27;132Ba&#x27;, &#x27;132Xe&#x27;, &#x27;134Ba&#x27;, &#x27;134Xe&#x27;, &#x27;135Ba&#x27;, &#x27;136Ba&#x27;, &#x27;136Xe&#x27;, &#x27;137Ba&#x27;, &#x27;138Ba&#x27;, &#x27;174Hf&#x27;, &#x27;176Hf&#x27;, &#x27;177Hf&#x27;, &#x27;178Hf&#x27;, &#x27;179Hf&#x27;, &#x27;180Hf&#x27;, &#x27;180W&#x27;, &#x27;182W&#x27;, &#x27;183W&#x27;, &#x27;184Os&#x27;, &#x27;184W&#x27;, &#x27;185Re&#x27;, &#x27;186Os&#x27;, &#x27;186W&#x27;, &#x27;187Os&#x27;, &#x27;187Re&#x27;, &#x27;188Os&#x27;, &#x27;189Os&#x27;, &#x27;190Os&#x27;, &#x27;190Pt&#x27;, &#x27;191Ir&#x27;, &#x27;192Ir&#x27;, &#x27;192Os&#x27;, &#x27;192Pt&#x27;, &#x27;194Pt&#x27;, &#x27;195Pt&#x27;, &#x27;196Hg&#x27;, &#x27;196Pt&#x27;, &#x27;198Hg&#x27;, &#x27;198Pt&#x27;, &#x27;199Hg&#x27;, &#x27;200Hg&#x27;, &#x27;201Hg&#x27;, &#x27;202Hg&#x27;, &#x27;203Tl&#x27;, &#x27;204Hg&#x27;, &#x27;204Pb&#x27;, &#x27;205Tl&#x27;, &#x27;206Pb&#x27;, &#x27;207Pb&#x27;, &#x27;208Pb&#x27;]"}, {"fullname": "corems.encapsulation.constant.Atoms.atoms_covalence", "modulename": "corems.encapsulation.constant", "qualname": "Atoms.atoms_covalence", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;C&#x27;: 4, &#x27;13C&#x27;: 4, &#x27;N&#x27;: 3, &#x27;O&#x27;: 2, &#x27;S&#x27;: 2, &#x27;H&#x27;: 1, &#x27;F&#x27;: (1, 0), &#x27;Cl&#x27;: (1, 0), &#x27;Br&#x27;: (1, 0), &#x27;I&#x27;: (1, 0), &#x27;At&#x27;: 1, &#x27;Li&#x27;: (1, 0), &#x27;Na&#x27;: (1, 0), &#x27;K&#x27;: (1, 0), &#x27;Rb&#x27;: 1, &#x27;Cs&#x27;: 1, &#x27;Fr&#x27;: 1, &#x27;B&#x27;: (4, 3, 2, 1), &#x27;In&#x27;: (3, 2, 1), &#x27;Al&#x27;: (3, 1, 2), &#x27;P&#x27;: (3, 5, 4, 2, 1), &#x27;Ga&#x27;: (3, 1, 2), &#x27;Mg&#x27;: (2, 1), &#x27;Be&#x27;: (2, 1), &#x27;Ca&#x27;: (2, 1), &#x27;Sr&#x27;: (2, 1), &#x27;Ba&#x27;: 2, &#x27;Ra&#x27;: 2, &#x27;V&#x27;: (5, 4, 3, 2, 1), &#x27;Fe&#x27;: (3, 2, 4, 5, 6), &#x27;Si&#x27;: (4, 3, 2), &#x27;Sc&#x27;: (3, 2, 1), &#x27;Ti&#x27;: (4, 3, 2, 1), &#x27;Cr&#x27;: (1, 2, 3, 4, 5, 6), &#x27;Mn&#x27;: (1, 2, 3, 4, 5, 6, 7), &#x27;Co&#x27;: (1, 2, 3, 4, 5), &#x27;Ni&#x27;: (1, 2, 3, 4), &#x27;Cu&#x27;: (2, 1, 3, 4), &#x27;Zn&#x27;: (2, 1), &#x27;Ge&#x27;: (4, 3, 2, 1), &#x27;As&#x27;: (5, 3, 2, 1), &#x27;Se&#x27;: (6, 4, 2, 1), &#x27;Y&#x27;: (3, 2, 1), &#x27;Zr&#x27;: (4, 3, 2, 1), &#x27;Nb&#x27;: (5, 4, 3, 2, 1), &#x27;Mo&#x27;: (6, 5, 4, 3, 2, 1), &#x27;Tc&#x27;: (7, 6, 5, 4, 3, 2, 1), &#x27;Ru&#x27;: (8, 7, 6, 5, 4, 3, 2, 1), &#x27;Rh&#x27;: (6, 5, 4, 3, 2, 1), &#x27;Pd&#x27;: (4, 2, 1), &#x27;Ag&#x27;: (0, 1, 2, 3, 4), &#x27;Cd&#x27;: (2, 1), &#x27;Sn&#x27;: (4, 2), &#x27;Sb&#x27;: (5, 3), &#x27;Te&#x27;: (6, 5, 4, 2), &#x27;La&#x27;: (3, 2), &#x27;Hf&#x27;: (4, 3, 2), &#x27;Ta&#x27;: (5, 4, 3, 2), &#x27;W&#x27;: (6, 5, 4, 3, 2, 1), &#x27;Re&#x27;: (4, 7, 6, 5, 3, 2, 1), &#x27;Os&#x27;: (4, 8, 7, 6, 5, 3, 2, 1), &#x27;Ir&#x27;: (4, 8, 6, 5, 3, 2, 1), &#x27;Pt&#x27;: (4, 6, 5, 3, 2, 1), &#x27;Au&#x27;: (3, 5, 2, 1), &#x27;Hg&#x27;: (1, 2, 4), &#x27;Tl&#x27;: (3, 1), &#x27;Pb&#x27;: (4, 2), &#x27;Bi&#x27;: (3, 1, 5), &#x27;Po&#x27;: (2, 4, 6), &#x27;Ac&#x27;: (3, 2)}"}, {"fullname": "corems.encapsulation.constant.Atoms.isotopic_abundance", "modulename": "corems.encapsulation.constant", "qualname": "Atoms.isotopic_abundance", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;H&#x27;: 0.999885, &#x27;D&#x27;: 0.000115, &#x27;T&#x27;: 0, &#x27;3He&#x27;: 1.34e-06, &#x27;He&#x27;: 0.99999866, &#x27;6Li&#x27;: 0.0759, &#x27;Li&#x27;: 0.9241, &#x27;Be&#x27;: 1.0, &#x27;10B&#x27;: 0.199, &#x27;B&#x27;: 0.801, &#x27;C&#x27;: 0.9893, &#x27;13C&#x27;: 0.0107, &#x27;14C&#x27;: 0, &#x27;N&#x27;: 0.99636, &#x27;15N&#x27;: 0.00364, &#x27;O&#x27;: 0.99757, &#x27;17O&#x27;: 0.00038, &#x27;18O&#x27;: 0.00205, &#x27;F&#x27;: 1.0, &#x27;Ne&#x27;: 0.9048, &#x27;21Ne&#x27;: 0.0027, &#x27;22Ne&#x27;: 0.0925, &#x27;Na&#x27;: 1.0, &#x27;Mg&#x27;: 0.7899, &#x27;25Mg&#x27;: 0.1, &#x27;26Mg&#x27;: 0.1101, &#x27;Al&#x27;: 1.0, &#x27;Si&#x27;: 0.92223, &#x27;29Si&#x27;: 0.04685, &#x27;30Si&#x27;: 0.03092, &#x27;P&#x27;: 1.0, &#x27;S&#x27;: 0.9499, &#x27;33S&#x27;: 0.0075, &#x27;34S&#x27;: 0.0425, &#x27;36S&#x27;: 0.0001, &#x27;Cl&#x27;: 0.7576, &#x27;37Cl&#x27;: 0.2424, &#x27;36Ar&#x27;: 0.003336, &#x27;38Ar&#x27;: 0.000629, &#x27;Ar&#x27;: 0.996035, &#x27;K&#x27;: 0.932581, &#x27;40K&#x27;: 0.000117, &#x27;41K&#x27;: 0.067302, &#x27;Ca&#x27;: 0.96941, &#x27;42Ca&#x27;: 0.00647, &#x27;43Ca&#x27;: 0.00135, &#x27;44Ca&#x27;: 0.02086, &#x27;46Ca&#x27;: 4e-05, &#x27;48Ca&#x27;: 0.001872, &#x27;Sc&#x27;: 1.0, &#x27;46Ti&#x27;: 0.0825, &#x27;47Ti&#x27;: 0.0744, &#x27;Ti&#x27;: 0.7372, &#x27;49Ti&#x27;: 0.0541, &#x27;50Ti&#x27;: 0.0518, &#x27;50V&#x27;: 0.0025, &#x27;V&#x27;: 0.9975, &#x27;50Cr&#x27;: 0.04345, &#x27;Cr&#x27;: 0.83789, &#x27;53Cr&#x27;: 0.09501, &#x27;54Cr&#x27;: 0.02365, &#x27;Mn&#x27;: 1.0, &#x27;54Fe&#x27;: 0.05845, &#x27;Fe&#x27;: 0.91754, &#x27;57Fe&#x27;: 0.02119, &#x27;58Fe&#x27;: 0.00282, &#x27;Co&#x27;: 1.0, &#x27;Ni&#x27;: 0.68077, &#x27;60Ni&#x27;: 0.26223, &#x27;61Ni&#x27;: 0.011399, &#x27;62Ni&#x27;: 0.036346, &#x27;64Ni&#x27;: 0.009255, &#x27;Cu&#x27;: 0.6915, &#x27;65Cu&#x27;: 0.3085, &#x27;Zn&#x27;: 0.4917, &#x27;66Zn&#x27;: 0.2773, &#x27;67Zn&#x27;: 0.0404, &#x27;68Zn&#x27;: 0.1845, &#x27;70Zn&#x27;: 0.0061, &#x27;Ga&#x27;: 0.60108, &#x27;71Ga&#x27;: 0.39892, &#x27;70Ge&#x27;: 0.2057, &#x27;72Ge&#x27;: 0.2745, &#x27;73Ge&#x27;: 0.0775, &#x27;Ge&#x27;: 0.365, &#x27;76Ge&#x27;: 0.0773, &#x27;As&#x27;: 1.0, &#x27;74Se&#x27;: 0.0089, &#x27;76Se&#x27;: 0.0937, &#x27;77Se&#x27;: 0.0763, &#x27;78Se&#x27;: 0.2377, &#x27;Se&#x27;: 0.4961, &#x27;82Se&#x27;: 0.0873, &#x27;Br&#x27;: 0.5069, &#x27;81Br&#x27;: 0.4931, &#x27;78Kr&#x27;: 0.00355, &#x27;80Kr&#x27;: 0.02286, &#x27;82Kr&#x27;: 0.11593, &#x27;83Kr&#x27;: 0.115, &#x27;Kr&#x27;: 0.56987, &#x27;86Kr&#x27;: 0.17279, &#x27;Rb&#x27;: 0.7217, &#x27;87Rb&#x27;: 0.2783, &#x27;84Sr&#x27;: 0.0056, &#x27;86Sr&#x27;: 0.0986, &#x27;87Sr&#x27;: 0.07, &#x27;Sr&#x27;: 0.8258, &#x27;Y&#x27;: 1.0, &#x27;Zr&#x27;: 0.5145, &#x27;91Zr&#x27;: 0.1122, &#x27;92Zr&#x27;: 0.1715, &#x27;94Zr&#x27;: 0.1738, &#x27;96Zr&#x27;: 0.028, &#x27;Nb&#x27;: 1.0, &#x27;92Mo&#x27;: 0.1453, &#x27;94Mo&#x27;: 0.0915, &#x27;95Mo&#x27;: 0.1584, &#x27;96Mo&#x27;: 0.1667, &#x27;97Mo&#x27;: 0.096, &#x27;Mo&#x27;: 0.2439, &#x27;100Mo&#x27;: 0.0982, &#x27;99Tc&#x27;: 0, &#x27;96Ru&#x27;: 0.0554, &#x27;98Ru&#x27;: 0.0187, &#x27;99Ru&#x27;: 0.1276, &#x27;100Ru&#x27;: 0.126, &#x27;101Ru&#x27;: 0.1706, &#x27;Ru&#x27;: 0.3155, &#x27;104Ru&#x27;: 0.1862, &#x27;Rh&#x27;: 1.0, &#x27;102Pd&#x27;: 0.0102, &#x27;104Pd&#x27;: 0.1114, &#x27;105Pd&#x27;: 0.2233, &#x27;Pd&#x27;: 0.2733, &#x27;108Pd&#x27;: 0.2646, &#x27;110Pd&#x27;: 0.1172, &#x27;Ag&#x27;: 0.51839, &#x27;109Ag&#x27;: 0.48161, &#x27;106Cd&#x27;: 0.0125, &#x27;108Cd&#x27;: 0.0089, &#x27;110Cd&#x27;: 0.1249, &#x27;111Cd&#x27;: 0.128, &#x27;Cd&#x27;: 0.2413, &#x27;113Cd&#x27;: 0.1222, &#x27;114Cd&#x27;: 0.2873, &#x27;116Cd&#x27;: 0.0749, &#x27;113In&#x27;: 0.0429, &#x27;In&#x27;: 0.9571, &#x27;112Sn&#x27;: 0.0097, &#x27;114Sn&#x27;: 0.0066, &#x27;115Sn&#x27;: 0.0034, &#x27;116Sn&#x27;: 0.1454, &#x27;117Sn&#x27;: 0.0768, &#x27;118Sn&#x27;: 0.2422, &#x27;119Sn&#x27;: 0.0859, &#x27;Sn&#x27;: 0.3258, &#x27;122Sn&#x27;: 0.0463, &#x27;124Sn&#x27;: 0.0579, &#x27;Sb&#x27;: 0.5721, &#x27;123Sb&#x27;: 0.4279, &#x27;120Te&#x27;: 0.0009, &#x27;122Te&#x27;: 0.0255, &#x27;123Te&#x27;: 0.0089, &#x27;124Te&#x27;: 0.0474, &#x27;125Te&#x27;: 0.0707, &#x27;126Te&#x27;: 0.1884, &#x27;128Te&#x27;: 0.3174, &#x27;Te&#x27;: 0.3408, &#x27;I&#x27;: 1.0, &#x27;124Xe&#x27;: 0.000952, &#x27;126Xe&#x27;: 0.00089, &#x27;128Xe&#x27;: 0.019102, &#x27;129Xe&#x27;: 0.264006, &#x27;130Xe&#x27;: 0.04071, &#x27;131Xe&#x27;: 0.212324, &#x27;Xe&#x27;: 0.269086, &#x27;134Xe&#x27;: 0.104357, &#x27;136Xe&#x27;: 0.088573, &#x27;Cs&#x27;: 1.0, &#x27;130Ba&#x27;: 0.00106, &#x27;132Ba&#x27;: 0.00101, &#x27;134Ba&#x27;: 0.02417, &#x27;135Ba&#x27;: 0.06592, &#x27;136Ba&#x27;: 0.07854, &#x27;137Ba&#x27;: 0.11232, &#x27;Ba&#x27;: 0.71698, &#x27;138La&#x27;: 0.0008881, &#x27;La&#x27;: 0.9991119, &#x27;136Ce&#x27;: 0.00185, &#x27;138Ce&#x27;: 0.00251, &#x27;Ce&#x27;: 0.8845, &#x27;142Ce&#x27;: 0.11114, &#x27;Pr&#x27;: 1.0, &#x27;Nd&#x27;: 0.27152, &#x27;143Nd&#x27;: 0.12174, &#x27;144Nd&#x27;: 0.23798, &#x27;145Nd&#x27;: 0.08293, &#x27;146Nd&#x27;: 0.17189, &#x27;148Nd&#x27;: 0.05756, &#x27;150Nd&#x27;: 0.05638, &#x27;145Pm&#x27;: 0, &#x27;147Pm&#x27;: 0, &#x27;144Sm&#x27;: 0.0307, &#x27;147Sm&#x27;: 0.1499, &#x27;148Sm&#x27;: 0.1124, &#x27;149Sm&#x27;: 0.1382, &#x27;150Sm&#x27;: 0.0738, &#x27;Sm&#x27;: 0.2675, &#x27;154Sm&#x27;: 0.2275, &#x27;151Eu&#x27;: 0.4781, &#x27;Eu&#x27;: 0.5219, &#x27;152Gd&#x27;: 0.002, &#x27;154Gd&#x27;: 0.0218, &#x27;155Gd&#x27;: 0.148, &#x27;156Gd&#x27;: 0.2047, &#x27;157Gd&#x27;: 0.1565, &#x27;Gd&#x27;: 0.2484, &#x27;160Gd&#x27;: 0.2186, &#x27;Tb&#x27;: 1.0, &#x27;156Dy&#x27;: 0.00056, &#x27;158Dy&#x27;: 0.00095, &#x27;160Dy&#x27;: 0.02329, &#x27;161Dy&#x27;: 0.18889, &#x27;162Dy&#x27;: 0.25475, &#x27;163Dy&#x27;: 0.24896, &#x27;Dy&#x27;: 0.2826, &#x27;Ho&#x27;: 1.0, &#x27;162Er&#x27;: 0.00139, &#x27;164Er&#x27;: 0.01601, &#x27;Er&#x27;: 0.33503, &#x27;167Er&#x27;: 0.22869, &#x27;168Er&#x27;: 0.26978, &#x27;170Er&#x27;: 0.1491, &#x27;Tm&#x27;: 1.0, &#x27;168Yb&#x27;: 0.00123, &#x27;170Yb&#x27;: 0.02982, &#x27;171Yb&#x27;: 0.1409, &#x27;172Yb&#x27;: 0.2168, &#x27;173Yb&#x27;: 0.16103, &#x27;Yb&#x27;: 0.32026, &#x27;176Yb&#x27;: 0.12996, &#x27;Lu&#x27;: 0.97401, &#x27;176Lu&#x27;: 0.02599, &#x27;174Hf&#x27;: 0.0016, &#x27;176Hf&#x27;: 0.0526, &#x27;177Hf&#x27;: 0.186, &#x27;178Hf&#x27;: 0.2728, &#x27;179Hf&#x27;: 0.1362, &#x27;Hf&#x27;: 0.3508, &#x27;180Ta&#x27;: 0.0001201, &#x27;Ta&#x27;: 0.9998799, &#x27;180W&#x27;: 0.0012, &#x27;182W&#x27;: 0.265, &#x27;183W&#x27;: 0.1431, &#x27;W&#x27;: 0.3064, &#x27;186W&#x27;: 0.2843, &#x27;185Re&#x27;: 0.374, &#x27;Re&#x27;: 0.626, &#x27;184Os&#x27;: 0.0002, &#x27;186Os&#x27;: 0.0159, &#x27;187Os&#x27;: 0.0196, &#x27;188Os&#x27;: 0.1324, &#x27;189Os&#x27;: 0.1615, &#x27;190Os&#x27;: 0.2626, &#x27;Os&#x27;: 0.4078, &#x27;191Ir&#x27;: 0.373, &#x27;Ir&#x27;: 0.627, &#x27;190Pt&#x27;: 0.00012, &#x27;192Pt&#x27;: 0.00782, &#x27;194Pt&#x27;: 0.3286, &#x27;Pt&#x27;: 0.3378, &#x27;196Pt&#x27;: 0.2521, &#x27;198Pt&#x27;: 0.07356, &#x27;Au&#x27;: 1.0, &#x27;196Hg&#x27;: 0.0015, &#x27;198Hg&#x27;: 0.0997, &#x27;199Hg&#x27;: 0.16872, &#x27;200Hg&#x27;: 0.231, &#x27;201Hg&#x27;: 0.1318, &#x27;Hg&#x27;: 0.2986, &#x27;204Hg&#x27;: 0.0687, &#x27;203Tl&#x27;: 0.2952, &#x27;Tl&#x27;: 0.7048, &#x27;204Pb&#x27;: 0.014, &#x27;206Pb&#x27;: 0.241, &#x27;207Pb&#x27;: 0.221, &#x27;Pb&#x27;: 0.524, &#x27;Bi&#x27;: 1.0, &#x27;209Po&#x27;: 0, &#x27;210Po&#x27;: 0, &#x27;210At&#x27;: 0, &#x27;211At&#x27;: 0, &#x27;211Rn&#x27;: 0, &#x27;220Rn&#x27;: 0, &#x27;222Rn&#x27;: 0, &#x27;223Fr&#x27;: 0, &#x27;223Ra&#x27;: 0, &#x27;224Ra&#x27;: 0, &#x27;226Ra&#x27;: 0, &#x27;228Ra&#x27;: 0, &#x27;227Ac&#x27;: 0, &#x27;230Th&#x27;: 0, &#x27;Th&#x27;: 1.0, &#x27;Pa&#x27;: 1.0, &#x27;233U&#x27;: 0, &#x27;234U&#x27;: 5.4e-05, &#x27;235U&#x27;: 0.007204, &#x27;236U&#x27;: 0, &#x27;U&#x27;: 0.992742, &#x27;236Np&#x27;: 0, &#x27;237Np&#x27;: 0, &#x27;238Pu&#x27;: 0, &#x27;239Pu&#x27;: 0, &#x27;240Pu&#x27;: 0, &#x27;241Pu&#x27;: 0, &#x27;242Pu&#x27;: 0, &#x27;244Pu&#x27;: 0, &#x27;241Am&#x27;: 0, &#x27;243Am&#x27;: 0, &#x27;243Cm&#x27;: 0, &#x27;244Cm&#x27;: 0, &#x27;245Cm&#x27;: 0, &#x27;246Cm&#x27;: 0, &#x27;247Cm&#x27;: 0, &#x27;248Cm&#x27;: 0, &#x27;247Bk&#x27;: 0, &#x27;249Bk&#x27;: 0, &#x27;249Cf&#x27;: 0, &#x27;250Cf&#x27;: 0, &#x27;251Cf&#x27;: 0, &#x27;252Cf&#x27;: 0, &#x27;252Es&#x27;: 0, &#x27;257Fm&#x27;: 0, &#x27;258Md&#x27;: 0, &#x27;260Md&#x27;: 0, &#x27;259No&#x27;: 0, &#x27;262Lr&#x27;: 0, &#x27;267Rf&#x27;: 0, &#x27;268Db&#x27;: 0, &#x27;271Sg&#x27;: 0, &#x27;272Bh&#x27;: 0, &#x27;270Hs&#x27;: 0, &#x27;276Mt&#x27;: 0, &#x27;281Ds&#x27;: 0, &#x27;280Rg&#x27;: 0, &#x27;285Cn&#x27;: 0, &#x27;284Nh&#x27;: 0, &#x27;289Fl&#x27;: 0, &#x27;288Mc&#x27;: 0, &#x27;293Lv&#x27;: 0, &#x27;292Ts&#x27;: 0, &#x27;294Og&#x27;: 0}"}, {"fullname": "corems.encapsulation.constant.Atoms.isotopes", "modulename": "corems.encapsulation.constant", "qualname": "Atoms.isotopes", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;H&#x27;: [&#x27;Hydrogen&#x27;, [&#x27;D&#x27;, &#x27;T&#x27;]], &#x27;He&#x27;: [&#x27;Helium&#x27;, [&#x27;3He&#x27;]], &#x27;Li&#x27;: [&#x27;Lithium&#x27;, [&#x27;6Li&#x27;]], &#x27;Be&#x27;: [&#x27;Beryllium&#x27;, [None]], &#x27;B&#x27;: [&#x27;Boron&#x27;, [&#x27;10B&#x27;]], &#x27;C&#x27;: [&#x27;Carbon&#x27;, [&#x27;13C&#x27;]], &#x27;N&#x27;: [&#x27;Nitrogen&#x27;, [&#x27;15N&#x27;]], &#x27;O&#x27;: [&#x27;Oxygen&#x27;, [&#x27;18O&#x27;, &#x27;17O&#x27;]], &#x27;F&#x27;: [&#x27;Fluorine&#x27;, [None]], &#x27;Ne&#x27;: [&#x27;Neon&#x27;, [&#x27;22Ne&#x27;, &#x27;21Ne&#x27;]], &#x27;Na&#x27;: [&#x27;Sodium&#x27;, [None]], &#x27;Mg&#x27;: [&#x27;Magnesium&#x27;, [&#x27;26Mg&#x27;, &#x27;25Mg&#x27;]], &#x27;Al&#x27;: [&#x27;Aluminum&#x27;, [None]], &#x27;Si&#x27;: [&#x27;Silicon&#x27;, [&#x27;29Si&#x27;, &#x27;30Si&#x27;]], &#x27;P&#x27;: [&#x27;Phosphorus&#x27;, [None]], &#x27;S&#x27;: [&#x27;Sulfur&#x27;, [&#x27;34S&#x27;, &#x27;33S&#x27;, &#x27;36S&#x27;]], &#x27;Cl&#x27;: [&#x27;Chlorine&#x27;, [&#x27;37Cl&#x27;]], &#x27;Ar&#x27;: [&#x27;Argon&#x27;, [&#x27;36Ar&#x27;, &#x27;38Ar&#x27;]], &#x27;K&#x27;: [&#x27;Potassium&#x27;, [&#x27;41K&#x27;, &#x27;40K&#x27;]], &#x27;Ca&#x27;: [&#x27;Calcium&#x27;, [&#x27;44Ca&#x27;, &#x27;48Ca&#x27;, &#x27;43Ca&#x27;, &#x27;42Ca&#x27;, &#x27;46Ca&#x27;]], &#x27;Sc&#x27;: [&#x27;Scandium&#x27;, [None]], &#x27;Ti&#x27;: [&#x27;Titanium&#x27;, [&#x27;46Ti&#x27;, &#x27;47Ti&#x27;, &#x27;49Ti&#x27;, &#x27;50Ti&#x27;]], &#x27;V&#x27;: [&#x27;Vanadium&#x27;, [&#x27;50V&#x27;]], &#x27;Cr&#x27;: [&#x27;Chromium&#x27;, [&#x27;53Cr&#x27;, &#x27;50Cr&#x27;, &#x27;54Cr&#x27;]], &#x27;Mn&#x27;: [&#x27;Manganese&#x27;, [None]], &#x27;Fe&#x27;: [&#x27;Iron&#x27;, [&#x27;54Fe&#x27;, &#x27;57Fe&#x27;, &#x27;58Fe&#x27;]], &#x27;Co&#x27;: [&#x27;Cobalt&#x27;, [None]], &#x27;Ni&#x27;: [&#x27;Nickel&#x27;, [&#x27;60Ni&#x27;, &#x27;62Ni&#x27;, &#x27;61Ni&#x27;, &#x27;64Ni&#x27;]], &#x27;Cu&#x27;: [&#x27;Copper&#x27;, [&#x27;65Cu&#x27;]], &#x27;Zn&#x27;: [&#x27;Zinc&#x27;, [&#x27;66Zn&#x27;, &#x27;68Zn&#x27;, &#x27;67Zn&#x27;, &#x27;70Zn&#x27;]], &#x27;Ga&#x27;: [&#x27;Gallium&#x27;, [&#x27;71Ga&#x27;]], &#x27;Ge&#x27;: [&#x27;Germanium&#x27;, [&#x27;72Ge&#x27;, &#x27;70Ge&#x27;, &#x27;73Ge&#x27;, &#x27;76Ge&#x27;]], &#x27;As&#x27;: [&#x27;Arsenic&#x27;, [None]], &#x27;Se&#x27;: [&#x27;Selenium&#x27;, [&#x27;78Se&#x27;, &#x27;76Se&#x27;, &#x27;82Se&#x27;, &#x27;77Se&#x27;, &#x27;74Se&#x27;]], &#x27;Br&#x27;: [&#x27;Bromine&#x27;, [&#x27;81Br&#x27;]], &#x27;Kr&#x27;: [&#x27;Krypton&#x27;, [&#x27;86Kr&#x27;, &#x27;82Kr&#x27;, &#x27;83Kr&#x27;, &#x27;80Kr&#x27;]], &#x27;Rb&#x27;: [&#x27;Rubidium&#x27;, [&#x27;87Rb&#x27;]], &#x27;Sr&#x27;: [&#x27;Strontium&#x27;, [&#x27;86Sr&#x27;, &#x27;87Sr&#x27;, &#x27;84Sr&#x27;]], &#x27;Y&#x27;: [&#x27;Yttrium&#x27;, [None]], &#x27;Zr&#x27;: [&#x27;Zirconium&#x27;, [&#x27;94Zr&#x27;, &#x27;92Zr&#x27;, &#x27;91Zr&#x27;, &#x27;96Zr&#x27;]], &#x27;Nb&#x27;: [&#x27;Niobium&#x27;, [None]], &#x27;Mo&#x27;: [&#x27;Molybdenum&#x27;, [&#x27;96Mo&#x27;, &#x27;95Mo&#x27;, &#x27;92Mo&#x27;, &#x27;100Mo&#x27;, &#x27;97Mo&#x27;, &#x27;94Mo&#x27;]], &#x27;Tc&#x27;: [&#x27;Technetium&#x27;, [None]], &#x27;Ru&#x27;: [&#x27;Ruthenium&#x27;, [&#x27;104Ru&#x27;, &#x27;101Ru&#x27;, &#x27;99Ru&#x27;, &#x27;100Ru&#x27;, &#x27;96Ru&#x27;, &#x27;98Ru&#x27;]], &#x27;Rh&#x27;: [&#x27;Rhodium&#x27;, [None]], &#x27;Pd&#x27;: [&#x27;Palladium&#x27;, [&#x27;108Pd&#x27;, &#x27;105Pd&#x27;, &#x27;110Pd&#x27;, &#x27;104Pd&#x27;, &#x27;102Pd&#x27;]], &#x27;Ag&#x27;: [&#x27;Silver&#x27;, [&#x27;109Ag&#x27;]], &#x27;Cd&#x27;: [&#x27;Cadmium&#x27;, [&#x27;114Cd&#x27;, &#x27;111Cd&#x27;, &#x27;110Cd&#x27;, &#x27;113Cd&#x27;, &#x27;116Cd&#x27;, &#x27;106Cd&#x27;, &#x27;108Cd&#x27;]], &#x27;In&#x27;: [&#x27;Indium&#x27;, [&#x27;113In&#x27;]], &#x27;Sn&#x27;: [&#x27;Tin&#x27;, [&#x27;118Sn&#x27;, &#x27;116Sn&#x27;, &#x27;119Sn&#x27;, &#x27;117Sn&#x27;, &#x27;124Sn&#x27;, &#x27;122Sn&#x27;, &#x27;112Sn&#x27;, &#x27;114Sn&#x27;, &#x27;115Sn&#x27;]], &#x27;Sb&#x27;: [&#x27;Antimony&#x27;, [&#x27;123Sb&#x27;]], &#x27;Te&#x27;: [&#x27;Tellurium&#x27;, [&#x27;128Te&#x27;, &#x27;126Te&#x27;, &#x27;125Te&#x27;, &#x27;124Te&#x27;, &#x27;122Te&#x27;, &#x27;123Te&#x27;, &#x27;120Te&#x27;]], &#x27;I&#x27;: [&#x27;Iodine&#x27;, [None]], &#x27;Xe&#x27;: [&#x27;Xenon&#x27;, [&#x27;129Xe&#x27;, &#x27;131Xe&#x27;, &#x27;134Xe&#x27;, &#x27;136Xe&#x27;, &#x27;130Xe&#x27;, &#x27;128Xe&#x27;]], &#x27;Cs&#x27;: [&#x27;Cesium&#x27;, [None]], &#x27;Ba&#x27;: [&#x27;Barium&#x27;, [&#x27;137Ba&#x27;, &#x27;136Ba&#x27;, &#x27;135Ba&#x27;, &#x27;134Ba&#x27;]], &#x27;La&#x27;: [&#x27;Lanthanum&#x27;, [&#x27;138La&#x27;]], &#x27;Hf&#x27;: [&#x27;Hafnium&#x27;, [&#x27;178Hf&#x27;, &#x27;177Hf&#x27;, &#x27;179Hf&#x27;, &#x27;176Hf&#x27;]], &#x27;Ta&#x27;: [&#x27;Tantalum&#x27;, [&#x27;180Ta&#x27;]], &#x27;W&#x27;: [&#x27;Tungsten&#x27;, [&#x27;186W&#x27;, &#x27;182W&#x27;, &#x27;183W&#x27;]], &#x27;Re&#x27;: [&#x27;Rhenium&#x27;, [&#x27;185Re&#x27;]], &#x27;Os&#x27;: [&#x27;Osmium&#x27;, [&#x27;190Os&#x27;, &#x27;189Os&#x27;, &#x27;188Os&#x27;, &#x27;187Os&#x27;, &#x27;186Os&#x27;]], &#x27;Ir&#x27;: [&#x27;Iridium&#x27;, [&#x27;191Ir&#x27;]], &#x27;Pt&#x27;: [&#x27;Platinum&#x27;, [&#x27;194Pt&#x27;, &#x27;196Pt&#x27;, &#x27;198Pt&#x27;, &#x27;192Pt&#x27;]], &#x27;Au&#x27;: [&#x27;Gold&#x27;, [None]], &#x27;Hg&#x27;: [&#x27;Mercury&#x27;, [&#x27;200Hg&#x27;, &#x27;199Hg&#x27;, &#x27;201Hg&#x27;, &#x27;198Hg&#x27;, &#x27;204Hg&#x27;]], &#x27;Tl&#x27;: [&#x27;Thallium&#x27;, [&#x27;203Tl&#x27;]], &#x27;Pb&#x27;: [&#x27;Lead&#x27;, [&#x27;206Pb&#x27;, &#x27;207Pb&#x27;, &#x27;204Pb&#x27;]], &#x27;Bi&#x27;: [&#x27;Bismuth&#x27;, [None]], &#x27;Po&#x27;: [&#x27;Polonium&#x27;, [None]], &#x27;At&#x27;: [&#x27;Astatine&#x27;, [None]], &#x27;Rn&#x27;: [&#x27;Radon&#x27;, [None]], &#x27;Fr&#x27;: [&#x27;Francium&#x27;, [None]], &#x27;Ra&#x27;: [&#x27;Radium&#x27;, [None]], &#x27;Ac&#x27;: [&#x27;Actinium&#x27;, [None]], &#x27;Rf&#x27;: [&#x27;Rutherfordium&#x27;, [None]], &#x27;Db&#x27;: [&#x27;Dubnium&#x27;, [None]], &#x27;Sg&#x27;: [&#x27;Seaborgium&#x27;, [None]], &#x27;Bh&#x27;: [&#x27;Bohrium&#x27;, [None]], &#x27;Hs&#x27;: [&#x27;Hassium&#x27;, [None]], &#x27;Mt&#x27;: [&#x27;Meitnerium&#x27;, [None]], &#x27;Ds&#x27;: [&#x27;Darmstadtium&#x27;, [None]], &#x27;Rg&#x27;: [&#x27;Roentgenium&#x27;, [None]], &#x27;Cn&#x27;: [&#x27;Copernicium&#x27;, [None]], &#x27;Nh&#x27;: [&#x27;Nihonium&#x27;, [None]], &#x27;Fl&#x27;: [&#x27;Flerovium&#x27;, [None]], &#x27;Mc&#x27;: [&#x27;Moscovium&#x27;, [None]], &#x27;Lv&#x27;: [&#x27;Livermorium&#x27;, [None]], &#x27;Ts&#x27;: [&#x27;Tennessine&#x27;, [None]], &#x27;Og&#x27;: [&#x27;Oganesson&#x27;, [None]], &#x27;Ce&#x27;: [&#x27;Cerium&#x27;, [&#x27;142Ce&#x27;, &#x27;138Ce136Ce&#x27;]], &#x27;Pr&#x27;: [&#x27;Praseodymium&#x27;, [None]], &#x27;Nd&#x27;: [&#x27;Neodymium&#x27;, [None]], &#x27;Pm&#x27;: [&#x27;Promethium&#x27;, [None]], &#x27;Sm&#x27;: [&#x27;Samarium&#x27;, [None]], &#x27;Eu&#x27;: [&#x27;Europium&#x27;, [None]], &#x27;Gd&#x27;: [&#x27;Gadolinium&#x27;, [None]], &#x27;Tb&#x27;: [&#x27;Terbium&#x27;, [None]], &#x27;Dy&#x27;: [&#x27;Dysprosium&#x27;, [None]], &#x27;Ho&#x27;: [&#x27;Holmium&#x27;, [None]], &#x27;Er&#x27;: [&#x27;Erbium&#x27;, [None]], &#x27;Tm&#x27;: [&#x27;Thulium&#x27;, [None]], &#x27;Yb&#x27;: [&#x27;Ytterbium&#x27;, [None]], &#x27;Lu&#x27;: [&#x27;Lutetium&#x27;, [&#x27;176Lu&#x27;]], &#x27;Th&#x27;: [&#x27;Thorium&#x27;, [None]], &#x27;Pa&#x27;: [&#x27;Protactinium&#x27;, [None]], &#x27;U&#x27;: [&#x27;Uranium&#x27;, [&#x27;235U&#x27;, &#x27;234U&#x27;]], &#x27;Np&#x27;: [&#x27;Neptunium&#x27;, [None]], &#x27;Pu&#x27;: [&#x27;Plutonium&#x27;, [None]], &#x27;Am&#x27;: [&#x27;Americium&#x27;, [None]], &#x27;Cm&#x27;: [&#x27;Curium&#x27;, [None]], &#x27;Bk&#x27;: [&#x27;Berkelium&#x27;, [None]], &#x27;Cf&#x27;: [&#x27;Californium&#x27;, [None]], &#x27;Es&#x27;: [&#x27;Einsteinium&#x27;, [None]], &#x27;Fm&#x27;: [&#x27;Fermium&#x27;, [None]], &#x27;Md&#x27;: [&#x27;Mendelevium&#x27;, [None]], &#x27;No&#x27;: [&#x27;Nobelium&#x27;, [None]], &#x27;Lr&#x27;: [&#x27;Lawrencium&#x27;, [None]]}"}, {"fullname": "corems.encapsulation.factory", "modulename": "corems.encapsulation.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.parameters", "modulename": "corems.encapsulation.factory.parameters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.parameters.hush_output", "modulename": "corems.encapsulation.factory.parameters", "qualname": "hush_output", "kind": "function", "doc": "<p>Toggle all the verbose_processing flags to False on the MSParameters, GCMSParameters and LCMSParameters classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.reset_ms_parameters", "modulename": "corems.encapsulation.factory.parameters", "qualname": "reset_ms_parameters", "kind": "function", "doc": "<p>Reset the MSParameter class to the default values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.reset_gcms_parameters", "modulename": "corems.encapsulation.factory.parameters", "qualname": "reset_gcms_parameters", "kind": "function", "doc": "<p>Reset the GCMSParameters class to the default values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.reset_lcms_parameters", "modulename": "corems.encapsulation.factory.parameters", "qualname": "reset_lcms_parameters", "kind": "function", "doc": "<p>Reset the LCMSParameters class to the default values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters", "kind": "class", "doc": "<p>MSParameters class is used to store the parameters used for the processing of the mass spectrum</p>\n\n<p>Each attibute is a class that contains the parameters for the processing of the mass spectrum, see the corems.encapsulation.factory.processingSetting module for more details.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>use_defaults</strong> (bool, optional):\nif True, the class will be instantiated with the default values, otherwise the current values will be used. Default is False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>molecular_search</strong> (MolecularFormulaSearchSettings):\nMolecularFormulaSearchSettings object</li>\n<li><strong>transient</strong> (TransientSetting):\nTransientSetting object</li>\n<li><strong>mass_spectrum</strong> (MassSpectrumSetting):\nMassSpectrumSetting object</li>\n<li><strong>ms_peak</strong> (MassSpecPeakSetting):\nMassSpecPeakSetting object</li>\n<li><strong>data_input</strong> (DataInputSetting):\nDataInputSetting object</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>One can use the use_defaults parameter to reset the parameters to the default values.\nAlternatively, to use the current values - modify the class's contents before instantiating the class.</p>\n"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.__init__", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">use_defaults</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.molecular_search", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.molecular_search", "kind": "variable", "doc": "<p></p>\n", "default_value": "MolecularFormulaSearchSettings(verbose_processing=True, use_isotopologue_filter=False, isotopologue_filter_threshold=33.0, isotopologue_filter_atoms=(&#x27;Cl&#x27;, &#x27;Br&#x27;), use_runtime_kendrick_filter=False, use_min_peaks_filter=True, min_peaks_per_class=15, url_database=&#x27;postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/coremsapp&#x27;, db_jobs=3, db_chunk_size=300, ion_charge=-1, min_hc_filter=0.3, max_hc_filter=3.0, min_oc_filter=0.0, max_oc_filter=1.2, min_op_filter=2.0, use_pah_line_rule=False, min_dbe=0.0, max_dbe=40.0, mz_error_score_weight=0.6, isotopologue_score_weight=0.4, adduct_atoms_neg=(&#x27;Cl&#x27;, &#x27;Br&#x27;), adduct_atoms_pos=(&#x27;Na&#x27;, &#x27;K&#x27;), score_methods=(&#x27;S_P_lowest_error&#x27;, &#x27;N_S_P_lowest_error&#x27;, &#x27;lowest_error&#x27;, &#x27;prob_score&#x27;, &#x27;air_filter_error&#x27;, &#x27;water_filter_error&#x27;, &#x27;earth_filter_error&#x27;), score_method=&#x27;prob_score&#x27;, output_min_score=0.1, output_score_method=&#x27;All Candidates&#x27;, isRadical=False, isProtonated=True, isAdduct=False, usedAtoms={&#x27;C&#x27;: (1, 100), &#x27;H&#x27;: (1, 200)}, ion_types_excluded=[], ionization_type=&#x27;ESI&#x27;, min_ppm_error=-10.0, max_ppm_error=10.0, min_abun_error=-100.0, max_abun_error=100.0, mz_error_range=1.5, error_method=&#x27;None&#x27;, mz_error_average=0.0, used_atom_valences={&#x27;C&#x27;: 4, &#x27;13C&#x27;: 4, &#x27;N&#x27;: 3, &#x27;O&#x27;: 2, &#x27;S&#x27;: 2, &#x27;H&#x27;: 1, &#x27;F&#x27;: 1, &#x27;Cl&#x27;: 1, &#x27;Br&#x27;: 1, &#x27;I&#x27;: 1, &#x27;At&#x27;: 1, &#x27;Li&#x27;: 1, &#x27;Na&#x27;: 1, &#x27;K&#x27;: 1, &#x27;Rb&#x27;: 1, &#x27;Cs&#x27;: 1, &#x27;Fr&#x27;: 1, &#x27;B&#x27;: 4, &#x27;In&#x27;: 3, &#x27;Al&#x27;: 3, &#x27;P&#x27;: 3, &#x27;Ga&#x27;: 3, &#x27;Mg&#x27;: 2, &#x27;Be&#x27;: 2, &#x27;Ca&#x27;: 2, &#x27;Sr&#x27;: 2, &#x27;Ba&#x27;: 2, &#x27;Ra&#x27;: 2, &#x27;V&#x27;: 5, &#x27;Fe&#x27;: 3, &#x27;Si&#x27;: 4, &#x27;Sc&#x27;: 3, &#x27;Ti&#x27;: 4, &#x27;Cr&#x27;: 1, &#x27;Mn&#x27;: 1, &#x27;Co&#x27;: 1, &#x27;Ni&#x27;: 1, &#x27;Cu&#x27;: 2, &#x27;Zn&#x27;: 2, &#x27;Ge&#x27;: 4, &#x27;As&#x27;: 5, &#x27;Se&#x27;: 6, &#x27;Y&#x27;: 3, &#x27;Zr&#x27;: 4, &#x27;Nb&#x27;: 5, &#x27;Mo&#x27;: 6, &#x27;Tc&#x27;: 7, &#x27;Ru&#x27;: 8, &#x27;Rh&#x27;: 6, &#x27;Pd&#x27;: 4, &#x27;Ag&#x27;: 0, &#x27;Cd&#x27;: 2, &#x27;Sn&#x27;: 4, &#x27;Sb&#x27;: 5, &#x27;Te&#x27;: 6, &#x27;La&#x27;: 3, &#x27;Hf&#x27;: 4, &#x27;Ta&#x27;: 5, &#x27;W&#x27;: 6, &#x27;Re&#x27;: 4, &#x27;Os&#x27;: 4, &#x27;Ir&#x27;: 4, &#x27;Pt&#x27;: 4, &#x27;Au&#x27;: 3, &#x27;Hg&#x27;: 1, &#x27;Tl&#x27;: 3, &#x27;Pb&#x27;: 4, &#x27;Bi&#x27;: 3, &#x27;Po&#x27;: 2, &#x27;Ac&#x27;: 3})"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.transient", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.transient", "kind": "variable", "doc": "<p></p>\n", "default_value": "TransientSetting(implemented_apodization_function=(&#x27;Hamming&#x27;, &#x27;Hanning&#x27;, &#x27;Blackman&#x27;, &#x27;Full-Sine&#x27;, &#x27;Half-Sine&#x27;, &#x27;Kaiser&#x27;, &#x27;Half-Kaiser&#x27;), apodization_method=&#x27;Hanning&#x27;, number_of_truncations=0, number_of_zero_fills=1, next_power_of_two=False, kaiser_beta=8.6)"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.mass_spectrum", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.mass_spectrum", "kind": "variable", "doc": "<p></p>\n", "default_value": "MassSpectrumSetting(noise_threshold_method=&#x27;log&#x27;, noise_threshold_methods_implemented=(&#x27;minima&#x27;, &#x27;signal_noise&#x27;, &#x27;relative_abundance&#x27;, &#x27;absolute_abundance&#x27;, &#x27;log&#x27;), noise_threshold_min_std=6, noise_threshold_min_s2n=4.0, noise_threshold_min_relative_abundance=6.0, noise_threshold_absolute_abundance=1000000.0, noise_threshold_log_nsigma=6, noise_threshold_log_nsigma_corr_factor=0.463, noise_threshold_log_nsigma_bins=500, noise_min_mz=50.0, noise_max_mz=1200.0, min_picking_mz=50.0, max_picking_mz=1200.0, picking_point_extrapolate=3, calib_minimize_method=&#x27;Powell&#x27;, calib_pol_order=2, max_calib_ppm_error=1.0, min_calib_ppm_error=-1.0, calib_sn_threshold=2.0, calibration_ref_match_method=&#x27;legacy&#x27;, calibration_ref_match_method_implemented=(&#x27;legacy&#x27;, &#x27;merged&#x27;), calibration_ref_match_tolerance=0.003, calibration_ref_match_std_raw_error_limit=1.5, do_calibration=True, verbose_processing=True)"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.ms_peak", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.ms_peak", "kind": "variable", "doc": "<p></p>\n", "default_value": "MassSpecPeakSetting(kendrick_base={&#x27;C&#x27;: 1, &#x27;H&#x27;: 2}, kendrick_rounding_method=&#x27;floor&#x27;, implemented_kendrick_rounding_methods=(&#x27;floor&#x27;, &#x27;ceil&#x27;, &#x27;round&#x27;), peak_derivative_threshold=0.0, peak_min_prominence_percent=0.1, min_peak_datapoints=5.0, peak_max_prominence_percent=0.1, peak_height_max_percent=10.0, legacy_resolving_power=True, legacy_centroid_polyfit=False)"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.data_input", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.data_input", "kind": "variable", "doc": "<p></p>\n", "default_value": "DataInputSetting(header_translate={&#x27;m/z&#x27;: &#x27;m/z&#x27;, &#x27;mOz&#x27;: &#x27;m/z&#x27;, &#x27;Mass&#x27;: &#x27;m/z&#x27;, &#x27;Resolving Power&#x27;: &#x27;Resolving Power&#x27;, &#x27;Res.&#x27;: &#x27;Resolving Power&#x27;, &#x27;resolution&#x27;: &#x27;Resolving Power&#x27;, &#x27;Intensity&#x27;: &#x27;Peak Height&#x27;, &#x27;Peak Height&#x27;: &#x27;Peak Height&#x27;, &#x27;I&#x27;: &#x27;Peak Height&#x27;, &#x27;Abundance&#x27;: &#x27;Peak Height&#x27;, &#x27;abs_abu&#x27;: &#x27;Peak Height&#x27;, &#x27;Signal/Noise&#x27;: &#x27;S/N&#x27;, &#x27;S/N&#x27;: &#x27;S/N&#x27;, &#x27;sn&#x27;: &#x27;S/N&#x27;})"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.copy", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.copy", "kind": "function", "doc": "<p>Create a copy of the MSParameters object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.MSParameters.print", "modulename": "corems.encapsulation.factory.parameters", "qualname": "MSParameters.print", "kind": "function", "doc": "<p>Print the MSParameters object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.GCMSParameters", "modulename": "corems.encapsulation.factory.parameters", "qualname": "GCMSParameters", "kind": "class", "doc": "<p>GCMSParameters class is used to store the parameters used for the processing of the gas chromatograph mass spectrum</p>\n\n<p>Each attibute is a class that contains the parameters for the processing of the data, see the corems.encapsulation.factory.processingSetting module for more details.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>use_defaults</strong> (bool, optional):\nif True, the class will be instantiated with the default values, otherwise the current values will be used. Default is False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>molecular_search</strong> (MolecularFormulaSearchSettings):\nMolecularFormulaSearchSettings object</li>\n<li><strong>gc_ms</strong> (GasChromatographSetting):\nGasChromatographSetting object</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>One can use the use_defaults parameter to reset the parameters to the default values.\nAlternatively, to use the current values - modify the class's contents before instantiating the class.</p>\n"}, {"fullname": "corems.encapsulation.factory.parameters.GCMSParameters.__init__", "modulename": "corems.encapsulation.factory.parameters", "qualname": "GCMSParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">use_defaults</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.parameters.GCMSParameters.molecular_search", "modulename": "corems.encapsulation.factory.parameters", "qualname": "GCMSParameters.molecular_search", "kind": "variable", "doc": "<p></p>\n", "default_value": "CompoundSearchSettings(url_database=&#x27;sqlite:///db/pnnl_lowres_gcms_compounds.sqlite&#x27;, ri_search_range=35.0, rt_search_range=1.0, correlation_threshold=0.5, score_threshold=0.0, ri_spacing=200.0, ri_std=3.0, ri_calibration_compound_names=[&#x27;Methyl Caprylate&#x27;, &#x27;Methyl Caprate&#x27;, &#x27;Methyl Pelargonate&#x27;, &#x27;Methyl Laurate&#x27;, &#x27;Methyl Myristate&#x27;, &#x27;Methyl Palmitate&#x27;, &#x27;Methyl Stearate&#x27;, &#x27;Methyl Eicosanoate&#x27;, &#x27;Methyl Docosanoate&#x27;, &#x27;Methyl Linocerate&#x27;, &#x27;Methyl Hexacosanoate&#x27;, &#x27;Methyl Octacosanoate&#x27;, &#x27;Methyl Triacontanoate&#x27;], exploratory_mode=False, score_methods=(&#x27;highest_sim_score&#x27;, &#x27;highest_ss&#x27;), output_score_method=&#x27;All&#x27;)"}, {"fullname": "corems.encapsulation.factory.parameters.GCMSParameters.gc_ms", "modulename": "corems.encapsulation.factory.parameters", "qualname": "GCMSParameters.gc_ms", "kind": "variable", "doc": "<p></p>\n", "default_value": "GasChromatographSetting(use_deconvolution=False, implemented_smooth_method=(&#x27;savgol&#x27;, &#x27;hanning&#x27;, &#x27;blackman&#x27;, &#x27;bartlett&#x27;, &#x27;flat&#x27;, &#x27;boxcar&#x27;), smooth_window=5, smooth_method=&#x27;savgol&#x27;, savgol_pol_order=2, peak_derivative_threshold=0.0005, peak_height_max_percent=10.0, peak_max_prominence_percent=1.0, min_peak_datapoints=5.0, max_peak_width=0.1, noise_threshold_method=&#x27;manual_relative_abundance&#x27;, noise_threshold_methods_implemented=(&#x27;auto_relative_abundance&#x27;, &#x27;manual_relative_abundance&#x27;, &#x27;second_derivative&#x27;), std_noise_threshold=3, peak_height_min_percent=0.1, peak_min_prominence_percent=0.1, eic_signal_threshold=0.01, max_rt_distance=0.025, verbose_processing=True)"}, {"fullname": "corems.encapsulation.factory.parameters.GCMSParameters.copy", "modulename": "corems.encapsulation.factory.parameters", "qualname": "GCMSParameters.copy", "kind": "function", "doc": "<p>Create a copy of the GCMSParameters object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.GCMSParameters.print", "modulename": "corems.encapsulation.factory.parameters", "qualname": "GCMSParameters.print", "kind": "function", "doc": "<p>Print the GCMSParameters object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.LCMSParameters", "modulename": "corems.encapsulation.factory.parameters", "qualname": "LCMSParameters", "kind": "class", "doc": "<p>LCMSParameters class is used to store the parameters used for the processing of the liquid chromatograph mass spectrum</p>\n\n<p>Each attibute is a class that contains the parameters for the processing of the data, see the corems.encapsulation.factory.processingSetting module for more details.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>use_defaults</strong> (bool, optional):\nif True, the class will be instantiated with the default values, otherwise the current values will be used. Default is False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>lc_ms</strong> (LiquidChromatographSetting):\nLiquidChromatographSetting object</li>\n<li><strong>mass_spectrum</strong> (dict):\ndictionary with the mass spectrum parameters for ms1 and ms2, each value is a MSParameters object</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>One can use the use_defaults parameter to reset the parameters to the default values.\nAlternatively, to use the current values - modify the class's contents before instantiating the class.</p>\n"}, {"fullname": "corems.encapsulation.factory.parameters.LCMSParameters.__init__", "modulename": "corems.encapsulation.factory.parameters", "qualname": "LCMSParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">use_defaults</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.parameters.LCMSParameters.lc_ms", "modulename": "corems.encapsulation.factory.parameters", "qualname": "LCMSParameters.lc_ms", "kind": "variable", "doc": "<p></p>\n", "default_value": "LiquidChromatographSetting(scans=(-1, -1), eic_tolerance_ppm=5.0, smooth_window=5, smooth_method=&#x27;savgol&#x27;, implemented_smooth_method=(&#x27;savgol&#x27;, &#x27;hanning&#x27;, &#x27;blackman&#x27;, &#x27;bartlett&#x27;, &#x27;flat&#x27;, &#x27;boxcar&#x27;), savgol_pol_order=2, peak_height_max_percent=10.0, peak_max_prominence_percent=1.0, peak_derivative_threshold=0.0005, min_peak_datapoints=5.0, noise_threshold_method=&#x27;manual_relative_abundance&#x27;, noise_threshold_methods_implemented=(&#x27;auto_relative_abundance&#x27;, &#x27;manual_relative_abundance&#x27;, &#x27;second_derivative&#x27;), peak_height_min_percent=0.1, eic_signal_threshold=0.01, peak_picking_method=&#x27;persistent homology&#x27;, implemented_peak_picking_methods=(&#x27;persistent homology&#x27;,), mass_feature_cluster_mz_tolerance_rel=5e-06, mass_feature_cluster_rt_tolerance=0.3, ms1_scans_to_average=1, ms1_deconvolution_corr_min=0.8, ms2_dda_rt_tolerance=0.15, ms2_dda_mz_tolerance=0.05, ms2_min_fe_score=0.2, search_as_lipids=False, include_fragment_types=False, export_profile_spectra=False, export_eics=True, export_unprocessed_ms1=False, verbose_processing=True)"}, {"fullname": "corems.encapsulation.factory.parameters.LCMSParameters.mass_spectrum", "modulename": "corems.encapsulation.factory.parameters", "qualname": "LCMSParameters.mass_spectrum", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ms1&#x27;: &lt;corems.encapsulation.factory.parameters.MSParameters object&gt;, &#x27;ms2&#x27;: &lt;corems.encapsulation.factory.parameters.MSParameters object&gt;}"}, {"fullname": "corems.encapsulation.factory.parameters.LCMSParameters.copy", "modulename": "corems.encapsulation.factory.parameters", "qualname": "LCMSParameters.copy", "kind": "function", "doc": "<p>Create a copy of the LCMSParameters object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.LCMSParameters.print", "modulename": "corems.encapsulation.factory.parameters", "qualname": "LCMSParameters.print", "kind": "function", "doc": "<p>Print the LCMSParameters object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.parameters.default_parameters", "modulename": "corems.encapsulation.factory.parameters", "qualname": "default_parameters", "kind": "function", "doc": "<p>Generate parameters dictionary with the default parameters for data processing\n   To gather parameters from instrument data during the data parsing step, a parameters dictionary with the default parameters needs to be generated.\n   This dictionary acts as a placeholder and is later used as an argument for all the class constructor methods during instantiation.\n   The data gathered from the instrument is added to the class properties.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str):\npath to the file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>parameters</strong> (dict):\ndictionary with the default parameters for data processing</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_location</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.processingSetting", "modulename": "corems.encapsulation.factory.processingSetting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting", "kind": "class", "doc": "<p>Transient processing settings class</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>implemented_apodization_function</strong> (tuple):\nAvailable apodization functions</li>\n<li><strong>apodization_method</strong> (str):\nApodization function to use. Hanning is a good default for Fourier transform magnitude mode. For absorption mode processing, Half-Sine or Half-Kaiser may be more appropriate.</li>\n<li><strong>number_of_truncations</strong> (int):\nHow many times to truncate the transient prior to Fourier transform</li>\n<li><strong>number_of_zero_fills</strong> (int):\nHow many times to zero fille the transient prior to Fourier transform.</li>\n<li><strong>next_power_of_two</strong> (bool):\nIf True, zero fill to the next power of two after the new length of len(transient)+(number_of_zero_fills*len(transient)).</li>\n<li><strong>kaiser_beta</strong> (float):\nBeta parameter for Kaiser or Half-Kaiser apodisation function. 0 is rectangular,  5 is similar to Hamming,\n6 is similar to hanning, and 8.6 is similar to Blackman (from numpy docs)</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">implemented_apodization_function</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Hamming&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Hanning&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Blackman&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Full-Sine&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Half-Sine&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Kaiser&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Half-Kaiser&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">apodization_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hanning&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_truncations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_zero_fills</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">next_power_of_two</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">kaiser_beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">8.6</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting.implemented_apodization_function", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting.implemented_apodization_function", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;Hamming&#x27;, &#x27;Hanning&#x27;, &#x27;Blackman&#x27;, &#x27;Full-Sine&#x27;, &#x27;Half-Sine&#x27;, &#x27;Kaiser&#x27;, &#x27;Half-Kaiser&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting.apodization_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting.apodization_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;Hanning&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting.number_of_truncations", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting.number_of_truncations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting.number_of_zero_fills", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting.number_of_zero_fills", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting.next_power_of_two", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting.next_power_of_two", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.TransientSetting.kaiser_beta", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "TransientSetting.kaiser_beta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "8.6"}, {"fullname": "corems.encapsulation.factory.processingSetting.DataInputSetting", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "DataInputSetting", "kind": "class", "doc": "<p>Data input settings class</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>header_translate</strong> (dict):\nDictionary with the header labels to be translated to the corems labels. For example, {'m/z':'m/z', 'Resolving Power':'Resolving Power', 'Abundance':'Abundance' , 'S/N':'S/N'}</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.DataInputSetting.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "DataInputSetting.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">header_translate</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.DataInputSetting.header_translate", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "DataInputSetting.header_translate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "corems.encapsulation.factory.processingSetting.DataInputSetting.add_mz_label", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "DataInputSetting.add_mz_label", "kind": "function", "doc": "<p>Add a label to the header_translate dictionary to be translated to the corems label for mz.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.processingSetting.DataInputSetting.add_peak_height_label", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "DataInputSetting.add_peak_height_label", "kind": "function", "doc": "<p>Add a label to the header_translate dictionary to be translated to the corems label for peak height.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.processingSetting.DataInputSetting.add_sn_label", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "DataInputSetting.add_sn_label", "kind": "function", "doc": "<p>Add a label to the header_translate dictionary to be translated to the corems label for signal to noise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.processingSetting.DataInputSetting.add_resolving_power_label", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "DataInputSetting.add_resolving_power_label", "kind": "function", "doc": "<p>Add a label to the header_translate dictionary to be translated to the corems label for resolving power.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting", "kind": "class", "doc": "<p>Liquid chromatograph processing settings class</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>scans</strong> (list or tuple, optional):\nList of select scan to average or a tuple containing the range to average. Default is (0, 1).</li>\n<li><strong>eic_tolerance_ppm</strong> (float, optional):\nMass tolerance in ppm for extracted ion chromatogram peak detection. Default is 5.</li>\n<li><strong>correct_eic_baseline</strong> (bool, optional):\nIf True, correct the baseline of the extracted ion chromatogram. Default is True.</li>\n<li><strong>smooth_window</strong> (int, optional):\nWindow size for smoothing the ion chromatogram (extracted or total). Default is 5.</li>\n<li><strong>smooth_method</strong> (str, optional):\nSmoothing method to use. Default is 'savgol'. Other options are 'hanning', 'blackman', 'bartlett', 'flat', 'boxcar'.</li>\n<li><strong>implemented_smooth_method</strong> (tuple, optional):\nSmoothing methods that can be implemented. Values are ('savgol', 'hanning', 'blackman', 'bartlett', 'flat', 'boxcar').</li>\n<li><strong>savgol_pol_order</strong> (int, optional):\nPolynomial order for Savitzky-Golay smoothing. Default is 2.</li>\n<li><strong>peak_height_max_percent</strong> (float, optional):\n1-100 % used for baseline detection use 0.1 for second_derivative and 10 for other methods. Default is 10.</li>\n<li><strong>peak_max_prominence_percent</strong> (float, optional):\n1-100 % used for baseline detection. Default is 1.</li>\n<li><strong>peak_derivative_threshold</strong> (float, optional):\nThreshold for defining derivative crossing. Default is 0.0005.</li>\n<li><strong>min_peak_datapoints</strong> (float, optional):\nminimum data point to define a chromatografic peak. Default is 5.</li>\n<li><strong>noise_threshold_method</strong> (str, optional):\nMethod for detecting noise threshold. Default is 'manual_relative_abundance'.</li>\n<li><strong>noise_threshold_methods_implemented</strong> (tuple, optional):\nMethods for detected noise threshold that can be implemented. Default is ('auto_relative_abundance', 'manual_relative_abundance', 'second_derivative').</li>\n<li><strong>peak_height_min_percent</strong> (float, optional):\n0-100 % used for peak detection. Default is 0.1.</li>\n<li><strong>eic_signal_threshold</strong> (float, optional):\n0-100 % used for extracted ion chromatogram peak detection. Default is 0.01.</li>\n<li><strong>eic_buffer_time</strong> (float, optional):\nBuffer time to add to the start and end of the plot of the extracted ion chromatogram, in minutes. Default is 1.5.</li>\n<li><strong>ph_smooth_it</strong> (int, optional):\nNumber of iterations to use for smoothing prior to finding mass features.\nCalled within the PHCalculations.find_mass_features_ph() method. Default is 7.</li>\n<li><strong>ph_smooth_radius_mz</strong> (int, optional):\nRadius in m/z steps (not daltons) for smoothing prior to finding mass features.\nCalled within the PHCalculations.find_mass_features_ph() method. Default is 0.</li>\n<li><strong>ph_smooth_radius_scan</strong> (int, optional):\nRadius in scan steps for smoothing prior to finding mass features.\nCalled within the PHCalculations.find_mass_features_ph() method. Default is 3.</li>\n<li><strong>ph_inten_min_rel</strong> (int, optional):\nRelative minimum intensity to use for finding mass features.\nCalculated as a fraction of the maximum intensity of the unprocessed profile data (mz, scan).\nCalled within the PH_Calculations.find_mass_features() method. Default is 0.001.</li>\n<li><strong>ph_persis_min_rel</strong> (int, optional):\nRelative minimum persistence for retaining mass features.\nCalculated as a fraction of the maximum intensity of the unprocessed profile data (mz, scan).\nShould be greater to or equal to ph_inten_min_rel.\nCalled within the PH_Calculations.find_mass_features() method. Default is 0.001.</li>\n<li><strong>mass_feature_cluster_mz_tolerance_rel</strong> (float, optional):\nRelative m/z tolerance to use for clustering mass features.\nCalled with the PHCalculations.cluster_mass_features() and the LCCalculations.deconvolute_ms1_mass_features() methods.\nDefault is 5E-6 (5 ppm).</li>\n<li><strong>mass_feature_cluster_rt_tolerance</strong> (float, optional):\nRetention time tolerance to use for clustering mass features, in minutes.\nCalled with the PHCalculations.cluster_mass_features() and the LCCalculations.deconvolute_ms1_mass_features() methods.\nDefault is 0.2.</li>\n<li><strong>ms1_scans_to_average</strong> (int, optional):\nNumber of MS1 scans to average for mass-feature associated m/zs.\nCalled within the LCMSBase.add_associated_ms1() method. Default is 1.</li>\n<li><strong>ms1_deconvolution_corr_min</strong> (float, optional):\nMinimum correlation to use for deconvoluting MS1 mass features.\nCalled within the LCCalculations.deconvolute_ms1_mass_features() method.\nDefault is 0.8.</li>\n<li><strong>ms2_dda_rt_tolerance</strong> (float, optional):\nRetention time tolerance to use for associating MS2 spectra to mass features, in minutes. Called within the LCMSBase.add_associated_ms2_dda() method. Default is 0.15.</li>\n<li><strong>ms2_dda_mz_tolerance</strong> (float, optional):\nMass tolerance to use for associating MS2 spectra to mass features. Called within the LCMSBase.add_associated_ms2_dda() method. Default is 0.05.</li>\n<li><strong>ms2_min_fe_score</strong> (float, optional):\nMinimum flash entropy for retaining MS2 annotations. Called within the LCMSSpectralSearch.fe_search() method. Default is 0.2.</li>\n<li><strong>search_as_lipids</strong> (bool, optional):\nIf True, prepare the database for lipid searching. Called within the LCMSSpectralSearch.fe_prep_search_db() method. Default is False.</li>\n<li><strong>include_fragment_types</strong> (bool, optional):\nIf True, include fragment types in the database. Called within the LCMSSpectralSearch.fe_search() and related methods. Default is False.</li>\n<li><strong>verbose_processing</strong> (bool, optional):\nIf True, print verbose processing information. Default is True.</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scans</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">eic_tolerance_ppm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;savgol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">implemented_smooth_method</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;savgol&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hanning&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;blackman&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bartlett&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;boxcar&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">savgol_pol_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height_max_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">peak_max_prominence_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">peak_derivative_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0005</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_datapoints</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;manual_relative_abundance&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_methods_implemented</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;auto_relative_abundance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;manual_relative_abundance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;second_derivative&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height_min_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">eic_signal_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">peak_picking_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;persistent homology&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">implemented_peak_picking_methods</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;persistent homology&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">mass_feature_cluster_mz_tolerance_rel</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5e-06</span>,</span><span class=\"param\">\t<span class=\"n\">mass_feature_cluster_rt_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">ms1_scans_to_average</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ms1_deconvolution_corr_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">ms2_dda_rt_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.15</span>,</span><span class=\"param\">\t<span class=\"n\">ms2_dda_mz_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">ms2_min_fe_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">search_as_lipids</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_fragment_types</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">export_profile_spectra</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">export_eics</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">export_unprocessed_ms1</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose_processing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.scans", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.scans", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list | tuple", "default_value": "(-1, -1)"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.eic_tolerance_ppm", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.eic_tolerance_ppm", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "5"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.correct_eic_baseline", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.correct_eic_baseline", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.smooth_window", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.smooth_window", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.smooth_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.smooth_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;savgol&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.implemented_smooth_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.implemented_smooth_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;savgol&#x27;, &#x27;hanning&#x27;, &#x27;blackman&#x27;, &#x27;bartlett&#x27;, &#x27;flat&#x27;, &#x27;boxcar&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.savgol_pol_order", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.savgol_pol_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "2"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.peak_height_max_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.peak_height_max_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "10"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.peak_max_prominence_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.peak_max_prominence_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.peak_derivative_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.peak_derivative_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0005"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.min_peak_datapoints", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.min_peak_datapoints", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "5"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.noise_threshold_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.noise_threshold_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;manual_relative_abundance&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.noise_threshold_methods_implemented", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.noise_threshold_methods_implemented", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;auto_relative_abundance&#x27;, &#x27;manual_relative_abundance&#x27;, &#x27;second_derivative&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.peak_height_min_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.peak_height_min_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.eic_signal_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.eic_signal_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.01"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.eic_buffer_time", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.eic_buffer_time", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.5"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.peak_picking_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.peak_picking_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;persistent homology&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.implemented_peak_picking_methods", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.implemented_peak_picking_methods", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;persistent homology&#x27;,)"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ph_smooth_it", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ph_smooth_it", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ph_smooth_radius_mz", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ph_smooth_radius_mz", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ph_smooth_radius_scan", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ph_smooth_radius_scan", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ph_inten_min_rel", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ph_inten_min_rel", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ph_persis_min_rel", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ph_persis_min_rel", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.mass_feature_cluster_mz_tolerance_rel", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.mass_feature_cluster_mz_tolerance_rel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "5e-06"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.mass_feature_cluster_rt_tolerance", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.mass_feature_cluster_rt_tolerance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.3"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ms1_scans_to_average", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ms1_scans_to_average", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ms1_deconvolution_corr_min", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ms1_deconvolution_corr_min", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.8"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ms2_dda_rt_tolerance", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ms2_dda_rt_tolerance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.15"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ms2_dda_mz_tolerance", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ms2_dda_mz_tolerance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.05"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.ms2_min_fe_score", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.ms2_min_fe_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.2"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.search_as_lipids", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.search_as_lipids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.include_fragment_types", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.include_fragment_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.export_profile_spectra", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.export_profile_spectra", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.export_eics", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.export_eics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.export_unprocessed_ms1", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.export_unprocessed_ms1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.LiquidChromatographSetting.verbose_processing", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "LiquidChromatographSetting.verbose_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting", "kind": "class", "doc": "<p>Mass spectrum processing settings class</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>noise_threshold_method</strong> (str, optional):\nMethod for detecting noise threshold. Default is 'log'.</li>\n<li><strong>noise_threshold_methods_implemented</strong> (tuple, optional):\nMethods for detected noise threshold that can be implemented. Default is ('minima', 'signal_noise', 'relative_abundance', 'absolute_abundance', 'log').</li>\n<li><strong>noise_threshold_min_std</strong> (int, optional):\nMinumum value for noise thresholding when using 'minima' noise threshold method. Default is 6.</li>\n<li><strong>noise_threshold_min_s2n</strong> (float, optional):\nMinimum value for noise thresholding when using 'signal_noise' noise threshold method. Default is 4.</li>\n<li><strong>noise_threshold_min_relative_abundance</strong> (float, optional):\nMinimum value for noise thresholding when using 'relative_abundance' noise threshold method. Note that this is a percentage value. Default is 6 (6%).</li>\n<li><strong>noise_threshold_absolute_abundance</strong> (float, optional):\nMinimum value for noise thresholding when using 'absolute_abundance' noise threshold method. Default is 1_000_000.</li>\n<li><strong>noise_threshold_log_nsigma</strong> (int, optional):\nNumber of standard deviations to use when using 'log' noise threshold method. Default is 6.</li>\n<li><strong>noise_threshold_log_nsigma_corr_factor</strong> (float, optional):\nCorrection factor for log noise threshold method. Default is 0.463.</li>\n<li><strong>noise_threshold_log_nsigma_bins</strong> (int, optional):\nNumber of bins to use for histogram when using 'log' noise threshold method. Default is 500.</li>\n<li><strong>noise_min_mz</strong> (float, optional):\nMinimum m/z to use for noise thresholding. Default is 50.0.</li>\n<li><strong>noise_max_mz</strong> (float, optional):\nMaximum m/z to use for noise thresholding. Default is 1200.0.</li>\n<li><strong>min_picking_mz</strong> (float, optional):\nMinimum m/z to use for peak picking. Default is 50.0.</li>\n<li><strong>max_picking_mz</strong> (float, optional):\nMaximum m/z to use for peak picking. Default is 1200.0.</li>\n<li><strong>picking_point_extrapolate</strong> (int, optional):\nHow many data points (in each direction) to extrapolate the mz axis and 0 pad the abundance axis. Default is 3.\nRecommend 3 for reduced profile data or if peak picking faults</li>\n<li><strong>calib_minimize_method</strong> (str, optional):\nMinimization method to use for calibration. Default is 'Powell'.</li>\n<li><strong>calib_pol_order</strong> (int, optional):\nPolynomial order to use for calibration. Default is 2.</li>\n<li><strong>max_calib_ppm_error</strong> (float, optional):\nMaximum ppm error to use for calibration. Default is 1.0.</li>\n<li><strong>min_calib_ppm_error</strong> (float, optional):\nMinimum ppm error to use for calibration. Default is -1.0.</li>\n<li><strong>calib_sn_threshold</strong> (float, optional):\nSignal to noise threshold to use for calibration. Default is 2.0.</li>\n<li><strong>calibration_ref_match_method</strong> (string, optional):\nMethod for matching reference masses with measured masses for recalibration. Default is 'legacy'.</li>\n<li><strong>calibration_ref_match_tolerance</strong> (float, optional):\nIf using the new method for calibration reference mass matching, this tolerance is the initial matching tolerance. Default is 0.003</li>\n<li><strong>do_calibration</strong> (bool, optional):\nIf True, perform calibration. Default is True.</li>\n<li><strong>verbose_processing</strong> (bool, optional):\nIf True, print verbose processing information. Default is True.</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">noise_threshold_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_methods_implemented</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;minima&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;signal_noise&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;relative_abundance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;absolute_abundance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_min_std</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_min_s2n</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_min_relative_abundance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_absolute_abundance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_log_nsigma</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_log_nsigma_corr_factor</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.463</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_log_nsigma_bins</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">noise_min_mz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">50.0</span>,</span><span class=\"param\">\t<span class=\"n\">noise_max_mz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1200.0</span>,</span><span class=\"param\">\t<span class=\"n\">min_picking_mz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">50.0</span>,</span><span class=\"param\">\t<span class=\"n\">max_picking_mz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1200.0</span>,</span><span class=\"param\">\t<span class=\"n\">picking_point_extrapolate</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">calib_minimize_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Powell&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calib_pol_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">max_calib_ppm_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">min_calib_ppm_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">calib_sn_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_ref_match_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;legacy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_ref_match_method_implemented</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;legacy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;merged&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_ref_match_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.003</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_ref_match_std_raw_error_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span>,</span><span class=\"param\">\t<span class=\"n\">do_calibration</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verbose_processing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;log&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_methods_implemented", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_methods_implemented", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;minima&#x27;, &#x27;signal_noise&#x27;, &#x27;relative_abundance&#x27;, &#x27;absolute_abundance&#x27;, &#x27;log&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_min_std", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_min_std", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "6"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_min_s2n", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_min_s2n", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "4"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_min_relative_abundance", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_min_relative_abundance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "6"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_absolute_abundance", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_absolute_abundance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1000000"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_log_nsigma", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_log_nsigma", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "6"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_log_nsigma_corr_factor", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_log_nsigma_corr_factor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.463"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_threshold_log_nsigma_bins", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_threshold_log_nsigma_bins", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "500"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_min_mz", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_min_mz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "50.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.noise_max_mz", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.noise_max_mz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1200.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.min_picking_mz", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.min_picking_mz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "50.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.max_picking_mz", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.max_picking_mz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1200.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.picking_point_extrapolate", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.picking_point_extrapolate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.calib_minimize_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.calib_minimize_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;Powell&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.calib_pol_order", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.calib_pol_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "2"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.max_calib_ppm_error", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.max_calib_ppm_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.min_calib_ppm_error", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.min_calib_ppm_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-1.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.calib_sn_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.calib_sn_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "2.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.calibration_ref_match_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.calibration_ref_match_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;legacy&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.calibration_ref_match_method_implemented", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.calibration_ref_match_method_implemented", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;legacy&#x27;, &#x27;merged&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.calibration_ref_match_tolerance", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.calibration_ref_match_tolerance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.003"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.calibration_ref_match_std_raw_error_limit", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.calibration_ref_match_std_raw_error_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1.5"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.do_calibration", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.do_calibration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpectrumSetting.verbose_processing", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpectrumSetting.verbose_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting", "kind": "class", "doc": "<p>Mass spectrum peak processing settings class</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>kendrick_base</strong> (Dict, optional):\nDictionary specifying the elements and their counts in the Kendrick base.\nDefaults to {'C': 1, 'H': 2}.</li>\n<li><strong>kendrick_rounding_method</strong> (str, optional):\nMethod for calculating the nominal Kendrick mass. Valid values are 'floor', 'ceil', or 'round'.\nDefaults to 'floor'.</li>\n<li><strong>implemented_kendrick_rounding_methods</strong> (tuple):\nTuple of valid rounding methods for calculating the nominal Kendrick mass.\nDefaults to ('floor', 'ceil', 'round').</li>\n<li><strong>peak_derivative_threshold</strong> (float, optional):\nThreshold for defining derivative crossing. Should be a value between 0 and 1.\nDefaults to 0.0.</li>\n<li><strong>peak_min_prominence_percent</strong> (float, optional):\nMinimum prominence percentage used for peak detection. Should be a value between 1 and 100.\nDefaults to 0.1.</li>\n<li><strong>min_peak_datapoints</strong> (float, optional):\nMinimum number of data points used for peak detection. Should be a value between 0 and infinity.\nDefaults to 5.</li>\n<li><strong>peak_max_prominence_percent</strong> (float, optional):\nMaximum prominence percentage used for baseline detection. Should be a value between 1 and 100.\nDefaults to 0.1.</li>\n<li><strong>peak_height_max_percent</strong> (float, optional):\nMaximum height percentage used for baseline detection. Should be a value between 1 and 100.\nDefaults to 10.</li>\n<li><strong>legacy_resolving_power</strong> (bool, optional):\nFlag indicating whether to use the legacy (CoreMS v1) resolving power calculation.\nDefaults to True.</li>\n<li><strong>legacy_centroid_polyfit</strong> (bool, optional):\nUse legacy (numpy polyfit) to fit centroid\nDefault false.</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">kendrick_base</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">kendrick_rounding_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;floor&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">implemented_kendrick_rounding_methods</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;floor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ceil&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;round&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">peak_derivative_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">peak_min_prominence_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_datapoints</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">peak_max_prominence_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height_max_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">legacy_resolving_power</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">legacy_centroid_polyfit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.kendrick_base", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.kendrick_base", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.kendrick_rounding_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.kendrick_rounding_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;floor&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.implemented_kendrick_rounding_methods", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.implemented_kendrick_rounding_methods", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;floor&#x27;, &#x27;ceil&#x27;, &#x27;round&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.peak_derivative_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.peak_derivative_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.peak_min_prominence_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.peak_min_prominence_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.min_peak_datapoints", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.min_peak_datapoints", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "5"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.peak_max_prominence_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.peak_max_prominence_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.peak_height_max_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.peak_height_max_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "10"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.legacy_resolving_power", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.legacy_resolving_power", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.MassSpecPeakSetting.legacy_centroid_polyfit", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MassSpecPeakSetting.legacy_centroid_polyfit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting", "kind": "class", "doc": "<p>Gas chromatograph processing settings class</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>use_deconvolution</strong> (bool, optional):\nIf True, use deconvolution. Default is False.</li>\n<li><strong>implemented_smooth_method</strong> (tuple, optional):\nSmoothing methods that can be implemented. Default is ('savgol', 'hanning', 'blackman', 'bartlett', 'flat', 'boxcar').</li>\n<li><strong>smooth_window</strong> (int, optional):\nWindow size for smoothing the ion chromatogram. Default is 5.</li>\n<li><strong>smooth_method</strong> (str, optional):\nSmoothing method to use. Default is 'savgol'. Other options are 'hanning', 'blackman', 'bartlett', 'flat', 'boxcar'.</li>\n<li><strong>savgol_pol_order</strong> (int, optional):\nPolynomial order for Savitzky-Golay smoothing. Default is 2.</li>\n<li><strong>peak_derivative_threshold</strong> (float, optional):\nThreshold for defining derivative crossing. Should be a value between 0 and 1.\nDefaults to 0.0005.</li>\n<li><strong>peak_height_max_percent</strong> (float, optional):\nMaximum height percentage used for baseline detection. Should be a value between 1 and 100.\nDefaults to 10.</li>\n<li><strong>peak_max_prominence_percent</strong> (float, optional):\nMaximum prominence percentage used for baseline detection. Should be a value between 1 and 100.\nDefaults to 1.</li>\n<li><strong>min_peak_datapoints</strong> (float, optional):\nMinimum number of data points used for peak detection. Should be a value between 0 and infinity.\nDefaults to 5.</li>\n<li><strong>max_peak_width</strong> (float, optional):\nMaximum peak width used for peak detection. Should be a value between 0 and infinity.\nDefaults to 0.1.</li>\n<li><strong>noise_threshold_method</strong> (str, optional):\nMethod for detecting noise threshold. Default is 'manual_relative_abundance'.</li>\n<li><strong>noise_threshold_methods_implemented</strong> (tuple, optional):\nMethods for detected noise threshold that can be implemented. Default is ('auto_relative_abundance', 'manual_relative_abundance', 'second_derivative').</li>\n<li><strong>std_noise_threshold</strong> (int, optional):\nDefault is 3.</li>\n<li><strong>peak_height_min_percent</strong> (float, optional):\n0-100 % used for peak detection. Default is 0.1.</li>\n<li><strong>peak_min_prominence_percent</strong> (float, optional):\n0-100 % used for peak detection. Default is 0.1.</li>\n<li><strong>eic_signal_threshold</strong> (float, optional):\n0-100 % used for extracted ion chromatogram peak detection. Default is 0.01.</li>\n<li><strong>max_rt_distance</strong> (float, optional):\nMaximum distance allowance for hierarchical cluster, in minutes. Default is 0.025.</li>\n<li><strong>verbose_processing</strong> (bool, optional):\nIf True, print verbose processing information. Default is True.</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">use_deconvolution</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">implemented_smooth_method</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;savgol&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hanning&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;blackman&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bartlett&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;boxcar&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;savgol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">savgol_pol_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">peak_derivative_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0005</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height_max_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">peak_max_prominence_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_datapoints</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">max_peak_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;manual_relative_abundance&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold_methods_implemented</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;auto_relative_abundance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;manual_relative_abundance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;second_derivative&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">std_noise_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height_min_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">peak_min_prominence_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">eic_signal_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">max_rt_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.025</span>,</span><span class=\"param\">\t<span class=\"n\">verbose_processing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.use_deconvolution", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.use_deconvolution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.implemented_smooth_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.implemented_smooth_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;savgol&#x27;, &#x27;hanning&#x27;, &#x27;blackman&#x27;, &#x27;bartlett&#x27;, &#x27;flat&#x27;, &#x27;boxcar&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.smooth_window", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.smooth_window", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.smooth_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.smooth_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;savgol&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.savgol_pol_order", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.savgol_pol_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "2"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.peak_derivative_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.peak_derivative_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0005"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.peak_height_max_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.peak_height_max_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "10"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.peak_max_prominence_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.peak_max_prominence_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.min_peak_datapoints", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.min_peak_datapoints", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "5"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.max_peak_width", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.max_peak_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.noise_threshold_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.noise_threshold_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;manual_relative_abundance&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.noise_threshold_methods_implemented", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.noise_threshold_methods_implemented", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;auto_relative_abundance&#x27;, &#x27;manual_relative_abundance&#x27;, &#x27;second_derivative&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.std_noise_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.std_noise_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.peak_height_min_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.peak_height_min_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.peak_min_prominence_percent", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.peak_min_prominence_percent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.eic_signal_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.eic_signal_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.01"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.max_rt_distance", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.max_rt_distance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.025"}, {"fullname": "corems.encapsulation.factory.processingSetting.GasChromatographSetting.verbose_processing", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "GasChromatographSetting.verbose_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings", "kind": "class", "doc": "<p>Settings for compound search</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>url_database</strong> (str, optional):\nURL for the database. Default is 'sqlite:///db/pnnl_lowres_gcms_compounds.sqlite'.</li>\n<li><strong>ri_search_range</strong> (float, optional):\nRetention index search range. Default is 35.</li>\n<li><strong>rt_search_range</strong> (float, optional):\nRetention time search range, in minutes. Default is 1.0.</li>\n<li><strong>correlation_threshold</strong> (float, optional):\nThreshold for correlation for spectral similarity. Default is 0.5.</li>\n<li><strong>score_threshold</strong> (float, optional):\nThreshold for compsite score. Default is 0.0.</li>\n<li><strong>ri_spacing</strong> (float, optional):\nRetention index spacing. Default is 200.</li>\n<li><strong>ri_std</strong> (float, optional):\nRetention index standard deviation. Default is 3.</li>\n<li><strong>ri_calibration_compound_names</strong> (list, optional):\nList of compound names to use for retention index calibration. Default is ['Methyl Caprylate', 'Methyl Caprate', 'Methyl Pelargonate', 'Methyl Laurate', 'Methyl Myristate', 'Methyl Palmitate', 'Methyl Stearate', 'Methyl Eicosanoate', 'Methyl Docosanoate', 'Methyl Linocerate', 'Methyl Hexacosanoate', 'Methyl Octacosanoate', 'Methyl Triacontanoate'].</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/lowres&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ri_search_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">35</span>,</span><span class=\"param\">\t<span class=\"n\">rt_search_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">correlation_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">score_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">ri_spacing</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">ri_std</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">ri_calibration_compound_names</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">exploratory_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">score_methods</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;highest_sim_score&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;highest_ss&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">output_score_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;All&#39;</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.url_database", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.url_database", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/lowres&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.ri_search_range", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.ri_search_range", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "35"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.rt_search_range", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.rt_search_range", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.correlation_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.correlation_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.5"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.score_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.score_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.ri_spacing", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.ri_spacing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "200"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.ri_std", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.ri_std", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "3"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.ri_calibration_compound_names", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.ri_calibration_compound_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.exploratory_mode", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.exploratory_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.score_methods", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.score_methods", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;highest_sim_score&#x27;, &#x27;highest_ss&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.CompoundSearchSettings.output_score_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "CompoundSearchSettings.output_score_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;All&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings", "kind": "class", "doc": "<p>Settings for molecular searching</p>\n\n<p>These are used to generate the database entries, do not change.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>usedAtoms</strong> (dict, optional):\nDictionary of atoms and ranges. Default is {'C': (1, 90), 'H': (4, 200), 'O': (0, 12), 'N': (0, 0), 'S': (0, 0), 'P': (0, 0), 'Cl': (0, 0)}.</li>\n<li><strong>min_mz</strong> (float, optional):\nMinimum m/z to use for searching. Default is 50.0.</li>\n<li><strong>max_mz</strong> (float, optional):\nMaximum m/z to use for searching. Default is 1200.0.</li>\n<li><strong>min_dbe</strong> (float, optional):\nMinimum double bond equivalent to use for searching. Default is 0.</li>\n<li><strong>max_dbe</strong> (float, optional):\nMaximum double bond equivalent to use for searching. Default is 50.</li>\n<li><strong>use_pah_line_rule</strong> (bool, optional):\nIf True, use the PAH line rule. Default is False.</li>\n<li><strong>isRadical</strong> (bool, optional):\nIf True, search for radical ions. Default is True.</li>\n<li><strong>isProtonated</strong> (bool, optional):\nIf True, search for protonated ions. Default is True.</li>\n<li><strong>url_database</strong> (str, optional):\nURL for the database. Default is None.</li>\n<li><strong>db_jobs</strong> (int, optional):\nNumber of jobs to use for database queries. Default is 1.</li>\n<li><strong>used_atom_valences</strong> (dict, optional):\nDictionary of atoms and valences. Default is {'C': 4, '13C': 4, 'H': 1, 'O': 2, '18O': 2, 'N': 3, 'S': 2, '34S': 2, 'P': 3, 'Cl': 1, '37Cl': 1, 'Br': 1, 'Na': 1, 'F': 1, 'K': 0}.</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.usedAtoms", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.usedAtoms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.min_mz", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.min_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.max_mz", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.max_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.min_dbe", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.min_dbe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.max_dbe", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.max_dbe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.use_pah_line_rule", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.use_pah_line_rule", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.isRadical", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.isRadical", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.isProtonated", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.isProtonated", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.url_database", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.url_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.db_jobs", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.db_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularLookupDictSettings.used_atom_valences", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularLookupDictSettings.used_atom_valences", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings", "kind": "class", "doc": "<p>Settings for molecular searching</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>use_isotopologue_filter</strong> (bool, optional):\nIf True, use isotopologue filter. Default is False.</li>\n<li><strong>isotopologue_filter_threshold</strong> (float, optional):\nThreshold for isotopologue filter. Default is 33.</li>\n<li><strong>isotopologue_filter_atoms</strong> (tuple, optional):\nTuple of atoms to use for isotopologue filter. Default is ('Cl', 'Br').</li>\n<li><strong>use_runtime_kendrick_filter</strong> (bool, optional):\nIf True, use runtime Kendrick filter. Default is False.</li>\n<li><strong>use_min_peaks_filter</strong> (bool, optional):\nIf True, use minimum peaks filter. Default is True.</li>\n<li><strong>min_peaks_per_class</strong> (int, optional):\nMinimum number of peaks per class. Default is 15.</li>\n<li><strong>url_database</strong> (str, optional):\nURL for the database. Default is 'postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/coremsapp'.</li>\n<li><strong>db_jobs</strong> (int, optional):\nNumber of jobs to use for database queries. Default is 3.</li>\n<li><strong>db_chunk_size</strong> (int, optional):\nChunk size to use for database queries. Default is 300.</li>\n<li><strong>ion_charge</strong> (int, optional):\nIon charge. Default is -1.</li>\n<li><strong>min_hc_filter</strong> (float, optional):\nMinimum hydrogen to carbon ratio. Default is 0.3.</li>\n<li><strong>max_hc_filter</strong> (float, optional):\nMaximum hydrogen to carbon ratio. Default is 3.</li>\n<li><strong>min_oc_filter</strong> (float, optional):\nMinimum oxygen to carbon ratio. Default is 0.0.</li>\n<li><strong>max_oc_filter</strong> (float, optional):\nMaximum oxygen to carbon ratio. Default is 1.2.</li>\n<li><strong>min_op_filter</strong> (float, optional):\nMinimum oxygen to phosphorous ratio. Default is 2.</li>\n<li><strong>use_pah_line_rule</strong> (bool, optional):\nIf True, use the PAH line rule. Default is False.</li>\n<li><strong>min_dbe</strong> (float, optional):\nMinimum double bond equivalent to use for searching. Default is 0.</li>\n<li><strong>max_dbe</strong> (float, optional):\nMaximum double bond equivalent to use for searching. Default is 40.</li>\n<li><strong>mz_error_score_weight</strong> (float, optional):\nWeight for m/z error score to contribute to composite score. Default is 0.6.</li>\n<li><strong>isotopologue_score_weight</strong> (float, optional):\nWeight for isotopologue score to contribute to composite score. Default is 0.4.</li>\n<li><strong>adduct_atoms_neg</strong> (tuple, optional):\nTuple of atoms to use in negative polarity. Default is ('Cl', 'Br').</li>\n<li><strong>adduct_atoms_pos</strong> (tuple, optional):\nTuple of atoms to use in positive polarity. Default is ('Na', 'K').</li>\n<li><strong>score_methods</strong> (tuple, optional):\nTuple of score method that can be implemented.\nDefault is ('S_P_lowest_error', 'N_S_P_lowest_error', 'lowest_error', 'prob_score', 'air_filter_error', 'water_filter_error', 'earth_filter_error').</li>\n<li><strong>score_method</strong> (str, optional):\nScore method to use. Default is 'prob_score'. Options are 'S_P_lowest_error', 'N_S_P_lowest_error', 'lowest_error', 'prob_score', 'air_filter_error', 'water_filter_error', 'earth_filter_error'.</li>\n<li><strong>output_min_score</strong> (float, optional):\nMinimum score for output. Default is 0.1.</li>\n<li><strong>output_score_method</strong> (str, optional):\nScore method to use for output. Default is 'All Candidates'.</li>\n<li><strong>isRadical</strong> (bool, optional):\nIf True, search for radical ions. Default is False.</li>\n<li><strong>isProtonated</strong> (bool, optional):\nIf True, search for protonated ions. Default is True.</li>\n<li><strong>isAdduct</strong> (bool, optional):\nIf True, search for adduct ions. Default is False.</li>\n<li><strong>usedAtoms</strong> (dict, optional):\nDictionary of atoms and ranges. Default is {'C': (1, 90), 'H': (4, 200), 'O': (0, 12), 'N': (0, 0), 'S': (0, 0), 'P': (0, 0), 'Cl': (0, 0)}.</li>\n<li><strong>ion_types_excluded</strong> (list, optional):\nList of ion types to exclude from molecular id search, commonly ['[M+CH3COO]-]'] or ['[M+COOH]-'] depending on mobile phase content. Default is [].</li>\n<li><strong>ionization_type</strong> (str, optional):\nIonization type. Default is 'ESI'.</li>\n<li><strong>min_ppm_error</strong> (float, optional):\nMinimum ppm error. Default is -10.0.</li>\n<li><strong>max_ppm_error</strong> (float, optional):\nMaximum ppm error. Default is 10.0.</li>\n<li><strong>min_abun_error</strong> (float, optional):\nMinimum abundance error for isotolopologue search. Default is -100.0.</li>\n<li><strong>max_abun_error</strong> (float, optional):\nMaximum abundance error for isotolopologue search. Default is 100.0.</li>\n<li><strong>mz_error_range</strong> (float, optional):\nm/z error range. Default is 1.5.</li>\n<li><strong>error_method</strong> (str, optional):\nError method. Default is 'None'. Options are 'distance', 'lowest', 'symmetrical','average' 'None'.</li>\n<li><strong>mz_error_average</strong> (float, optional):\nm/z error average. Default is 0.0.</li>\n<li><strong>used_atom_valences</strong> (dict, optional):\nDictionary of atoms and valences. Default is {'C': 4, '13C': 4, 'H': 1, 'O': 2, '18O': 2, 'N': 3, 'S': 2, '34S': 2, 'P': 3, 'Cl': 1, '37Cl': 1, 'Br': 1, 'Na': 1, 'F': 1, 'K': 0}.</li>\n<li><strong>verbose_processing</strong> (bool, optional):\nIf True, print verbose processing information. Default is True.</li>\n</ul>\n"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.__init__", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose_processing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_isotopologue_filter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">isotopologue_filter_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">33</span>,</span><span class=\"param\">\t<span class=\"n\">isotopologue_filter_atoms</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Cl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Br&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">use_runtime_kendrick_filter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_min_peaks_filter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">min_peaks_per_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">url_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/coremsapp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_jobs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">db_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">min_hc_filter</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">max_hc_filter</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">min_oc_filter</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">max_oc_filter</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>,</span><span class=\"param\">\t<span class=\"n\">min_op_filter</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">use_pah_line_rule</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">min_dbe</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">max_dbe</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">mz_error_score_weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.6</span>,</span><span class=\"param\">\t<span class=\"n\">isotopologue_score_weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atoms_neg</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Cl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Br&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atoms_pos</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Na&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">score_methods</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;S_P_lowest_error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;N_S_P_lowest_error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lowest_error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;prob_score&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;air_filter_error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;water_filter_error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;earth_filter_error&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">score_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;prob_score&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_min_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">output_score_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;All Candidates&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">isRadical</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">isProtonated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">isAdduct</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">usedAtoms</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ion_types_excluded</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ionization_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ESI&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">min_ppm_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">max_ppm_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">min_abun_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">100.0</span>,</span><span class=\"param\">\t<span class=\"n\">max_abun_error</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span>,</span><span class=\"param\">\t<span class=\"n\">mz_error_range</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span>,</span><span class=\"param\">\t<span class=\"n\">error_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;None&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mz_error_average</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">used_atom_valences</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.verbose_processing", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.verbose_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.use_isotopologue_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.use_isotopologue_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.isotopologue_filter_threshold", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.isotopologue_filter_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "33"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.isotopologue_filter_atoms", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.isotopologue_filter_atoms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;Cl&#x27;, &#x27;Br&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.use_runtime_kendrick_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.use_runtime_kendrick_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.use_min_peaks_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.use_min_peaks_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.min_peaks_per_class", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.min_peaks_per_class", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "15"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.url_database", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.url_database", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;postgresql+psycopg2://coremsappdb:coremsapppnnl@localhost:5432/coremsapp&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.db_jobs", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.db_jobs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.db_chunk_size", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.db_chunk_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.ion_charge", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.ion_charge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "-1"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.min_hc_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.min_hc_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.3"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.max_hc_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.max_hc_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "3"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.min_oc_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.min_oc_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.max_oc_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.max_oc_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1.2"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.min_op_filter", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.min_op_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "2"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.use_pah_line_rule", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.use_pah_line_rule", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.min_dbe", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.min_dbe", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.max_dbe", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.max_dbe", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "40"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.mz_error_score_weight", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.mz_error_score_weight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.6"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.isotopologue_score_weight", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.isotopologue_score_weight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.4"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.adduct_atoms_neg", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.adduct_atoms_neg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;Cl&#x27;, &#x27;Br&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.adduct_atoms_pos", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.adduct_atoms_pos", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;Na&#x27;, &#x27;K&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.score_methods", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.score_methods", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;S_P_lowest_error&#x27;, &#x27;N_S_P_lowest_error&#x27;, &#x27;lowest_error&#x27;, &#x27;prob_score&#x27;, &#x27;air_filter_error&#x27;, &#x27;water_filter_error&#x27;, &#x27;earth_filter_error&#x27;)"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.score_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.score_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;prob_score&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.output_min_score", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.output_min_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.output_score_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.output_score_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;All Candidates&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.isRadical", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.isRadical", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.isProtonated", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.isProtonated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.isAdduct", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.isAdduct", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.usedAtoms", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.usedAtoms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.ion_types_excluded", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.ion_types_excluded", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.ionization_type", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.ionization_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;ESI&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.min_ppm_error", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.min_ppm_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-10.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.max_ppm_error", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.max_ppm_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "10.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.min_abun_error", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.min_abun_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-100.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.max_abun_error", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.max_abun_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "100.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.mz_error_range", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.mz_error_range", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1.5"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.error_method", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.error_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;None&#x27;"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.mz_error_average", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.mz_error_average", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "corems.encapsulation.factory.processingSetting.MolecularFormulaSearchSettings.used_atom_valences", "modulename": "corems.encapsulation.factory.processingSetting", "qualname": "MolecularFormulaSearchSettings.used_atom_valences", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "corems.encapsulation.input", "modulename": "corems.encapsulation.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.input.parameter_from_json", "modulename": "corems.encapsulation.input.parameter_from_json", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_toml_parameters_ms", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_toml_parameters_ms", "kind": "function", "doc": "<p>Load parameters from a toml file and set the parameters in the mass_spec_obj</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spec_obj</strong> (MassSpectrum):\ncorems MassSpectrum object</li>\n<li><strong>parameters_path</strong> (str, optional):\npath to the parameters file, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass_spec_obj</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_parameters_ms", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_parameters_ms", "kind": "function", "doc": "<p>Load parameters from a json file and set the parameters in the mass_spec_obj</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spec_obj</strong> (MassSpectrum):\ncorems MassSpectrum object</li>\n<li><strong>parameters_path</strong> (str, optional):\npath to the parameters file, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass_spec_obj</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_toml_parameters_gcms", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_toml_parameters_gcms", "kind": "function", "doc": "<p>Load parameters from a toml file and set the parameters in the GCMS object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gcms_obj</strong> (GCMSBase):\ncorems GCMSBase object</li>\n<li><strong>parameters_path</strong> (str, optional):\npath to the parameters file, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gcms_obj</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_parameters_gcms", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_parameters_gcms", "kind": "function", "doc": "<p>Load parameters from a json file and set the parameters in the GCMS object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gcms_obj</strong> (GCMSBase):\ncorems GCMSBase object</li>\n<li><strong>parameters_path</strong> (str, optional):\npath to the parameters file, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gcms_obj</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_json_parameters_lcms", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_json_parameters_lcms", "kind": "function", "doc": "<p>Load parameters from a json file and set the parameters in the LCMS object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcms_obj</strong> (LCMSBase):\ncorems LCMSBase object</li>\n<li><strong>parameters_path</strong> (str):\npath to the parameters file saved as a .json, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lcms_obj</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_toml_parameters_lcms", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_toml_parameters_lcms", "kind": "function", "doc": "<p>Load parameters from a toml file and set the parameters in the LCMS object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcms_obj</strong> (LCMSBase):\ncorems LCMSBase object</li>\n<li><strong>parameters_path</strong> (str):\npath to the parameters file saved as a .toml, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lcms_obj</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_toml_parameters_class", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_toml_parameters_class", "kind": "function", "doc": "<p>Load parameters from a toml file and set the parameters in the instance_parameters_class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parameter_label</strong> (str):\nlabel of the parameters in the toml file</li>\n<li><strong>instance_parameters_class</strong> (object):\ninstance of the parameters class</li>\n<li><strong>parameters_path</strong> (str, optional):\npath to the parameters file, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: instance of the parameters class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameter_label</span>, </span><span class=\"param\"><span class=\"n\">instance_parameters_class</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.input.parameter_from_json.load_and_set_parameters_class", "modulename": "corems.encapsulation.input.parameter_from_json", "qualname": "load_and_set_parameters_class", "kind": "function", "doc": "<p>Load parameters from a json file and set the parameters in the instance_parameters_class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parameter_label</strong> (str):\nlabel of the parameters in the json file</li>\n<li><strong>instance_parameters_class</strong> (object):\ninstance of the parameters class</li>\n<li><strong>parameters_path</strong> (str, optional):\npath to the parameters file, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: if the file is not found</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: instance of the parameters class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameter_label</span>, </span><span class=\"param\"><span class=\"n\">instance_parameters_class</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output", "modulename": "corems.encapsulation.output", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.output.parameter_to_dict", "modulename": "corems.encapsulation.output.parameter_to_dict", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.output.parameter_to_dict.get_dict_all_default_data", "modulename": "corems.encapsulation.output.parameter_to_dict", "qualname": "get_dict_all_default_data", "kind": "function", "doc": "<p>Return a dictionary with all default parameters for MS and GCMS</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_dict.get_dict_data_lcms", "modulename": "corems.encapsulation.output.parameter_to_dict", "qualname": "get_dict_data_lcms", "kind": "function", "doc": "<p>Return a dictionary with all parameters for LCMSBase object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcms_obj</strong> (LCMSBase):\nLCMSBase object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: dictionary with all parameters for LCMSBase object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lcms_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_dict.get_dict_lcms_default_data", "modulename": "corems.encapsulation.output.parameter_to_dict", "qualname": "get_dict_lcms_default_data", "kind": "function", "doc": "<p>Return a dictionary with all default parameters for LCMS</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_dict.get_dict_data_ms", "modulename": "corems.encapsulation.output.parameter_to_dict", "qualname": "get_dict_data_ms", "kind": "function", "doc": "<p>Return a dictionary with all parameters for MassSpectrum object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spec</strong> (MassSpectrum):\nMassSpectrum object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: dictionary with all parameters for MassSpectrum object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass_spec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_dict.get_dict_ms_default_data", "modulename": "corems.encapsulation.output.parameter_to_dict", "qualname": "get_dict_ms_default_data", "kind": "function", "doc": "<p>Return a dictionary with all default parameters for MS including data input</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_dict.get_dict_gcms_default_data", "modulename": "corems.encapsulation.output.parameter_to_dict", "qualname": "get_dict_gcms_default_data", "kind": "function", "doc": "<p>Return a dictionary with all default parameters for GCMS</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_dict.get_dict_data_gcms", "modulename": "corems.encapsulation.output.parameter_to_dict", "qualname": "get_dict_data_gcms", "kind": "function", "doc": "<p>Return a dictionary with all parameters for GCMS</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gcms</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json", "modulename": "corems.encapsulation.output.parameter_to_json", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_all_settings_json", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_all_settings_json", "kind": "function", "doc": "<p>Write JSON file into current directory with all the default settings for the CoreMS package.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>filename : str, optional\n    The name of the JSON file to be created. Default is 'SettingsCoreMS.json'.\nfile_path : str or Path, optional\n    The path where the JSON file will be saved. If not provided, the file will be saved in the current working directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.json&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_ms_settings_json", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_ms_settings_json", "kind": "function", "doc": "<p>Write JSON file into current directory with all the mass spectrum default settings for the CoreMS package.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str, optional):\nThe name of the JSON file to be created. Default is 'SettingsCoreMS.json'.</li>\n<li><strong>file_path</strong> (str or Path, optional):\nThe path where the JSON file will be saved. If not provided, the file will be saved in the current working directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.json&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_gcms_settings_json", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_gcms_settings_json", "kind": "function", "doc": "<p>Write JSON file into current directory containing the default GCMS settings data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str, optional):\nThe name of the JSON file to be created. Default is 'SettingsCoreMS.json'.</li>\n<li><strong>file_path</strong> (str or Path-like object, optional):\nThe path where the JSON file will be saved. If not provided, the file will be saved in the current working directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.json&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_all_settings_toml", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_all_settings_toml", "kind": "function", "doc": "<p>Write TOML file into the specified file path or the current directory with all the default settings for the CoreMS package.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str, optional):\nThe name of the TOML file. Defaults to 'SettingsCoreMS.toml'.</li>\n<li><strong>file_path</strong> (str or Path, optional):\nThe path where the TOML file will be saved. If not provided, the file will be saved in the current directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.toml&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_ms_settings_toml", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_ms_settings_toml", "kind": "function", "doc": "<p>Write TOML file into the current directory with all the mass spectrum default settings for the CoreMS package.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str, optional):\nThe name of the TOML file to be created. Default is 'SettingsCoreMS.toml'.</li>\n<li><strong>file_path</strong> (str or Path, optional):\nThe path where the TOML file should be saved. If not provided, the file will be saved in the current working directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.toml&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_gcms_settings_toml", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_gcms_settings_toml", "kind": "function", "doc": "<p>Write TOML file into current directory containing the default GCMS settings data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str, optional):\nThe name of the TOML file. Defaults to 'SettingsCoreMS.toml'.</li>\n<li><strong>file_path</strong> (str or Path, optional):\nThe path where the TOML file will be saved. If not provided, the file will be saved in the current working directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.toml&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_lcms_settings_json", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_lcms_settings_json", "kind": "function", "doc": "<p>Write JSON file into current directory with all the LCMS settings data for the CoreMS package.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str, optional):\nThe name of the JSON file. Defaults to 'SettingsCoreMS.json'.</li>\n<li><strong>file_path</strong> (str or Path, optional):\nThe path where the JSON file will be saved. If not provided, the file will be saved in the current working directory.</li>\n<li><strong>lcms_obj</strong> (object, optional):\nThe LCMS object containing the settings data. If not provided, the settings data will be retrieved from the default settings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.json&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">lcms_obj</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.encapsulation.output.parameter_to_json.dump_lcms_settings_toml", "modulename": "corems.encapsulation.output.parameter_to_json", "qualname": "dump_lcms_settings_toml", "kind": "function", "doc": "<p>Write TOML file into current directory with all the LCMS settings data for the CoreMS package.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str, optional):\nThe name of the TOML file. Defaults to 'SettingsCoreMS.toml'.</li>\n<li><strong>file_path</strong> (str or Path, optional):\nThe path where the TOML file will be saved. If not provided, the file will be saved in the current working directory.</li>\n<li><strong>lcms_obj</strong> (object, optional):\nThe LCMS object containing the settings data. If not provided, the settings data will be retrieved from the default settings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;SettingsCoreMS.toml&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">lcms_obj</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra", "modulename": "corems.mass_spectra", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc", "modulename": "corems.mass_spectra.calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.GC_Calc", "modulename": "corems.mass_spectra.calc.GC_Calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.GC_Calc.GC_Calculations", "modulename": "corems.mass_spectra.calc.GC_Calc", "qualname": "GC_Calculations", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.GC_Calc.GC_Calculations.calibrate_ri", "modulename": "corems.mass_spectra.calc.GC_Calc", "qualname": "GC_Calculations.calibrate_ri", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ref_dict</span>, </span><span class=\"param\"><span class=\"n\">cal_file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Calc.GC_Calculations.smooth_tic", "modulename": "corems.mass_spectra.calc.GC_Calc", "qualname": "GC_Calculations.smooth_tic", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tic</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Calc.GC_Calculations.centroid_detector", "modulename": "corems.mass_spectra.calc.GC_Calc", "qualname": "GC_Calculations.centroid_detector", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tic</span>, </span><span class=\"param\"><span class=\"n\">rt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Calc.GC_Calculations.remove_outliers", "modulename": "corems.mass_spectra.calc.GC_Calc", "qualname": "GC_Calculations.remove_outliers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.run_deconvolution", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.run_deconvolution", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plot_res</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.centroid_detector", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.centroid_detector", "kind": "function", "doc": "<p>this function has been replaced with sp.peak_picking_first_derivative\nand it not used</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tic</span>, </span><span class=\"param\"><span class=\"n\">rt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.ion_extracted_chroma", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.ion_extracted_chroma", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.hc", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.hc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">max_rt_distance</span><span class=\"o\">=</span><span class=\"mf\">0.025</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.find_peaks_entity", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.find_peaks_entity", "kind": "function", "doc": "<p>combine eic with mathing rt apexes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">eic_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.mass_spec_factory", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.mass_spec_factory", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rt</span>, </span><span class=\"param\"><span class=\"n\">datadict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.smooth_signal", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.smooth_signal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">signal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.add_gcpeak", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.add_gcpeak", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_apex_index</span>,</span><span class=\"param\">\t<span class=\"n\">start_rt</span>,</span><span class=\"param\">\t<span class=\"n\">final_rt</span>,</span><span class=\"param\">\t<span class=\"n\">peak_rt</span>,</span><span class=\"param\">\t<span class=\"n\">smoothed_tic</span>,</span><span class=\"param\">\t<span class=\"n\">datadict</span>,</span><span class=\"param\">\t<span class=\"n\">plot_res</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.deconvolution", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.deconvolution", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">peaks_entity_data</span>, </span><span class=\"param\"><span class=\"n\">plot_res</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution.quadratic_interpolation", "modulename": "corems.mass_spectra.calc.GC_Deconvolution", "qualname": "MassDeconvolution.quadratic_interpolation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rt_list</span>, </span><span class=\"param\"><span class=\"n\">tic_list</span>, </span><span class=\"param\"><span class=\"n\">apex_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.GC_RI_Calibration", "modulename": "corems.mass_spectra.calc.GC_RI_Calibration", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.GC_RI_Calibration.get_rt_ri_pairs", "modulename": "corems.mass_spectra.calc.GC_RI_Calibration", "qualname": "get_rt_ri_pairs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gcms_ref_obj</span>, </span><span class=\"param\"><span class=\"n\">sql_obj</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.MZSearch", "modulename": "corems.mass_spectra.calc.MZSearch", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.SearchResults", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "SearchResults", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.SearchResults.__init__", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "SearchResults.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">calculated_mz</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">exp_mz</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "corems.mass_spectra.calc.MZSearch.SearchResults.calculated_mz", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "SearchResults.calculated_mz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "corems.mass_spectra.calc.MZSearch.SearchResults.exp_mz", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "SearchResults.exp_mz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "corems.mass_spectra.calc.MZSearch.SearchResults.error", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "SearchResults.error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "corems.mass_spectra.calc.MZSearch.SearchResults.tolerance", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "SearchResults.tolerance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch", "kind": "class", "doc": "<p>A class that represents a thread of control.</p>\n\n<p>This class can be safely subclassed in a limited fashion. There are two ways\nto specify the activity: by passing a callable object to the constructor, or\nby overriding the run() method in a subclass.</p>\n", "bases": "threading.Thread"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.__init__", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>calculated_mzs</strong> ([float] calculated m/z):</p></li>\n<li><p><strong>exp_mzs</strong> ([float] experimental m/z):</p></li>\n<li><p><strong>method</strong> (string,):\nppm or ppb</p></li>\n<li><strong>call run to trigger the m/z search algorithm</strong></li>\n<li><strong>or start if using it as thread</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exp_mzs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">calculated_mzs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;ppm&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">average_target_mz</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.method", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.method", "kind": "variable", "doc": "<p>method: string,\n   ppm or ppb</p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.results", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.results", "kind": "variable", "doc": "<p>{calculated_mz: [SearchResults]}\ncontains the results of the search</p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.averaged_target_mz", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.averaged_target_mz", "kind": "variable", "doc": "<p>[float]\ncontains the average target m/z to be searched against</p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.calculated_mzs", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.calculated_mzs", "kind": "variable", "doc": "<p>[float]\ncontains the mz target to be searched against</p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.exp_mzs", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.exp_mzs", "kind": "variable", "doc": "<p>[float]\ncontains the exp mz to be searched against</p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.tolerance", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.tolerance", "kind": "variable", "doc": "<p>method: string,\n   ppm or ppb</p>\n"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.colapse_calculated", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.colapse_calculated", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.run", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.run", "kind": "function", "doc": "<p>Method representing the thread's activity.</p>\n\n<p>You may override this method in a subclass. The standard run() method\ninvokes the callable object passed to the object's constructor as the\ntarget argument, if any, with sequential and keyword arguments taken\nfrom the args and kwargs arguments, respectively.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.calc_mz_error", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.calc_mz_error", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>calculated_mz</strong> (float,):</p></li>\n<li><p><strong>exp_mz</strong> (float):</p></li>\n<li><p><strong>method</strong> (string,):\nppm or ppb</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">calculated_mz</span>, </span><span class=\"param\"><span class=\"n\">exp_mz</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;ppm&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.check_ppm_error", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.check_ppm_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tolerance</span>, </span><span class=\"param\"><span class=\"n\">error</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.get_nominal_exp", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.get_nominal_exp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exp_mzs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.MZSearch.MZSearch.search_mz", "modulename": "corems.mass_spectra.calc.MZSearch", "qualname": "MZSearch.search_mz", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">results</span>, </span><span class=\"param\"><span class=\"n\">dict_nominal_exp_mz</span>, </span><span class=\"param\"><span class=\"n\">calculated_mz</span>, </span><span class=\"param\"><span class=\"n\">offset</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing", "modulename": "corems.mass_spectra.calc.SignalProcessing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.peak_detector", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "peak_detector", "kind": "function", "doc": "<p>Find peaks by detecting minima in the first derivative of the data\nUsed in LC/GC data processing</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tic</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>max_tic</strong> (float):\nmaximum value of the data points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: tuple of indexes of the start, apex and final points of the peak</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tic</span>, </span><span class=\"param\"><span class=\"n\">max_tic</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.find_nearest_scan", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "find_nearest_scan", "kind": "function", "doc": "<p>Find nearest data point in a list of nodes (derivated data)\nin LC/GC this is 'scan', in MS this is 'm/z' data point</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (float):\ndata point to find the nearest node</li>\n<li><strong>nodes</strong> (array):\narray of nodes to search for the nearest node</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: nearest node to the data point</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">nodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.check_corrected_abundance", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "check_corrected_abundance", "kind": "function", "doc": "<p>Check the corrected abundance of the peak</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>closest_left</strong> (int):\nindex of the closest left node</li>\n<li><strong>closest_right</strong> (int):\nindex of the closest right node</li>\n<li><strong>apex_index</strong> (int):\nindex of the apex node</li>\n<li><strong>signal</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>max_signal</strong> (float):\nmaximum value of the data points</li>\n<li><strong>signal_threshold</strong> (float):\nthreshold for the signal</li>\n<li><strong>abun_norm</strong> (float):\nabundance normalization factor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: corrected abundance of the peak</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">closest_left</span>,</span><span class=\"param\">\t<span class=\"n\">closest_right</span>,</span><span class=\"param\">\t<span class=\"n\">apex_index</span>,</span><span class=\"param\">\t<span class=\"n\">signal</span>,</span><span class=\"param\">\t<span class=\"n\">max_signal</span>,</span><span class=\"param\">\t<span class=\"n\">signal_threshold</span>,</span><span class=\"param\">\t<span class=\"n\">abun_norm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.peak_picking_first_derivative", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "peak_picking_first_derivative", "kind": "function", "doc": "<p>Find peaks by detecting minima in the first derivative of the data\nUsed in LC/GC and MS data processing\nOptional baseline correction, then peak apex detection via 1st derivative.\nFor each apex the peak datapoints surrounding the apex are determined.\nSome basic thresholding is applied (signal, number of datapoints, etc).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>domain</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>signal</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>max_height</strong> (float):\nmaximum height of the peak</li>\n<li><strong>max_prominence</strong> (float):\nmaximum prominence of the peak</li>\n<li><strong>max_signal</strong> (float):\nmaximum signal of the peak</li>\n<li><strong>min_peak_datapoints</strong> (int):\nminimum number of data points in the peak</li>\n<li><strong>peak_derivative_threshold</strong> (float):\nthreshold for the peak derivative</li>\n<li><strong>signal_threshold</strong> (float):\nthreshold for the signal</li>\n<li><strong>correct_baseline</strong> (bool):\nflag to correct the baseline</li>\n<li><strong>plot_res</strong> (bool):\nflag to plot the results</li>\n<li><strong>abun_norm</strong> (float):\nabundance normalization factor</li>\n<li><strong>check_abundance</strong> (bool):\nflag to check the abundance</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: tuple of indexes of the start, apex and final points of the peak</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">domain</span>,</span><span class=\"param\">\t<span class=\"n\">signal</span>,</span><span class=\"param\">\t<span class=\"n\">max_height</span>,</span><span class=\"param\">\t<span class=\"n\">max_prominence</span>,</span><span class=\"param\">\t<span class=\"n\">max_signal</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_datapoints</span>,</span><span class=\"param\">\t<span class=\"n\">peak_derivative_threshold</span>,</span><span class=\"param\">\t<span class=\"n\">signal_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">correct_baseline</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">plot_res</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">abun_norm</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">check_abundance</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">apex_indexes</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.find_minima", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "find_minima", "kind": "function", "doc": "<p>Find the index of the local minima in the given time-of-flight (TOF) intensity array.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>index: int\n    The starting index to search for the minima.\ntic: list\n    TIC data points\nright : bool, optional\n    Determines the direction of the search. If True, search to the right of the index. If False, search to the left of the index. Default is True.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>int\n    The index of the local minima in the TIC  array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">tic</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.derivate", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "derivate", "kind": "function", "doc": "<p>Calculate derivative of the data points.\nReplaces nan with infinity</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_array</strong> (array):\narray of data points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>array</strong>: array of the derivative of the data points</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.minima_detector", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "minima_detector", "kind": "function", "doc": "<p>Minima detector for the TIC data points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tic</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>max_tic</strong> (float):\nmaximum value of the data points</li>\n<li><strong>peak_height_max_percent</strong> (float):\nmaximum height of the peak</li>\n<li><strong>peak_max_prominence_percent</strong> (float):\nmaximum prominence of the peak</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>generator</strong>: generator of the indexes of the minima in the TIC array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tic</span>, </span><span class=\"param\"><span class=\"n\">max_tic</span>, </span><span class=\"param\"><span class=\"n\">peak_height_max_percent</span>, </span><span class=\"param\"><span class=\"n\">peak_max_prominence_percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.baseline_detector", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "baseline_detector", "kind": "function", "doc": "<p>Baseline detector for the TIC data points.\nFor LC/GC data processing</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tic</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>rt</strong> (array):\narray of retention time data points</li>\n<li><strong>peak_height_max_percent</strong> (float):\nmaximum height of the peak</li>\n<li><strong>peak_max_prominence_percent</strong> (float):\nmaximum prominence of the peak</li>\n<li><strong>do_interpolation</strong> (bool, optional):\nflag to interpolate the data points. Default is True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>array</strong>: array of the baseline corrected data points</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tic</span>,</span><span class=\"param\">\t<span class=\"n\">rt</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height_max_percent</span>,</span><span class=\"param\">\t<span class=\"n\">peak_max_prominence_percent</span>,</span><span class=\"param\">\t<span class=\"n\">do_interpolation</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.peak_detector_generator", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "peak_detector_generator", "kind": "function", "doc": "<p>Peak detector generator for the TIC data points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tic</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>stds</strong> (float):\nstandard deviation</li>\n<li><strong>method</strong> (str):\nmethod to detect the peaks\nAvailable methods: 'manual_relative_abundance', 'auto_relative_abundance', 'second_derivative'</li>\n<li><strong>rt</strong> (array):\narray of retention time data points</li>\n<li><strong>max_height</strong> (float):\nmaximum height of the peak</li>\n<li><strong>min_height</strong> (float):\nminimum height of the peak</li>\n<li><strong>max_prominence</strong> (float):\nmaximum prominence of the peak</li>\n<li><strong>min_datapoints</strong> (int):\nminimum number of data points in the peak</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>generator</strong>: generator of the indexes of the peaks in the TIC array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tic</span>,</span><span class=\"param\">\t<span class=\"n\">stds</span>,</span><span class=\"param\">\t<span class=\"n\">method</span>,</span><span class=\"param\">\t<span class=\"n\">rt</span>,</span><span class=\"param\">\t<span class=\"n\">max_height</span>,</span><span class=\"param\">\t<span class=\"n\">min_height</span>,</span><span class=\"param\">\t<span class=\"n\">max_prominence</span>,</span><span class=\"param\">\t<span class=\"n\">min_datapoints</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.smooth_signal", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "smooth_signal", "kind": "function", "doc": "<p>Smooth the data using a window with requested size.</p>\n\n<p>This method is based on the convolution of a scaled window with the signal.\nThe signal is prepared by introducing reflected copies of the signal\n(with the window size) in both ends so that transient parts are minimized\nin the begining and end part of the output signal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (array):\nthe input signal</li>\n<li><strong>window_len</strong> (int):\nthe dimension of the smoothing window; should be an odd integer</li>\n<li><strong>window</strong> (str):\nthe type of window from 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'</li>\n<li><strong>pol_order</strong> (int):\nthe order of the polynomial to fit the data</li>\n<li><strong>implemented_smooth_method</strong> (list):\nlist of implemented smoothing methods</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>y</strong> (array):\nthe smoothed signal</li>\n<li><strong>Notes:</strong></li>\n<li><strong>-----</strong></li>\n<li><p><strong>See also</strong> (numpy.hanning, numpy.hamming, numpy.bartlett, numpy.blackman, numpy.convolve):</p></li>\n<li><p><strong>scipy.signal.savgol_filter</strong></p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">window_len</span>, </span><span class=\"param\"><span class=\"n\">window</span>, </span><span class=\"param\"><span class=\"n\">pol_order</span>, </span><span class=\"param\"><span class=\"n\">implemented_smooth_method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.SignalProcessing.second_derivative_threshold", "modulename": "corems.mass_spectra.calc.SignalProcessing", "qualname": "second_derivative_threshold", "kind": "function", "doc": "<p>Second derivative threshold for the TIC data points.\nFor LC/GC data processing</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tic</strong> (array):\narray of data points to find the peaks</li>\n<li><strong>stds</strong> (float):\nstandard deviation</li>\n<li><strong>rt</strong> (array):\narray of retention time data points</li>\n<li><strong>peak_height_max_percent</strong> (float):\nmaximum height of the peak</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>array</strong>: array of the indexes of the data points to remove</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tic</span>, </span><span class=\"param\"><span class=\"n\">stds</span>, </span><span class=\"param\"><span class=\"n\">rt</span>, </span><span class=\"param\"><span class=\"n\">peak_height_max_percent</span>, </span><span class=\"param\"><span class=\"n\">peak_max_prominence_percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc", "modulename": "corems.mass_spectra.calc.lc_calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.calc.lc_calc.find_closest", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "find_closest", "kind": "function", "doc": "<p>Find the index of closest value in A to each value in target.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (<code>~numpy.array</code>):\nThe array to search (blueprint). A must be sorted.</li>\n<li><strong>target</strong> (<code>~numpy.array</code>):\nThe array of values to search for. target must be sorted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>~numpy.array</code></strong>: The indices of the closest values in A to each value in target.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations", "kind": "class", "doc": "<p>Methods for performing LC calculations on mass spectra data.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This class is intended to be used as a mixin for the LCMSBase class.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_max_eic(eic_data).\nReturns the maximum EIC value from the given EIC data. A static method.</li>\n<li>smooth_tic(tic).\nSmooths the TIC data using the specified smoothing method and settings.</li>\n<li>eic_centroid_detector(rt, eic, max_eic).\nPerforms EIC centroid detection on the given EIC data.</li>\n<li>find_nearest_scan(rt).\nFinds the nearest scan to the given retention time.</li>\n<li>get_average_mass_spectrum(scan_list, apex_scan, spectrum_mode=\"profile\", ms_level=1, auto_process=True, use_parser=False, perform_checks=True, polarity=None).\nReturns an averaged mass spectrum object.</li>\n<li>find_mass_features(ms_level=1).\nFind regions of interest for a given MS level (default is MS1).</li>\n<li>integrate_mass_features(drop_if_fail=False, ms_level=1).\nIntegrate mass features of interest and extracts EICs.</li>\n<li>find_c13_mass_features().\nEvaluate mass features and mark likely C13 isotopes.</li>\n<li>deconvolute_ms1_mass_features().\nDeconvolute mass features' ms1 mass spectra.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.get_max_eic", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.get_max_eic", "kind": "function", "doc": "<p>Returns the maximum EIC value from the given EIC data.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a static method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>eic_data</strong> (dict):\nA dictionary containing EIC data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The maximum EIC value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">eic_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.smooth_tic", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.smooth_tic", "kind": "function", "doc": "<p>Smooths the TIC or EIC data using the specified smoothing method and settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tic</strong> (numpy.ndarray):\nThe TIC (or EIC) data to be smoothed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The smoothed TIC data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tic</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.eic_centroid_detector", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.eic_centroid_detector", "kind": "function", "doc": "<p>Performs EIC centroid detection on the given EIC data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rt</strong> (numpy.ndarray):\nThe retention time data.</li>\n<li><strong>eic</strong> (numpy.ndarray):\nThe EIC data.</li>\n<li><strong>max_eic</strong> (float):\nThe maximum EIC value.</li>\n<li><strong>apex_indexes</strong> (list, optional):\nThe apexes of the EIC peaks. Defaults to [], which means that the apexes will be calculated by the function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The indexes of left, apex, and right limits as a generator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rt</span>, </span><span class=\"param\"><span class=\"n\">eic</span>, </span><span class=\"param\"><span class=\"n\">max_eic</span>, </span><span class=\"param\"><span class=\"n\">apex_indexes</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.find_nearest_scan", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.find_nearest_scan", "kind": "function", "doc": "<p>Finds the nearest scan to the given retention time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rt</strong> (float):\nThe retention time (in minutes) to find the nearest scan for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The scan number of the nearest scan.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.add_peak_metrics", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.add_peak_metrics", "kind": "function", "doc": "<p>Add peak metrics to the mass features.</p>\n\n<p>This function calculates the peak metrics for each mass feature and adds them to the mass feature objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.get_average_mass_spectrum", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.get_average_mass_spectrum", "kind": "function", "doc": "<p>Returns an averaged mass spectrum object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_list</strong> (list):\nList of scan numbers to average.</li>\n<li><strong>apex_scan</strong> (int):\nNumber of the apex scan</li>\n<li><strong>spectrum_mode</strong> (str, optional):\nThe spectrum mode to use. Defaults to \"profile\". Not that only \"profile\" mode is supported for averaging.</li>\n<li><strong>ms_level</strong> (int, optional):\nThe MS level to use. Defaults to 1.</li>\n<li><strong>auto_process</strong> (bool, optional):\nIf True, the averaged mass spectrum will be auto-processed. Defaults to True.</li>\n<li><strong>use_parser</strong> (bool, optional):\nIf True, the mass spectra will be obtained from the parser. Defaults to False.</li>\n<li><strong>perform_checks</strong> (bool, optional):\nIf True, the function will check if the data are within the ms_unprocessed dictionary and are the correct mode. Defaults to True. Only set to False if you are sure the data are profile, and (if not using the parser) are in the ms_unprocessed dictionary!  ms_unprocessed dictionary also must be indexed on scan</li>\n<li><strong>polarity</strong> (int, optional):\nThe polarity of the mass spectra (1 or -1). If not set, the polarity will be determined from the dataset. Defaults to None. (fastest if set to -1 or 1)</li>\n<li><strong>ms_params</strong> (MSParameters, optional):\nThe mass spectrum parameters to use. If not set (None), the globally set parameters will be used. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpectrumProfile</strong>: The averaged mass spectrum object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the spectrum mode is not \"profile\".\nIf the MS level is not found in the unprocessed mass spectra dictionary.\nIf not all scan numbers are found in the unprocessed mass spectra dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scan_list</span>,</span><span class=\"param\">\t<span class=\"n\">apex_scan</span>,</span><span class=\"param\">\t<span class=\"n\">spectrum_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;profile&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ms_level</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_parser</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">perform_checks</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ms_params</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.find_mass_features", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.find_mass_features", "kind": "function", "doc": "<p>Find mass features within an LCMSBase object</p>\n\n<p>Note that this is a wrapper function that calls the find_mass_features_ph function, but can be extended to support other peak picking methods in the future.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_level</strong> (int, optional):\nThe MS level to use for peak picking Default is 1.</li>\n<li><strong>grid</strong> (bool, optional):\nIf True, will regrid the data before running the persistent homology calculations (after checking if the data is gridded, used for persistent homology peak picking. Default is True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no MS level data is found on the object.\nIf persistent homology peak picking is attempted on non-profile mode data.\nIf data is not gridded and grid is False.\nIf peak picking method is not implemented.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but assigns the mass_features and eics attributes to the object.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms_level</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.integrate_mass_features", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.integrate_mass_features", "kind": "function", "doc": "<p>Integrate mass features and extract EICs.</p>\n\n<p>Populates the _eics attribute on the LCMSBase object for each unique mz in the mass_features dataframe and adds data (start_scan, final_scan, area) to the mass_features attribute.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>drop_if_fail</strong> (bool, optional):\nWhether to drop mass features if the EIC limit calculations fail.\nDefault is True.</li>\n<li><strong>drop_duplicates</strong> (bool, optional):\nWhether to mass features that appear to be duplicates\n(i.e., mz is similar to another mass feature and limits of the EIC are similar or encapsulating).\nDefault is True.</li>\n<li><strong>ms_level</strong> (int, optional):\nThe MS level to use. Default is 1.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no mass features are found.\nIf no MS level data is found for the given MS level (either in data or in the scan data)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the eics attribute on the LCMSBase object and adds data (start_scan, final_scan, area) to the mass_features attribute.</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>drop_if_fail is useful for discarding mass features that do not have good shapes, usually due to a detection on a shoulder of a peak or a noisy region (especially if minimal smoothing is used during mass feature detection).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">drop_if_fail</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">drop_duplicates</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">ms_level</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.find_c13_mass_features", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.find_c13_mass_features", "kind": "function", "doc": "<p>Mark likely C13 isotopes and connect to monoisoitopic mass features.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the monoisotopic_mf_id and isotopologue_type attributes to the indivual LCMSMassFeatures within the mass_features attribute of the LCMSBase object.</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no mass features are found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.LCCalculations.deconvolute_ms1_mass_features", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "LCCalculations.deconvolute_ms1_mass_features", "kind": "function", "doc": "<p>Deconvolute MS1 mass features</p>\n\n<p>Deconvolute mass features ms1 spectrum based on the correlation of all masses within a spectrum over the EIC of the mass features</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but assigns the _ms_deconvoluted_idx, mass_spectrum_deconvoluted_parent,</strong></li>\n<li><strong>and associated_mass_features_deconvoluted attributes to the mass features in the</strong></li>\n<li><strong>mass_features attribute of the LCMSBase object.</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no mass features are found, must run find_mass_features() first.\nIf no EICs are found, did you run integrate_mass_features() first?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations", "kind": "class", "doc": "<p>Methods for performing calculations related to 2D peak picking via persistent homology on LCMS data.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This class is intended to be used as a mixin for the LCMSBase class.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>sparse_mean_filter(idx, V, radius=[0, 1, 1]).\nSparse implementation of a mean filter.</li>\n<li>embed_unique_indices(a).\nCreates an array of indices, sorted by unique element.</li>\n<li>sparse_upper_star(idx, V).\nSparse implementation of an upper star filtration.</li>\n<li>check_if_grid(data).\nCheck if the data is gridded in mz space.</li>\n<li>grid_data(data).\nGrid the data in the mz dimension.</li>\n<li>find_mass_features_ph(ms_level=1, grid=True).\nFind mass features within an LCMSBase object using persistent homology.</li>\n<li>cluster_mass_features(drop_children=True).\nCluster regions of interest.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations.sparse_mean_filter", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations.sparse_mean_filter", "kind": "function", "doc": "<p>Sparse implementation of a mean filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>idx</strong> (<code>~numpy.array</code>):\nEdge indices for each dimension (MxN).</li>\n<li><strong>V</strong> (<code>~numpy.array</code>):\nArray of intensity data (Mx1).</li>\n<li><strong>radius</strong> (float or list):\nRadius of the sparse filter in each dimension. Values less than\nzero indicate no connectivity in that dimension.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>~numpy.array</code></strong>: Filtered intensities (Mx1).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function has been adapted from the original implementation in the Deimos package: <a href=\"https://github.com/pnnl/deimos\">https://github.com/pnnl/deimos</a>.\nThis is a static method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">V</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations.embed_unique_indices", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations.embed_unique_indices", "kind": "function", "doc": "<p>Creates an array of indices, sorted by unique element.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong> (<code>~numpy.array</code>):\nArray of unique elements (Mx1).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>~numpy.array</code></strong>: Array of indices (Mx1).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function has been adapted from the original implementation in the Deimos package: <a href=\"https://github.com/pnnl/deimos\">https://github.com/pnnl/deimos</a>\nThis is a static method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations.sparse_upper_star", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations.sparse_upper_star", "kind": "function", "doc": "<p>Sparse implementation of an upper star filtration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>idx</strong> (<code>~numpy.array</code>):\nEdge indices for each dimension (MxN).</li>\n<li><strong>V</strong> (<code>~numpy.array</code>):\nArray of intensity data (Mx1).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>idx</strong> (<code>~numpy.array</code>):\nIndex of filtered points (Mx1).</li>\n<li><strong>persistence</strong> (<code>~numpy.array</code>):\nPersistence of each filtered point (Mx1).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function has been adapted from the original implementation in the Deimos package: <a href=\"https://github.com/pnnl/deimos\">https://github.com/pnnl/deimos</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">V</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations.check_if_grid", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations.check_if_grid", "kind": "function", "doc": "<p>Check if the data are gridded in mz space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (DataFrame):\nDataFrame containing the mass spectrometry data.  Needs to have mz and scan columns.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the data is gridded in the mz direction, False otherwise.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function is used within the grid_data function and the find_mass_features function and is not intended to be called directly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations.grid_data", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations.grid_data", "kind": "function", "doc": "<p>Grid the data in the mz dimension.</p>\n\n<p>Data must be gridded prior to persistent homology calculations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (DataFrame):\nThe input data containing mz, scan, scan_time, and intensity columns.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: The gridded data with mz, scan, scan_time, and intensity columns.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If gridding fails.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations.find_mass_features_ph", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations.find_mass_features_ph", "kind": "function", "doc": "<p>Find mass features within an LCMSBase object using persistent homology.</p>\n\n<p>Assigns the mass_features attribute to the object (a dictionary of LCMSMassFeature objects, keyed by mass feature id)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_level</strong> (int, optional):\nThe MS level to use. Default is 1.</li>\n<li><strong>grid</strong> (bool, optional):\nIf True, will regrid the data before running the persistent homology calculations (after checking if the data is gridded). Default is True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no MS level data is found on the object.\nIf data is not gridded and grid is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but assigns the mass_features attribute to the object.</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function has been adapted from the original implementation in the Deimos package: <a href=\"https://github.com/pnnl/deimos\">https://github.com/pnnl/deimos</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms_level</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.calc.lc_calc.PHCalculations.cluster_mass_features", "modulename": "corems.mass_spectra.calc.lc_calc", "qualname": "PHCalculations.cluster_mass_features", "kind": "function", "doc": "<p>Cluster mass features</p>\n\n<p>Based on their proximity in the mz and scan_time dimensions, priorizies the mass features with the highest persistence.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>drop_children</strong> (bool, optional):\nWhether to drop the mass features that are not cluster parents. Default is True.</li>\n<li><strong>sort_by</strong> (str, optional):\nThe column to sort the mass features by, this will determine which mass features get rolled up into a parent mass feature. Default is \"persistence\".</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no mass features are found.\nIf too many mass features are found.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None if drop_children is True, otherwise returns a list of mass feature ids that are not cluster parents.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">drop_children</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">sort_by</span><span class=\"o\">=</span><span class=\"s1\">&#39;persistence&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory", "modulename": "corems.mass_spectra.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class", "modulename": "corems.mass_spectra.factory.GC_Class", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase", "kind": "class", "doc": "<p>Base class for GC-MS data processing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str, pathlib.Path, or s3path.S3Path):\nPath object containing the file location.</li>\n<li><strong>analyzer</strong> (str, optional):\nName of the analyzer. Defaults to 'Unknown'.</li>\n<li><strong>instrument_label</strong> (str, optional):\nLabel of the instrument. Defaults to 'Unknown'.</li>\n<li><strong>sample_name</strong> (str, optional):\nName of the sample. If not provided, it is derived from the file location.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>file_location</strong> (pathlib.Path):\nPath object containing the file location.</li>\n<li><strong>sample_name</strong> (str):\nName of the sample.</li>\n<li><strong>analyzer</strong> (str):\nName of the analyzer.</li>\n<li><strong>instrument_label</strong> (str):\nLabel of the instrument.</li>\n<li><strong>gcpeaks</strong> (list):\nList of GCPeak objects.</li>\n<li><strong>ri_pairs_ref</strong> (None):\nReference retention index pairs.</li>\n<li><strong>cal_file_path</strong> (None):\nCalibration file path.</li>\n<li><strong>_parameters</strong> (GCMSParameters):\nGC-MS parameters.</li>\n<li><strong>_retention_time_list</strong> (list):\nList of retention times.</li>\n<li><strong>_scans_number_list</strong> (list):\nList of scan numbers.</li>\n<li><strong>_tic_list</strong> (list):\nList of total ion chromatogram values.</li>\n<li><strong>_ms</strong> (dict):\nDictionary containing all mass spectra.</li>\n<li><strong>_processed_tic</strong> (list):\nList of processed total ion chromatogram values.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>process_chromatogram(plot_res=False). Process the chromatogram.</li>\n<li>plot_gc_peaks(ax=None, color='red'). Plot the GC peaks.</li>\n</ul>\n", "bases": "corems.mass_spectra.calc.GC_Calc.GC_Calculations, corems.mass_spectra.calc.GC_Deconvolution.MassDeconvolution"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.__init__", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sample_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.file_location", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.analyzer", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.instrument_label", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.instrument_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.gcpeaks", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.gcpeaks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.ri_pairs_ref", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.ri_pairs_ref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.cal_file_path", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.cal_file_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.process_chromatogram", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.process_chromatogram", "kind": "function", "doc": "<p>Process the chromatogram.</p>\n\n<p>This method processes the chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>plot_res</strong> (bool, optional):\nIf True, plot the results. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plot_res</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.add_mass_spectrum", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.add_mass_spectrum", "kind": "function", "doc": "<p>Add a mass spectrum to the GC-MS object.</p>\n\n<p>This method adds a mass spectrum to the GC-MS object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spec</strong> (MassSpectrum):\nMass spectrum to be added.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.set_tic_list_from_data", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.set_tic_list_from_data", "kind": "function", "doc": "<p>Set the total ion chromatogram list from the mass spectra data within the GC-MS data object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.set_retention_time_from_data", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.set_retention_time_from_data", "kind": "function", "doc": "<p>Set the retention time list from the mass spectra data within the GC-MS data object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.set_scans_number_from_data", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.set_scans_number_from_data", "kind": "function", "doc": "<p>Set the scan number list from the mass spectra data within the GC-MS data object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.parameters", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.parameters", "kind": "variable", "doc": "<p>GCMS Parameters</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.parameter", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.parameter", "kind": "variable", "doc": "<p>GCMS Parameters</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.molecular_search_settings", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.molecular_search_settings", "kind": "variable", "doc": "<p>Molecular Search Settings</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.chromatogram_settings", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.chromatogram_settings", "kind": "variable", "doc": "<p>Chromatogram Settings</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.scans_number", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.scans_number", "kind": "variable", "doc": "<p>Scans Number</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.retention_time", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.retention_time", "kind": "variable", "doc": "<p>Retention Time</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.processed_tic", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.processed_tic", "kind": "variable", "doc": "<p>Processed Total Ion Current</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.tic", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.tic", "kind": "variable", "doc": "<p>Total Ion Current</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.max_tic", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.max_tic", "kind": "variable", "doc": "<p>Maximum Total Ion Current</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.min_tic", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.min_tic", "kind": "variable", "doc": "<p>Minimum Total Ion Current</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.dynamic_range", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.dynamic_range", "kind": "variable", "doc": "<p>Dynamic Range of the Total Ion Current</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.matched_peaks", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.matched_peaks", "kind": "variable", "doc": "<p>Matched Peaks</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.sorted_gcpeaks", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.sorted_gcpeaks", "kind": "variable", "doc": "<p>Sorted GC Peaks, by retention time</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.unique_metabolites", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.unique_metabolites", "kind": "variable", "doc": "<p>Unique Metabolites</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.metabolites_data", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.metabolites_data", "kind": "variable", "doc": "<p>Metabolites Data</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.no_matched_peaks", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.no_matched_peaks", "kind": "variable", "doc": "<p>Peaks with no Matched Metabolites</p>\n"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.plot_gc_peaks", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.plot_gc_peaks", "kind": "function", "doc": "<p>Plot the GC peaks.</p>\n\n<p>This method plots the GC peaks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nAxes object to plot the GC peaks. Defaults to None.</li>\n<li><strong>color</strong> (str, optional):\nColor of the GC peaks. Defaults to 'red'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.to_excel", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.to_excel", "kind": "function", "doc": "<p>Export the GC-MS data to an Excel file.</p>\n\n<p>This method exports the GC-MS data to an Excel file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str, pathlib.Path, or s3path.S3Path):\nPath object containing the file location.</li>\n<li><strong>write_mode</strong> (str, optional):\nWrite mode. Defaults to 'ab'.</li>\n<li><strong>write_metadata</strong> (bool, optional):\nIf True, write the metadata. Defaults to True.</li>\n<li><strong>id_label</strong> (str, optional):\nLabel of the ID. Defaults to 'corems:'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">out_file_path</span>,</span><span class=\"param\">\t<span class=\"n\">write_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;ab&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.to_csv", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.to_csv", "kind": "function", "doc": "<p>Export the GC-MS data to a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str, pathlib.Path, or s3path.S3Path):\nPath object containing the file location.</li>\n<li><strong>separate_output</strong> (bool, optional):\nIf True, separate the output. Defaults to False.</li>\n<li><strong>write_metadata</strong> (bool, optional):\nIf True, write the metadata. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">out_file_path</span>,</span><span class=\"param\">\t<span class=\"n\">separate_output</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.to_pandas", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.to_pandas", "kind": "function", "doc": "<p>Export the GC-MS data to a Pandas dataframe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str, pathlib.Path, or s3path.S3Path):\nPath object containing the file location.</li>\n<li><strong>write_metadata</strong> (bool, optional):\nIf True, write the metadata. Defaults to True.</li>\n<li><strong>id_label</strong> (str, optional):\nLabel of the ID. Defaults to 'corems:'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.to_dataframe", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.to_dataframe", "kind": "function", "doc": "<p>Export the GC-MS data to a Pandas dataframe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id_label</strong> (str, optional):\nLabel of the ID. Defaults to 'corems:'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.processing_stats", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.processing_stats", "kind": "function", "doc": "<p>Return the processing statistics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.parameters_json", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.parameters_json", "kind": "function", "doc": "<p>Return the parameters in JSON format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id_label</strong> (str, optional):\nLabel of the ID. Defaults to 'corems:'.</li>\n<li><strong>output_path</strong> (str, optional):\nPath object containing the file location. Defaults to \" \".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span>, </span><span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39; &#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.to_json", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.to_json", "kind": "function", "doc": "<p>Export the GC-MS data to a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id_label</strong> (str, optional):\nLabel of the ID. Defaults to 'corems:'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.to_hdf", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.to_hdf", "kind": "function", "doc": "<p>Export the GC-MS data to a HDF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id_label</strong> (str, optional):\nLabel of the ID. Defaults to 'corems:'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.plot_chromatogram", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.plot_chromatogram", "kind": "function", "doc": "<p>Plot the chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nAxes object to plot the chromatogram. Defaults to None.</li>\n<li><strong>color</strong> (str, optional):\nColor of the chromatogram. Defaults to 'blue'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.plot_smoothed_chromatogram", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.plot_smoothed_chromatogram", "kind": "function", "doc": "<p>Plot the smoothed chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nAxes object to plot the smoothed chromatogram. Defaults to None.</li>\n<li><strong>color</strong> (str, optional):\nColor of the smoothed chromatogram. Defaults to 'green'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;green&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.plot_detected_baseline", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.plot_detected_baseline", "kind": "function", "doc": "<p>Plot the detected baseline.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nAxes object to plot the detected baseline. Defaults to None.</li>\n<li><strong>color</strong> (str, optional):\nColor of the detected baseline. Defaults to 'blue'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.plot_baseline_subtraction", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.plot_baseline_subtraction", "kind": "function", "doc": "<p>Plot the baseline subtraction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nAxes object to plot the baseline subtraction. Defaults to None.</li>\n<li><strong>color</strong> (str, optional):\nColor of the baseline subtraction. Defaults to 'black'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.peaks_rt_tic", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.peaks_rt_tic", "kind": "function", "doc": "<p>Return the peaks, retention time, and total ion chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>json_string</strong> (bool, optional):\nIf True, return the peaks, retention time, and total ion chromatogram in JSON format. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">json_string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.GC_Class.GCMSBase.plot_processed_chromatogram", "modulename": "corems.mass_spectra.factory.GC_Class", "qualname": "GCMSBase.plot_processed_chromatogram", "kind": "function", "doc": "<p>Plot the processed chromatogram.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nAxes object to plot the processed chromatogram. Defaults to None.</li>\n<li><strong>color</strong> (str, optional):\nColor of the processed chromatogram. Defaults to 'black'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.chromat_data", "modulename": "corems.mass_spectra.factory.chromat_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.chromat_data.TIC_Data", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "TIC_Data", "kind": "class", "doc": "<p>A class to represent total ion chromatogram data.</p>\n\n<p>scans: [int]\n    original scan numbers\ntime: [floats]\n    list of retention times\ntic: [floats]\n    total ion current [chromatogram]\nbpc: [floats]\n    base peak [chromatogram]\nApexes: [int]\n    original thermo apex scan number after peak picking</p>\n"}, {"fullname": "corems.mass_spectra.factory.chromat_data.TIC_Data.__init__", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "TIC_Data.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scans</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tic</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">bpc</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">apexes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "corems.mass_spectra.factory.chromat_data.TIC_Data.scans", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "TIC_Data.scans", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.TIC_Data.time", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "TIC_Data.time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.TIC_Data.tic", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "TIC_Data.tic", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.TIC_Data.bpc", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "TIC_Data.bpc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.TIC_Data.apexes", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "TIC_Data.apexes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data", "kind": "class", "doc": "<p>A class to represent extracted ion chromatogram data.</p>\n\n<p>scans: [int]\n    original scan numbers\ntime: [floats]\n    list of retention times\neic: [floats]\n    extracted ion chromatogram\neic_smoothed: [floats]\n    extracted ion chromatogram smoothed\napexes: [int]\n    original apex scan number after peak picking\nareas:  [floats]\n    area under the curve for each apex</p>\n"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data.__init__", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scans</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">eic</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">eic_smoothed</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">apexes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">areas</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data.scans", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data.scans", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data.time", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data.time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data.eic", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data.eic", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data.eic_smoothed", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data.eic_smoothed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data.apexes", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data.apexes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "corems.mass_spectra.factory.chromat_data.EIC_Data.areas", "modulename": "corems.mass_spectra.factory.chromat_data", "qualname": "EIC_Data.areas", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "corems.mass_spectra.factory.lc_class", "modulename": "corems.mass_spectra.factory.lc_class", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase", "kind": "class", "doc": "<p>Base class for mass spectra objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str or Path):\nThe location of the file containing the mass spectra data.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe type of analyzer used to generate the mass spectra data. Defaults to 'Unknown'.</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe type of instrument used to generate the mass spectra data. Defaults to 'Unknown'.</li>\n<li><strong>sample_name</strong> (str, optional):\nThe name of the sample; defaults to the file name if not provided to the parser. Defaults to None.</li>\n<li><strong>spectra_parser</strong> (object, optional):\nThe spectra parser object used to create the mass spectra object. Defaults to None.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>spectra_parser_class</strong> (class):\nThe class of the spectra parser used to create the mass spectra object.</li>\n<li><strong>file_location</strong> (str or Path):\nThe location of the file containing the mass spectra data.</li>\n<li><strong>sample_name</strong> (str):\nThe name of the sample; defaults to the file name if not provided to the parser.</li>\n<li><strong>analyzer</strong> (str):\nThe type of analyzer used to generate the mass spectra data. Derived from the spectra parser.</li>\n<li><strong>instrument_label</strong> (str):\nThe type of instrument used to generate the mass spectra data. Derived from the spectra parser.</li>\n<li><strong>_scan_info</strong> (dict):\nA dictionary containing the scan data with columns for scan number, scan time, ms level, precursor m/z,\nscan text, and scan window (lower and upper).\nAssociated with the property scan_df, which returns a pandas DataFrame or can set this attribute from a pandas DataFrame.</li>\n<li><strong>_ms</strong> (dict):\nA dictionary containing mass spectra for the dataset, keys of dictionary are scan numbers. Initialized as an empty dictionary.</li>\n<li><strong>_ms_unprocessed</strong> (dictionary of pandas.DataFrames or None):\nA dictionary of unprocssed mass spectra data, as an (optional) intermediate data product for peak picking.\nKey is ms_level, and value is dataframe with columns for scan number, m/z, and intensity. Default is None.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>add_mass_spectra(scan_list, spectrum_mode: str = 'profile', use_parser = True, auto_process=True).\nAdd mass spectra (or singlel mass spectrum) to _ms slot, from a list of scans</li>\n<li>get_time_of_scan_id(scan).\nReturns the scan time for the specified scan number.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.__init__", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sample_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">spectra_parser</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.file_location", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.analyzer", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.instrument_label", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.instrument_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.add_mass_spectrum", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.add_mass_spectrum", "kind": "function", "doc": "<p>Adds a mass spectrum to the dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spec</strong> (MassSpectrum):\nThe corems MassSpectrum object to be added to the dataset.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a helper function for the add_mass_spectra() method, and is not intended to be called directly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.add_mass_spectra", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.add_mass_spectra", "kind": "function", "doc": "<p>Add mass spectra to _ms dictionary, from a list of scans or single scan</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The mass spectra will inherit the mass_spectrum, ms_peak, and molecular_search parameters from the LCMSBase object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_list</strong> (list of ints):\nList of scans to use to populate _ms slot</li>\n<li><strong>spectrum_mode</strong> (str or None):\nThe spectrum mode to use for the mass spectra.\nIf None, method will use the spectrum mode from the spectra parser to ascertain the spectrum mode (this allows for mixed types).\nDefaults to None.</li>\n<li><strong>ms_level</strong> (int, optional):\nThe MS level to use for the mass spectra.\nThis is used to pass the molecular_search parameters from the LCMS object to the individual MassSpectrum objects.\nDefaults to 1.</li>\n<li><strong>using_parser</strong> (bool):\nWhether to use the mass spectra parser to get the mass spectra.  Defaults to True.</li>\n<li><strong>auto_process</strong> (bool):\nWhether to auto-process the mass spectra.  Defaults to True.</li>\n<li><strong>ms_params</strong> (MSParameters or None):\nThe mass spectrum parameters to use for the mass spectra.  If None, uses the globally set MSParameters.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>: If scan_list is not a list of ints</li>\n<li><strong>ValueError</strong>: If polarity is not 'positive' or 'negative'\nIf ms_level is not 1 or 2</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scan_list</span>,</span><span class=\"param\">\t<span class=\"n\">spectrum_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ms_level</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">use_parser</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ms_params</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.get_time_of_scan_id", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.get_time_of_scan_id", "kind": "function", "doc": "<p>Returns the scan time for the specified scan number.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan</strong> (int):\nThe scan number of the desired scan time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The scan time for the specified scan number (in minutes).</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no scan time is found for the specified scan number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.scan_df", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.scan_df", "kind": "variable", "doc": "<p>pandas.DataFrame : A pandas DataFrame containing the scan info data with columns for scan number, scan time, ms level, precursor m/z, scan text, and scan window (lower and upper).</p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.MassSpectraBase.ms", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "MassSpectraBase.ms", "kind": "variable", "doc": "<p>dictionary : contains the key associated with mass spectra and values are the associated MassSpecProfiles</p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase", "kind": "class", "doc": "<p>A class representing a liquid chromatography-mass spectrometry (LC-MS) data object.</p>\n\n<p>This class is not intended to be instantiated directly, but rather to be instantiated by an appropriate mass spectra parser using the get_lcms_obj() method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str or Path):\nThe location of the file containing the mass spectra data.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe type of analyzer used to generate the mass spectra data. Defaults to 'Unknown'.</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe type of instrument used to generate the mass spectra data. Defaults to 'Unknown'.</li>\n<li><strong>sample_name</strong> (str, optional):\nThe name of the sample; defaults to the file name if not provided to the parser. Defaults to None.</li>\n<li><strong>spectra_parser</strong> (object, optional):\nThe spectra parser object used to create the mass spectra object. Defaults to None.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>polarity</strong> (str):\nThe polarity of the ionization mode used for the dataset.</li>\n<li><strong>_parameters</strong> (LCMSParameters):\nThe parameters used for all methods called on the LCMSBase object. Set upon instantiation from LCMSParameters.</li>\n<li><strong>_retention_time_list</strong> (numpy.ndarray):\nAn array of retention times for the dataset.</li>\n<li><strong>_scans_number_list</strong> (list):\nA list of scan numbers for the dataset.</li>\n<li><strong>_tic_list</strong> (numpy.ndarray):\nAn array of total ion current (TIC) values for the dataset.</li>\n<li><strong>eics</strong> (dict):\nA dictionary containing extracted ion chromatograms (EICs) for the dataset.\nKey is the mz of the EIC. Initialized as an empty dictionary.</li>\n<li><strong>mass_features</strong> (dictionary of LCMSMassFeature objects):\nA dictionary containing mass features for the dataset.\nKey is mass feature ID. Initialized as an empty dictionary.</li>\n<li><strong>spectral_search_results</strong> (dictionary of MS2SearchResults objects):\nA dictionary containing spectral search results for the dataset.\nKey is scan number : precursor mz. Initialized as an empty dictionary.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_parameters_json().\nReturns the parameters used for the LC-MS analysis in JSON format.</li>\n<li>add_associated_ms2_dda(add_to_lcmsobj=True, auto_process=True, use_parser=True)\nAdds which MS2 scans are associated with each mass feature to the\nmass_features dictionary and optionally adds the MS2 spectra to the _ms dictionary.</li>\n<li>add_associated_ms1(add_to_lcmsobj=True, auto_process=True, use_parser=True)\nAdds the MS1 spectra associated with each mass feature to the\nmass_features dictionary and adds the MS1 spectra to the _ms dictionary.</li>\n<li>mass_features_to_df()\nReturns a pandas dataframe summarizing the mass features in the dataset.</li>\n<li>set_tic_list_from_data(overwrite=False)\nSets the TIC list from the mass spectrum objects within the _ms dictionary.</li>\n<li>set_retention_time_from_data(overwrite=False)\nSets the retention time list from the data in the _ms dictionary.</li>\n<li>set_scans_number_from_data(overwrite=False)\nSets the scan number list from the data in the _ms dictionary.</li>\n<li>plot_composite_mz_features(binsize = 1e-4, ph_int_min_thresh = 0.001, mf_plot = True, ms2_plot = True, return_fig = False)\nGenerates plot of M/Z features comparing scan time vs M/Z value</li>\n</ul>\n", "bases": "MassSpectraBase, corems.mass_spectra.calc.lc_calc.LCCalculations, corems.mass_spectra.calc.lc_calc.PHCalculations, corems.molecular_id.search.lcms_spectral_search.LCMSSpectralSearch"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.__init__", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sample_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">spectra_parser</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.polarity", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.polarity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.eics", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.eics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.mass_features", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.mass_features", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.spectral_search_results", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.spectral_search_results", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.get_parameters_json", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.get_parameters_json", "kind": "function", "doc": "<p>Returns the parameters stored for the LC-MS object in JSON format.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The parameters used for the LC-MS analysis in JSON format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.remove_unprocessed_data", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.remove_unprocessed_data", "kind": "function", "doc": "<p>Removes the unprocessed data from the LCMSBase object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_level</strong> (int, optional):\nThe MS level to remove the unprocessed data for. If None, removes unprocessed data for all MS levels.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If ms_level is not 1 or 2.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This method is useful for freeing up memory after the data has been processed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms_level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.add_associated_ms2_dda", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.add_associated_ms2_dda", "kind": "function", "doc": "<p>Add MS2 spectra associated with mass features to the dataset.</p>\n\n<p>Populates the mass_features ms2_scan_numbers attribute (on mass_features dictionary on LCMSObject)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>auto_process</strong> (bool, optional):\nIf True, auto-processes the MS2 spectra before adding it to the object's _ms dictionary. Default is True.</li>\n<li><strong>use_parser</strong> (bool, optional):\nIf True, envoke the spectra parser to get the MS2 spectra. Default is True.</li>\n<li><strong>spectrum_mode</strong> (str or None, optional):\nThe spectrum mode to use for the mass spectra.  If None, method will use the spectrum mode\nfrom the spectra parser to ascertain the spectrum mode (this allows for mixed types).\nDefaults to None. (faster if defined, otherwise will check each scan)</li>\n<li><strong>ms_params_key</strong> (string, optional):\nThe key of the mass spectrum parameters to use for the mass spectra, accessed from the LCMSObject.parameters.mass_spectrum attribute.\nDefaults to 'ms2'.</li>\n<li><strong>scan_filter</strong> (str):\nA string to filter the scans to add to the _ms dictionary.  If None, all scans are added.  Defaults to None.\n\"hcd\" will pull out only HCD scans.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If mass_features is not set, must run find_mass_features() first.\nIf no MS2 scans are found in the dataset.\nIf no precursor m/z values are found in MS2 scans, not a DDA dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_parser</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">spectrum_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ms_params_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;ms2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scan_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.add_associated_ms1", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.add_associated_ms1", "kind": "function", "doc": "<p>Add MS1 spectra associated with mass features to the dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>auto_process</strong> (bool, optional):\nIf True, auto-processes the MS1 spectra before adding it to the object's _ms dictionary. Default is True.</li>\n<li><strong>use_parser</strong> (bool, optional):\nIf True, envoke the spectra parser to get the MS1 spectra. Default is True.</li>\n<li><strong>spectrum_mode</strong> (str or None, optional):\nThe spectrum mode to use for the mass spectra.  If None, method will use the spectrum mode\nfrom the spectra parser to ascertain the spectrum mode (this allows for mixed types).\nDefaults to None. (faster if defined, otherwise will check each scan)</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If mass_features is not set, must run find_mass_features() first.\nIf apex scans are not profile mode, all apex scans must be profile mode for averaging.\nIf number of scans to average is not  1 or an integer with an integer median (i.e. 3, 5, 7, 9).\nIf deconvolute is True and no EICs are found, did you run integrate_mass_features() first?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">use_parser</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">spectrum_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.mass_features_to_df", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.mass_features_to_df", "kind": "function", "doc": "<p>Returns a pandas dataframe summarizing the mass features.</p>\n\n<p>The dataframe contains the following columns: mf_id, mz, apex_scan, scan_time, intensity,\npersistence, area, monoisotopic_mf_id, and isotopologue_type.  The index is set to mf_id (mass feature ID).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: A pandas dataframe of mass features with the following columns:\nmf_id, mz, apex_scan, scan_time, intensity, persistence, area.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.mass_features_ms1_annot_to_df", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.mass_features_ms1_annot_to_df", "kind": "function", "doc": "<p>Returns a pandas dataframe summarizing the MS1 annotations for the mass features in the dataset.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: A pandas dataframe of MS1 annotations for the mass features in the dataset.\nThe index is set to mf_id (mass feature ID)</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Warning</strong>: If no MS1 annotations were found for the mass features in the dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.mass_features_ms2_annot_to_df", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.mass_features_ms2_annot_to_df", "kind": "function", "doc": "<p>Returns a pandas dataframe summarizing the MS2 annotations for the mass features in the dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_metadata</strong> (dict of MolecularMetadata objects):\nA dictionary of MolecularMetadata objects, keyed by metabref_mol_id.  Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: A pandas dataframe of MS2 annotations for the mass features in the dataset,\nand optionally molecular metadata. The index is set to mf_id (mass feature ID)</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Warning</strong>: If no MS2 annotations were found for the mass features in the dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">molecular_metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.plot_composite_mz_features", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.plot_composite_mz_features", "kind": "function", "doc": "<p>Returns a figure displaying \n    (1) thresholded, unprocessed data\n    (2) the m/z features\n    (3) which m/z features are associated with MS2 spectra</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>binsize</strong> (float):\nDesired binsize for the m/z axis of the composite feature map.  Defaults to 1e-4.</li>\n<li><strong>mf_plot</strong> (boolean):\nIndicates whether to plot the m/z features. Defaults to True.</li>\n<li><strong>ms2_plot</strong> (boolean):\nIndicates whether to identify m/z features with associated MS2 spectra. Defaults to True.</li>\n<li><strong>return_fig</strong> (boolean):\nIndicates whether to plot composite feature map (False) or return figure object (True). Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.pyplot.Figure</strong>: A figure with the thresholded, unprocessed data on an axis of m/z value with respect to \nscan time. Unprocessed data is displayed in gray scale with darker colors indicating \nhigher intensities. If m/z features are plotted, they are displayed in cyan. If m/z\nfeatures with associated with MS2 spectra are plotted, they are displayed in red.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Warning</strong>: If m/z features are set to be plot but aren't in the dataset.\nIf m/z features with associated MS2 data are set to be plot but no MS2 annotations \nwere found for the m/z features in the dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">binsize</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">ph_int_min_thresh</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">mf_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ms2_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">return_fig</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.set_tic_list_from_data", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.set_tic_list_from_data", "kind": "function", "doc": "<p>Sets the TIC list from the mass spectrum objects within the _ms dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>overwrite</strong> (bool, optional):\nIf True, overwrites the TIC list if it is already set. Defaults to False.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>If the _ms dictionary is incomplete, sets the TIC list to an empty list.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no mass spectra are found in the dataset.\nIf the TIC list is already set and overwrite is False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.set_retention_time_from_data", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.set_retention_time_from_data", "kind": "function", "doc": "<p>Sets the retention time list from the data in the _ms dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>overwrite</strong> (bool, optional):\nIf True, overwrites the retention time list if it is already set. Defaults to False.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>If the _ms dictionary is empty or incomplete, sets the retention time list to an empty list.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no mass spectra are found in the dataset.\nIf the retention time list is already set and overwrite is False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.set_scans_number_from_data", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.set_scans_number_from_data", "kind": "function", "doc": "<p>Sets the scan number list from the data in the _ms dictionary.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>If the _ms dictionary is empty or incomplete, sets the scan number list to an empty list.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If no mass spectra are found in the dataset.\nIf the scan number list is already set and overwrite is False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.ms1_scans", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.ms1_scans", "kind": "variable", "doc": "<p>list : A list of MS1 scan numbers for the dataset.</p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.parameters", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.parameters", "kind": "variable", "doc": "<p>LCMSParameters : The parameters used for the LC-MS analysis.</p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.scans_number", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.scans_number", "kind": "variable", "doc": "<p>list : A list of scan numbers for the dataset.</p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.retention_time", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.retention_time", "kind": "variable", "doc": "<p>numpy.ndarray : An array of retention times for the dataset.</p>\n"}, {"fullname": "corems.mass_spectra.factory.lc_class.LCMSBase.tic", "modulename": "corems.mass_spectra.factory.lc_class", "qualname": "LCMSBase.tic", "kind": "variable", "doc": "<p>numpy.ndarray : An array of TIC values for the dataset.</p>\n"}, {"fullname": "corems.mass_spectra.input", "modulename": "corems.mass_spectra.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF", "modulename": "corems.mass_spectra.input.andiNetCDF", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF", "kind": "class", "doc": "<p>A class for reading AndiNetCDF files and extracting mass spectra data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str or Path):\nThe location of the AndiNetCDF file.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe type of analyzer used (default is 'Quadruple').</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe label of the instrument (default is 'GCMS-Agilent').</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the data (default is True).</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>file_location</strong> (Path):\nThe path to the AndiNetCDF file.</li>\n<li><strong>net_cdf_obj</strong> (Dataset):\nThe NetCDF dataset object.</li>\n<li><strong>ionization_type</strong> (str):\nThe ionization type used in the experiment.</li>\n<li><strong>experiment_type</strong> (str):\nThe type of experiment.</li>\n<li><strong>list_scans</strong> (range):\nThe range of scan numbers in the dataset.</li>\n<li><strong>initial_scan_number</strong> (int):\nThe number of the initial scan.</li>\n<li><strong>final_scan_number</strong> (int):\nThe number of the final scan.</li>\n<li><strong>analyzer</strong> (str):\nThe type of analyzer used.</li>\n<li><strong>instrument_label</strong> (str):\nThe label of the instrument.</li>\n<li><strong>gcms</strong> (GCMSBase):\nThe GCMSBase object for storing mass spectra data.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>polarity().\nGet the polarity of the ionization.</li>\n<li>get_mass_spectrum(mz, abun, rp, d_params).\nAdd a mass spectrum to the GCMSBase object.</li>\n<li>run().\nPopulate the GCMSBase object with mass spectra data.</li>\n<li>import_mass_spectra(d_params).\nImport mass spectra data from the AndiNetCDF file.</li>\n<li>get_gcms_obj().\nGet the GCMSBase object.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.__init__", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;Quadruple&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;GCMS-Agilent&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.ionization_type", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.ionization_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.experiment_type", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.experiment_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.list_scans", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.list_scans", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.initial_scan_number", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.initial_scan_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.final_scan_number", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.final_scan_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.analyzer", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.instrument_label", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.instrument_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.gcms", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.gcms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.polarity", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.polarity", "kind": "variable", "doc": "<p>Get the polarity of the ionization.</p>\n"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.get_mass_spectrum", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.get_mass_spectrum", "kind": "function", "doc": "<p>Add a mass spectrum to the GCMSBase object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (array-like):\nThe m/z values of the mass spectrum.</li>\n<li><strong>abun</strong> (array-like):\nThe abundance values of the mass spectrum.</li>\n<li><strong>rp</strong> (array-like):\nThe resolution values of the mass spectrum.</li>\n<li><strong>d_params</strong> (dict):\nAdditional parameters for the mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz</span>, </span><span class=\"param\"><span class=\"n\">abun</span>, </span><span class=\"param\"><span class=\"n\">rp</span>, </span><span class=\"param\"><span class=\"n\">d_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.run", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.run", "kind": "function", "doc": "<p>Populate the GCMSBase object with mass spectra data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.import_mass_spectra", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.import_mass_spectra", "kind": "function", "doc": "<p>Import mass spectra data from the AndiNetCDF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d_params</strong> (dict):\nAdditional parameters for the mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.andiNetCDF.ReadAndiNetCDF.get_gcms_obj", "modulename": "corems.mass_spectra.input.andiNetCDF", "qualname": "ReadAndiNetCDF.get_gcms_obj", "kind": "function", "doc": "<p>Get the GCMSBase object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.boosterHDF5", "modulename": "corems.mass_spectra.input.boosterHDF5", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra", "kind": "class", "doc": "<p>Class for reading HDF5 files containing booster mass spectra.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (Path or S3Path):\nThe full path to the HDF5 file.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe type of analyzer used for the mass spectra. Defaults to \"ICR\".</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe label of the instrument. Defaults to \"21T\".</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the mass spectra. Defaults to True.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.__init__", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.__init__", "kind": "function", "doc": "<p>Initialize the ReadHDF_BoosterMassSpectra class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (Path or S3Path):\nThe full path to the HDF5 file.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe type of analyzer used for the mass spectra. Defaults to \"ICR\".</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe label of the instrument. Defaults to \"21T\".</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the mass spectra. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"n\">s3path</span><span class=\"o\">.</span><span class=\"n\">S3Path</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;ICR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;21T&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.lcms", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.lcms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.hdf_obj", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.hdf_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.list_scans", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.list_scans", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.initial_scan_number", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.initial_scan_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.final_scan_number", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.final_scan_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.file_location", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.auto_process", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.auto_process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.analyzer", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.instrument_label", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.instrument_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.get_polarity", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.get_polarity", "kind": "function", "doc": "<p>Get the polarity of a scan.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (Path or S3Path):\nThe full path to the HDF5 file.</li>\n<li><strong>scan</strong> (int):\nThe scan number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_location</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"n\">s3path</span><span class=\"o\">.</span><span class=\"n\">S3Path</span>, </span><span class=\"param\"><span class=\"n\">scan</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.get_attr_data", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.get_attr_data", "kind": "function", "doc": "<p>Get the attribute data of a scan.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan</strong> (int):\nThe scan number.</li>\n<li><strong>attr_srt</strong> (str):\nThe attribute name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan</span>, </span><span class=\"param\"><span class=\"n\">attr_srt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.import_mass_spectra", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.import_mass_spectra", "kind": "function", "doc": "<p>Import the mass spectra from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d_params</strong> (dict):\nThe parameters for importing the mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.get_mass_spectrum", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.get_mass_spectrum", "kind": "function", "doc": "<p>Get the mass spectrum for a scan.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan</strong> (int):\nThe scan number.</li>\n<li><strong>d_params</strong> (dict):\nThe parameters for creating the mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.run", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.run", "kind": "function", "doc": "<p>Run the thread to create the LCMS object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.boosterHDF5.ReadHDF_BoosterMassSpectra.get_lcms_obj", "modulename": "corems.mass_spectra.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectra.get_lcms_obj", "kind": "function", "doc": "<p>Get the LCMS object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.brukerSolarix", "modulename": "corems.mass_spectra.input.brukerSolarix", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra", "kind": "class", "doc": "<p>Class for reading Bruker Solarix Transient Mass Spectra.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d_directory_location</strong> (str, pathlib.Path, or s3path.S3Path):\nPath object from pathlib containing the file location.</li>\n<li><strong>analyzer</strong> (str, optional):\nType of analyzer used in the mass spectrometer. Defaults to \"ICR\".</li>\n<li><strong>instrument_label</strong> (str, optional):\nLabel for the instrument. Defaults to \"15T\".</li>\n<li><strong>auto_process</strong> (bool, optional):\nFlag indicating whether to automatically process the mass spectra. Defaults to True.</li>\n<li><strong>keep_profile</strong> (bool, optional):\nFlag indicating whether to keep the profile data in the mass spectra. Defaults to False.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.__init__", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">d_directory_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"n\">s3path</span><span class=\"o\">.</span><span class=\"n\">S3Path</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;ICR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;15T&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">keep_profile</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.scan_attr", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.scan_attr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.lcms", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.lcms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.auto_process", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.auto_process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.keep_profile", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.keep_profile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.get_scan_attr", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.get_scan_attr", "kind": "function", "doc": "<p>Get the scan attributes from the scan.xml file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Dictionary containing the scan number as key and a tuple of retention time and TIC as value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.import_mass_spectra", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.import_mass_spectra", "kind": "function", "doc": "<p>Import the mass spectra from the scan.xml file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.get_mass_spectrum", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.get_mass_spectrum", "kind": "function", "doc": "<p>Get the mass spectrum for a given scan number.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_number</strong> (int):\nScan number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.run", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.run", "kind": "function", "doc": "<p>Run the import_mass_spectra method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.brukerSolarix.ReadBruker_SolarixTransientMassSpectra.get_lcms_obj", "modulename": "corems.mass_spectra.input.brukerSolarix", "qualname": "ReadBruker_SolarixTransientMassSpectra.get_lcms_obj", "kind": "function", "doc": "<p>Get the LCMSBase object.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the LCMSBase object is empty.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5", "modulename": "corems.mass_spectra.input.corems_hdf5", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra", "kind": "class", "doc": "<p>Class to read CoreMS HDF5 files and populate a LCMS or MassSpectraBase object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str):\nThe location of the HDF5 file to read, including the suffix.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>file_location</strong> (str):\nThe location of the HDF5 file to read.</li>\n<li><strong>h5pydata</strong> (h5py.File):\nThe HDF5 file object.</li>\n<li><strong>scans</strong> (list):\nA list of the location of individual mass spectra within the HDF5 file.</li>\n<li><strong>scan_number_list</strong> (list):\nA list of the scan numbers of the mass spectra within the HDF5 file.</li>\n<li><strong>parameters_location</strong> (str):\nThe location of the parameters file (json or toml).</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>import_mass_spectra(mass_spectra).\nImports all mass spectra from the HDF5 file onto the LCMS or MassSpectraBase object.</li>\n<li>get_mass_spectrum_from_scan(scan_number).\nReturn mass spectrum data object from scan number.</li>\n<li>load().\nPlaceholder method to meet the requirements of the SpectraParserInterface.</li>\n<li>run(mass_spectra).\nRuns the importer functions to populate a LCMS or MassSpectraBase object.</li>\n<li>import_scan_info(mass_spectra).\nImports the scan info from the HDF5 file to populate the _scan_info attribute\non the LCMS or MassSpectraBase object</li>\n<li>import_ms_unprocessed(mass_spectra).\nImports the unprocessed mass spectra from the HDF5 file to populate the\n_ms_unprocessed attribute on the LCMS or MassSpectraBase object</li>\n<li>import_parameters(mass_spectra).\nImports the parameters from the HDF5 file to populate the parameters\nattribute on the LCMS or MassSpectraBase object</li>\n<li>import_mass_features(mass_spectra).\nImports the mass features from the HDF5 file to populate the mass_features\nattribute on the LCMS or MassSpectraBase object</li>\n<li>import_eics(mass_spectra).\nImports the extracted ion chromatograms from the HDF5 file to populate the\neics attribute on the LCMS or MassSpectraBase object</li>\n<li>import_spectral_search_results(mass_spectra).\nImports the spectral search results from the HDF5 file to populate the\nspectral_search_results attribute on the LCMS or MassSpectraBase object</li>\n<li>get_mass_spectra_obj().\nReturn mass spectra data object, populating the _ms list on the LCMS or\nMassSpectraBase object from the HDF5 file</li>\n<li>get_lcms_obj().\nReturn LCMSBase object, populating the majority of the attributes on the\nLCMS object from the HDF5 file</li>\n</ul>\n", "bases": "corems.mass_spectra.input.parserbase.SpectraParserInterface, corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum, threading.Thread"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.__init__", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.scans", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.scans", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.scan_number_list", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.scan_number_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.get_mass_spectrum_from_scan", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.get_mass_spectrum_from_scan", "kind": "function", "doc": "<p>Return mass spectrum data object from scan number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.load", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.get_ms_raw", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.get_ms_raw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scan_df</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.get_scan_df", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.get_scan_df", "kind": "function", "doc": "<p>Return scan data as a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.run", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.run", "kind": "function", "doc": "<p>Runs the importer functions to populate a LCMS or MassSpectraBase object.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The following functions are run in order, if the HDF5 file contains the necessary data:</p>\n\n<ol>\n<li>import_parameters(), which populates the parameters attribute on the LCMS or MassSpectraBase object.</li>\n<li>import_mass_spectra(), which populates the _ms list on the LCMS or MassSpectraBase object.</li>\n<li>import_scan_info(), which populates the _scan_info on the LCMS or MassSpectraBase object.</li>\n<li>import_ms_unprocessed(), which populates the _ms_unprocessed attribute on the LCMS or MassSpectraBase object.</li>\n<li>import_mass_features(), which populates the mass_features attribute on the LCMS or MassSpectraBase object.</li>\n<li>import_eics(), which populates the eics attribute on the LCMS or MassSpectraBase object.</li>\n<li>import_spectral_search_results(), which populates the spectral_search_results attribute on the LCMS or MassSpectraBase object.</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectra</strong> (LCMSBase or MassSpectraBase):\nThe LCMS or MassSpectraBase object to populate with mass spectra, generally instantiated with only the file_location, analyzer, and instrument_label attributes.</li>\n<li><strong>load_raw</strong> (bool):\nIf True, load raw data (unprocessed) from HDF5 files for overall lcms object and individual mass spectra. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates several attributes on the LCMS or MassSpectraBase object.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span>, </span><span class=\"param\"><span class=\"n\">load_raw</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.import_mass_spectra", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.import_mass_spectra", "kind": "function", "doc": "<p>Imports all mass spectra from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectra</strong> (LCMSBase | MassSpectraBase):\nThe MassSpectraBase or LCMSBase object to populate with mass spectra.</li>\n<li><strong>load_raw</strong> (bool):\nIf True, load raw data (unprocessed) from HDF5 files for overall lcms object and individual mass spectra. Default</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the '_ms' list on the LCMSBase or MassSpectraBase</strong></li>\n<li><strong>object with mass spectra from the HDF5 file.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span>, </span><span class=\"param\"><span class=\"n\">load_raw</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.import_scan_info", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.import_scan_info", "kind": "function", "doc": "<p>Imports the scan info from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcms</strong> (LCMSBase | MassSpectraBase):\nThe MassSpectraBase or LCMSBase objects</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the 'scan_df' attribute on the LCMSBase or MassSpectraBase</strong></li>\n<li><strong>object with a pandas DataFrame of the 'scan_info' from the HDF5 file.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.import_ms_unprocessed", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.import_ms_unprocessed", "kind": "function", "doc": "<p>Imports the unprocessed mass spectra from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcms</strong> (LCMSBase | MassSpectraBase):\nThe MassSpectraBase or LCMSBase objects</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the '_ms_unprocessed' attribute on the LCMSBase or MassSpectraBase</strong></li>\n<li><strong>object with a dictionary of the 'ms_unprocessed' from the HDF5 file.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.import_parameters", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.import_parameters", "kind": "function", "doc": "<p>Imports the parameters from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectra</strong> (LCMSBase | MassSpectraBase):\nThe MassSpectraBase or LCMSBase object to populate with parameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the 'parameters' attribute on the LCMS or MassSpectraBase</strong></li>\n<li><strong>object with a dictionary of the 'parameters' from the HDF5 file.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.import_mass_features", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.import_mass_features", "kind": "function", "doc": "<p>Imports the mass features from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectra</strong> (LCMSBase | MassSpectraBase):\nThe MassSpectraBase or LCMSBase object to populate with mass features.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the 'mass_features' attribute on the LCMSBase or MassSpectraBase</strong></li>\n<li><strong>object with a dictionary of the 'mass_features' from the HDF5 file.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.import_eics", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.import_eics", "kind": "function", "doc": "<p>Imports the extracted ion chromatograms from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectra</strong> (LCMSBase | MassSpectraBase):\nThe MassSpectraBase or LCMSBase object to populate with extracted ion chromatograms.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the 'eics' attribute on the LCMSBase or MassSpectraBase</strong></li>\n<li><strong>object with a dictionary of the 'eics' from the HDF5 file.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.import_spectral_search_results", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.import_spectral_search_results", "kind": "function", "doc": "<p>Imports the spectral search results from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectra</strong> (LCMSBase | MassSpectraBase):\nThe MassSpectraBase or LCMSBase object to populate with spectral search results.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the 'spectral_search_results' attribute on the LCMSBase or MassSpectraBase</strong></li>\n<li><strong>object with a dictionary of the 'spectral_search_results' from the HDF5 file.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.get_mass_spectra_obj", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.get_mass_spectra_obj", "kind": "function", "doc": "<p>Return mass spectra data object, populating the _ms list on MassSpectraBase object from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>load_raw</strong> (bool):\nIf True, load raw data (unprocessed) from HDF5 files for overall spectra object and individual mass spectra. Default is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">load_raw</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectra</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">lc_class</span><span class=\"o\">.</span><span class=\"n\">MassSpectraBase</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.get_lcms_obj", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.get_lcms_obj", "kind": "function", "doc": "<p>Return LCMSBase object, populating attributes on the LCMSBase object from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>load_raw</strong> (bool):\nIf True, load raw data (unprocessed) from HDF5 files for overall lcms object and individual mass spectra. Default is True.</li>\n<li><strong>use_original_parser</strong> (bool):\nIf True, use the original parser to populate the LCMS object. Default is True.</li>\n<li><strong>raw_file_path</strong> (str):\nThe location of the raw file to parse if attempting to use original parser.\nDefault is None, which attempts to get the raw file path from the HDF5 file.\nIf the original file path has moved, this parameter can be used to specify the new location.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">load_raw</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_original_parser</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">raw_file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectra</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">lc_class</span><span class=\"o\">.</span><span class=\"n\">LCMSBase</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.corems_hdf5.ReadCoreMSHDFMassSpectra.add_original_parser", "modulename": "corems.mass_spectra.input.corems_hdf5", "qualname": "ReadCoreMSHDFMassSpectra.add_original_parser", "kind": "function", "doc": "<p>Add the original parser to the mass spectra object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectra</strong> (MassSpectraBase | LCMSBase):\nThe MassSpectraBase or LCMSBase object to add the original parser to.</li>\n<li><strong>raw_file_path</strong> (str):\nThe location of the raw file to parse. Default is None, which attempts to get the raw file path from the HDF5 file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span>, </span><span class=\"param\"><span class=\"n\">raw_file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.massList", "modulename": "corems.mass_spectra.input.massList", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText", "kind": "class", "doc": "<p>Class for reading CoreMS mass spectra from a text file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str, pathlib.Path, or s3path.S3Path):\nPath object from pathlib containing the file location</li>\n<li><strong>analyzer</strong> (str, optional):\nName of the analyzer, by default 'Unknown'</li>\n<li><strong>instrument_label</strong> (str, optional):\nLabel of the instrument, by default 'Unknown'</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>lcms</strong> (LCMSBase):\nLCMSBase object for storing the mass spectra data.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_scans_filename(). Get the filenames of all the scan files associated with the CoreMS file.</li>\n<li>set_filepath_datatype_and_delimiter(file_path_obj). Set the file path, data type, and delimiter based on the file path object.</li>\n<li>import_mass_spectra(). Import the mass spectra from the scan files and add them to the LCMSBase object.</li>\n<li>run(). Run the import_mass_spectra method to create the LCMSBase object.</li>\n<li>get_lcms_obj(). Get the LCMSBase object.</li>\n</ul>\n", "bases": "corems.mass_spectrum.input.massList.ReadCoremsMasslist, threading.Thread"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText.__init__", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_location</span>, </span><span class=\"param\"><span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>, </span><span class=\"param\"><span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText.lcms", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText.lcms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText.get_scans_filename", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText.get_scans_filename", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText.set_filepath_datatype_and_delimiter", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText.set_filepath_datatype_and_delimiter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path_obj</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText.import_mass_spectra", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText.import_mass_spectra", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText.run", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText.run", "kind": "function", "doc": "<p>Creates the LCMS object and imports mass spectra.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.massList.ReadCoremsMassSpectraText.get_lcms_obj", "modulename": "corems.mass_spectra.input.massList", "qualname": "ReadCoremsMassSpectraText.get_lcms_obj", "kind": "function", "doc": "<p>Returns the LCMSBase object associated with the massList.</p>\n\n<p>If the LCMSBase object is already initialized, it is returned.\nOtherwise, an exception is raised.</p>\n\n<p>Raises:\n    Exception: If the LCMSBase object is not initialized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectra</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">lc_class</span><span class=\"o\">.</span><span class=\"n\">LCMSBase</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.mzml", "modulename": "corems.mass_spectra.input.mzml", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser", "kind": "class", "doc": "<p>A class for parsing mzml spectrometry data files into MassSpectraBase or LCMSBase objects</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str or Path):\nThe path to the RAW file to be parsed.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe type of mass analyzer used in the instrument. Default is \"Unknown\".</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe name of the instrument used to acquire the data. Default is \"Unknown\".</li>\n<li><strong>sample_name</strong> (str, optional):\nThe name of the sample being analyzed. If not provided, the stem of the file_location path will be used.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>file_location</strong> (Path):\nThe path to the RAW file being parsed.</li>\n<li><strong>analyzer</strong> (str):\nThe type of mass analyzer used in the instrument.</li>\n<li><strong>instrument_label</strong> (str):\nThe name of the instrument used to acquire the data.</li>\n<li><strong>sample_name</strong> (str):\nThe name of the sample being analyzed.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>load().\nLoad mzML file using pymzml.run.Reader and return the data as a numpy array.</li>\n<li>run(spectra=True).\nParses the mzml file and returns a dictionary of mass spectra dataframes and a scan metadata dataframe.</li>\n<li>get_mass_spectrum_from_scan(scan_number, polarity, auto_process=True)\nParses the mzml file and returns a MassSpecBase object from a single scan.</li>\n<li>get_mass_spectra_obj().\nParses the mzml file and instantiates a MassSpectraBase object.</li>\n<li>get_lcms_obj().\nParses the mzml file and instantiates an LCMSBase object.</li>\n</ul>\n\n<p>Inherits from ThermoBaseClass and SpectraParserInterface</p>\n", "bases": "corems.mass_spectra.input.parserbase.SpectraParserInterface"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.__init__", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sample_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.file_location", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.analyzer", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.instrument_label", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.instrument_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.load", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.load", "kind": "function", "doc": "<p>Load mzML file using pymzml.run.Reader and return the data as a numpy array.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The mass spectra data as a numpy array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.get_scan_df", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.get_scan_df", "kind": "function", "doc": "<p>Return scan data as a pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (pymzml.run.Reader):\nThe mass spectra data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: A pandas DataFrame containing metadata for each scan, including scan number, MS level, polarity, and scan time.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.get_ms_raw", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.get_ms_raw", "kind": "function", "doc": "<p>Return a dictionary of mass spectra data as a pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spectra</strong> (str):\nWhich mass spectra data to include in the output.\nOptions: None, \"ms1\", \"ms2\", \"all\".</li>\n<li><strong>scan_df</strong> (pandas.DataFrame):\nScan dataframe. Output from get_scan_df().</li>\n<li><strong>data</strong> (pymzml.run.Reader):\nThe mass spectra data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the mass spectra data as pandas DataFrames, with keys corresponding to the MS level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span>, </span><span class=\"param\"><span class=\"n\">scan_df</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.run", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.run", "kind": "function", "doc": "<p>Parse the mzML file and return a dictionary of spectra dataframes and a scan metadata dataframe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spectra</strong> (str, optional):\nWhich mass spectra data to include in the output. Default is \"all\".\nOther options: None, \"ms1\", \"ms2\".</li>\n<li><strong>scan_df</strong> (pandas.DataFrame, optional):\nScan dataframe.  If not provided, the scan dataframe is created from the mzML file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing two elements:\n<ul>\n<li>A dictionary containing the mass spectra data as numpy arrays, with keys corresponding to the MS level.</li>\n<li>A pandas DataFrame containing metadata for each scan, including scan number, MS level, polarity, and scan time.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>, </span><span class=\"param\"><span class=\"n\">scan_df</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.get_mass_spectrum_from_scan", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.get_mass_spectrum_from_scan", "kind": "function", "doc": "<p>Instatiate a mass spectrum object from the mzML file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_number</strong> (int):\nThe scan number to be parsed.</li>\n<li><strong>spectrum_mode</strong> (str):\nThe type of spectrum to instantiate.  Must be'profile' or 'centroid'.</li>\n<li><strong>polarity</strong> (int):\nThe polarity of the scan.  Must be -1 or 1.</li>\n<li><strong>auto_process</strong> (bool, optional):\nIf True, process the mass spectrum. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecProfile | MassSpecCentroid</strong>: The MassSpecProfile or MassSpecCentroid object containing the parsed mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span>, </span><span class=\"param\"><span class=\"n\">spectrum_mode</span>, </span><span class=\"param\"><span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.get_mass_spectra_obj", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.get_mass_spectra_obj", "kind": "function", "doc": "<p>Instatiate a MassSpectraBase object from the mzML file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpectraBase</strong>: The MassSpectra object containing the parsed mass spectra.\nThe object is instatiated with the mzML file, analyzer, instrument, sample name, and scan dataframe.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.mzml.MZMLSpectraParser.get_lcms_obj", "modulename": "corems.mass_spectra.input.mzml", "qualname": "MZMLSpectraParser.get_lcms_obj", "kind": "function", "doc": "<p>Instatiates a LCMSBase object from the mzML file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spectra</strong> (str, optional):\nWhich mass spectra data to include in the output. Default is all.  Other options: none, ms1, ms2.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>LCMSBase</strong>: LCMS object containing mass spectra data.\nThe object is instatiated with the mzML file, analyzer, instrument, sample name, scan dataframe,\nand mz dataframe(s), as well as lists of scan numbers, retention times, and TICs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.parserbase", "modulename": "corems.mass_spectra.input.parserbase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.parserbase.SpectraParserInterface", "modulename": "corems.mass_spectra.input.parserbase", "qualname": "SpectraParserInterface", "kind": "class", "doc": "<p>Interface for parsing mass spectra data into MassSpectraBase objects.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>load().\nLoad mass spectra data.</li>\n<li>run().\nParse mass spectra data.</li>\n<li>get_mass_spectra_obj().\nReturn MassSpectraBase object with several attributes populated</li>\n<li>get_mass_spectrum_from_scan(scan_number).\nReturn MassSpecBase data object from scan number.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is an abstract class and should not be instantiated directly.</p>\n", "bases": "abc.ABC"}, {"fullname": "corems.mass_spectra.input.parserbase.SpectraParserInterface.load", "modulename": "corems.mass_spectra.input.parserbase", "qualname": "SpectraParserInterface.load", "kind": "function", "doc": "<p>Load mass spectra data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.parserbase.SpectraParserInterface.run", "modulename": "corems.mass_spectra.input.parserbase", "qualname": "SpectraParserInterface.run", "kind": "function", "doc": "<p>Parse mass spectra data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.parserbase.SpectraParserInterface.get_scan_df", "modulename": "corems.mass_spectra.input.parserbase", "qualname": "SpectraParserInterface.get_scan_df", "kind": "function", "doc": "<p>Return scan data as a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.parserbase.SpectraParserInterface.get_ms_raw", "modulename": "corems.mass_spectra.input.parserbase", "qualname": "SpectraParserInterface.get_ms_raw", "kind": "function", "doc": "<p>Return a dictionary of mass spectra data as a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span>, </span><span class=\"param\"><span class=\"n\">scan_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.parserbase.SpectraParserInterface.get_mass_spectra_obj", "modulename": "corems.mass_spectra.input.parserbase", "qualname": "SpectraParserInterface.get_mass_spectra_obj", "kind": "function", "doc": "<p>Return mass spectra data object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.parserbase.SpectraParserInterface.get_mass_spectrum_from_scan", "modulename": "corems.mass_spectra.input.parserbase", "qualname": "SpectraParserInterface.get_mass_spectrum_from_scan", "kind": "function", "doc": "<p>Return mass spectrum data object from scan number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span>, </span><span class=\"param\"><span class=\"n\">spectrum_mode</span>, </span><span class=\"param\"><span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader", "modulename": "corems.mass_spectra.input.rawFileReader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.spec", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "spec", "kind": "variable", "doc": "<p></p>\n", "default_value": "ModuleSpec(name=&#x27;corems&#x27;, loader=&lt;_frozen_importlib_external.SourceFileLoader object&gt;, origin=&#x27;/Users/heal742/LOCAL/corems_dev/corems/corems/__init__.py&#x27;, submodule_search_locations=[&#x27;/Users/heal742/LOCAL/corems_dev/corems/corems&#x27;])"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass", "kind": "class", "doc": "<p>Class for parsing Thermo Raw files and extracting information from them.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>file_location : str or pathlib.Path or s3path.S3Path\n    Thermo Raw file path or S3 path.</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>file_path : str or pathlib.Path or s3path.S3Path\n    The file path of the Thermo Raw file.\nparameters : LCMSParameters\n    The LCMS parameters for the Thermo Raw file.\nchromatogram_settings : LiquidChromatographSetting\n    The chromatogram settings for the Thermo Raw file.\nscans : list or tuple\n    The selected scans for the Thermo Raw file.\nstart_scan : int\n    The starting scan number for the Thermo Raw file.\nend_scan : int\n    The ending scan number for the Thermo Raw file.</p>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>set_msordertype(scanFilter, mstype: str = 'ms1') -> scanFilter\nConvert the user-passed MS Type string to a Thermo MSOrderType object.</li>\n<li>get_creation_time() -> datetime.datetime\nExtract the creation date stamp from the .RAW file and return it as a formatted datetime object.</li>\n<li>remove_temp_file()\nRemove the temporary file if the path is from S3Path.</li>\n<li>get_polarity_mode(scan_number: int) -> int\nGet the polarity mode for the given scan number.</li>\n<li>get_filter_for_scan_num(scan_number: int) -> List[str]\nGet the filter for the given scan number.</li>\n<li>check_full_scan(scan_number: int) -> bool\nCheck if the given scan number is a full scan.</li>\n<li>get_all_filters() -> Tuple[Dict[int, str], List[str]]\nGet all scan filters for the Thermo Raw file.</li>\n<li>get_scan_header(scan: int) -> Dict[str, Any]\nGet the full dictionary of scan header metadata for the given scan number.</li>\n<li>get_rt_time_from_trace(trace) -> Tuple[List[float], List[float], List[int]]\nGet the retention time, intensity, and scan number from the given trace.</li>\n<li>get_eics(target_mzs: List[float], tic_data: Dict[str, Any], ms_type: str = 'MS !d',\n     peak_detection: bool = True, smooth: bool = True, plot: bool = False,\n     ax: Optional[matplotlib.axes.Axes] = None, legend: bool = False) -> Tuple[Dict[float, EIC_Data], matplotlib.axes.Axes]\nGet the extracted ion chromatograms (EICs) for the target m/z values.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.__init__", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.__init__", "kind": "function", "doc": "<p>file_location: srt pathlib.Path or s3path.S3Path\nThermo Raw file path</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_location</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.iRawDataPlus", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.iRawDataPlus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.res", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.res", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.file_path", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.file_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.iFileHeader", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.iFileHeader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.parameters", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.parameters", "kind": "variable", "doc": "<p>Get or set the LCMSParameters object.</p>\n", "annotation": ": corems.encapsulation.factory.parameters.LCMSParameters"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.chromatogram_settings", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.chromatogram_settings", "kind": "variable", "doc": "<p>Get or set the LiquidChromatographSetting object.</p>\n", "annotation": ": corems.encapsulation.factory.processingSetting.LiquidChromatographSetting"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.scans", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.scans", "kind": "variable", "doc": "<p>scans : list or tuple\nIf list uses Thermo AverageScansInScanRange for selected scans, ortherwise uses Thermo AverageScans for a scan range</p>\n", "annotation": ": list | tuple"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.start_scan", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.start_scan", "kind": "variable", "doc": "<p>Get the starting scan number for the Thermo Raw file.</p>\n", "annotation": ": int"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.end_scan", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.end_scan", "kind": "variable", "doc": "<p>Get the ending scan number for the Thermo Raw file.</p>\n", "annotation": ": int"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.set_msordertype", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.set_msordertype", "kind": "function", "doc": "<p>Function to convert user passed string MS Type to Thermo MSOrderType object\nLimited to MS1 through MS10.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>scanFilter : Thermo.ScanFilter\n    The scan filter object.\nmstype : str, optional\n    The MS Type string, by default 'ms1'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scanFilter</span>, </span><span class=\"param\"><span class=\"n\">mstype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ms1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_creation_time", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_creation_time", "kind": "function", "doc": "<p>Extract the creation date stamp from the .RAW file\nReturn formatted creation date stamp.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.remove_temp_file", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.remove_temp_file", "kind": "function", "doc": "<p>if the path is from S3Path data cannot be serialized to io.ByteStream and\na temporary copy is stored at the temp dir\nuse this function only at the end of your execution scrip\nsome LCMS class methods depend on this file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.close_file", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.close_file", "kind": "function", "doc": "<p>Close the Thermo Raw file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_polarity_mode", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_polarity_mode", "kind": "function", "doc": "<p>Get the polarity mode for the given scan number.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>scan_number : int\n    The scan number.</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>Exception\n    If the polarity mode is unknown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_filter_for_scan_num", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_filter_for_scan_num", "kind": "function", "doc": "<p>Returns the closest matching run time that corresponds to scan_number for the current\ncontroller. This function is only supported for MS device controllers.\ne.g.  ['FTMS', '-', 'p', 'NSI', 'Full', 'ms', '[200.00-1000.00]']</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>scan_number : int\n    The scan number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"n\">Generic</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_ms_level_for_scan_num", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_ms_level_for_scan_num", "kind": "function", "doc": "<p>Get the MS order for the given scan number.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>scan_number : int\n    The scan number</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>int\n    The MS order type (1 for MS, 2 for MS2, etc.)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.check_full_scan", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.check_full_scan", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_all_filters", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_all_filters", "kind": "function", "doc": "<p>Get all scan filters.\nThis function is only supported for MS device controllers.\ne.g.  ['FTMS', '-', 'p', 'NSI', 'Full', 'ms', '[200.00-1000.00]']</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"n\">Generic</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_scan_header", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_scan_header", "kind": "function", "doc": "<p>Get full dictionary of scan header meta data, i.e. AGC status, ion injection time, etc.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>scan : int\n    The scan number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_rt_time_from_trace", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_rt_time_from_trace", "kind": "function", "doc": "<p>trace: ThermoFisher.CommonCore.Data.Business.ChromatogramSignal</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trace</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"n\">Generic</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Double</span><span class=\"p\">],</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"n\">Generic</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Double</span><span class=\"p\">],</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"n\">Generic</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Int32</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_eics", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_eics", "kind": "function", "doc": "<p>ms_type: str ('MS', MS2')\nstart_scan: int default -1 will select the lowest available\nend_scan: int default -1 will select the highest available</p>\n\n<p>returns:</p>\n\n<pre><code>chroma: dict{target_mz: EIC_Data(\n                            Scans: [int]\n                                original thermo scan numbers\n                            Time: [floats]\n                                list of retention times\n                            TIC: [floats]\n                                total ion chromatogram\n                            Apexes: [int]\n                                original thermo apex scan number after peak picking\n                            )\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_mzs</span><span class=\"p\">:</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"n\">Generic</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Double</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tic_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ms_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;MS !d&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">peak_detection</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">smooth</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectra</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">chromat_data</span><span class=\"o\">.</span><span class=\"n\">EIC_Data</span><span class=\"p\">],</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_tic", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_tic", "kind": "function", "doc": "<p>ms_type: str ('MS !d', 'MS2', None)\n    if you use None you get all scans.\npeak_detection: bool\nsmooth: bool\nplot: bool\nax: matplotlib axis object\ntrace_type: str ('TIC','BPC')</p>\n\n<p>returns:\n    chroma: dict\n    {\n    Scan: [int]\n        original thermo scan numberMS\n    Time: [floats]\n        list of retention times\n    TIC: [floats]\n        total ion chromatogram\n    Apexes: [int]\n        original thermo apex scan number after peak picking\n    }</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ms_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;MS !d&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">peak_detection</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">smooth</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trace_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;TIC&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectra</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">chromat_data</span><span class=\"o\">.</span><span class=\"n\">TIC_Data</span><span class=\"p\">,</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_average_mass_spectrum", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_average_mass_spectrum", "kind": "function", "doc": "<p>Averages mass spectra over a scan range using Thermo's AverageScansInScanRange method\nor a scan list using Thermo's AverageScans method\nspectrum_mode: str\n    centroid or profile mass spectrum\nauto_process: bool\n    If true performs peak picking, and noise threshold calculation after creation of mass spectrum object\nms_type: str\n    String of form 'ms1' or 'ms2' or 'MS3' etc. Valid up to MS10.\n    Internal function converts to Thermo MSOrderType class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">spectrum_mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;profile&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ppm_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span>,</span><span class=\"param\">\t<span class=\"n\">ms_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MS1&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectrum</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MassSpectrumClasses</span><span class=\"o\">.</span><span class=\"n\">MassSpecProfile</span> <span class=\"o\">|</span> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectrum</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MassSpectrumClasses</span><span class=\"o\">.</span><span class=\"n\">MassSpecCentroid</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.set_metadata", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.set_metadata", "kind": "function", "doc": "<p>Collect metadata to be ingested in the mass spectrum object</p>\n\n<p>scans_list: list[int] or false\nlastScanNumber: int\nfirstScanNumber: int</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">firstScanNumber</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">lastScanNumber</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">scans_list</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Thermo_Profile&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_instrument_methods", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_instrument_methods", "kind": "function", "doc": "<p>This function will extract the instrument methods embedded in the raw file</p>\n\n<p>First it will check if there are any instrument methods, if not returning None\nThen it will get the total number of instrument methods.\nFor each method, it will extract the plaintext string of the method and attempt to parse it into a dictionary\nIf this fails, it will return just the string object.</p>\n\n<p>This has been tested on data from an Orbitrap ID-X with embedded MS and LC methods, but other instrument types may fail.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>parse_strings: bool\n    If True, will attempt to parse the instrument methods into a dictionary. If False, will return the raw string.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>List[Dict[str, Any]] or List\n    A list of dictionaries containing the instrument methods, or a list of strings if parsing fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parse_strings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_tune_method", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_tune_method", "kind": "function", "doc": "<p>This code will extract the tune method from the raw file\nIt has been tested on data from a Thermo Orbitrap ID-X, Astral and Q-Exactive, but may fail on other instrument types.\nIt attempts to parse out section headers and sub-sections, but may not work for all instrument types.\nIt will also not return Labels (keys) where the value is blank</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Dict[str, Any]\n    A dictionary containing the tune method information</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>ValueError\n    If no tune methods are found in the raw file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_status_log", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_status_log", "kind": "function", "doc": "<p>This code will extract the status logs from the raw file\nIt has been tested on data from a Thermo Orbitrap ID-X, Astral and Q-Exactive, but may fail on other instrument types.\nIt attempts to parse out section headers and sub-sections, but may not work for all instrument types.\nIt will also not return Labels (keys) where the value is blank</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>retention_time: float\n    The retention time in minutes to extract the status log data from.\n    Will use the closest retention time found. Default 0.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Dict[str, Any]\n    A dictionary containing the status log information</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>ValueError\n    If no status logs are found in the raw file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">retention_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_error_logs", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_error_logs", "kind": "function", "doc": "<p>This code will extract the error logs from the raw file</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Dict[float, str]\n    A dictionary containing the error log information with the retention time as the key</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>ValueError\n    If no error logs are found in the raw file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_sample_information", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_sample_information", "kind": "function", "doc": "<p>This code will extract the sample information from the raw file</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Dict[str, Any]\n    A dictionary containing the sample information\n    Note that UserText field may not be handled properly and may need further processing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_instrument_data", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_instrument_data", "kind": "function", "doc": "<p>This code will extract the instrument data from the raw file</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Dict[str, Any]\n    A dictionary containing the instrument data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_centroid_msms_data", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_centroid_msms_data", "kind": "function", "doc": "<p><em>Deprecated since version 2.0:</em>\nThis function will be removed in CoreMS 2.0. Please use <code>get_average_mass_spectrum()</code> instead for similar functionality.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ThermoBaseClass.get_average_mass_spectrum_by_scanlist", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ThermoBaseClass.get_average_mass_spectrum_by_scanlist", "kind": "function", "doc": "<p>Averages selected scans mass spectra using Thermo's AverageScans method\nscans_list: list[int]\nauto_process: bool\n    If true performs peak picking, and noise threshold calculation after creation of mass spectrum object\nReturns:\n    MassSpecProfile</p>\n\n<p><em>Deprecated since version 2.0.</em></p>\n\n<p>This function will be removed in CoreMS 2.0. Please use <code>get_average_mass_spectrum()</code> instead for similar functionality.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scans_list</span><span class=\"p\">:</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"n\">Generic</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Int32</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ppm_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectrum</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MassSpectrumClasses</span><span class=\"o\">.</span><span class=\"n\">MassSpecProfile</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader", "kind": "class", "doc": "<p>A class for parsing Thermo RAW mass spectrometry data files and instatiating MassSpectraBase or LCMSBase objects</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str or Path):\nThe path to the RAW file to be parsed.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe type of mass analyzer used in the instrument. Default is \"Unknown\".</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe name of the instrument used to acquire the data. Default is \"Unknown\".</li>\n<li><strong>sample_name</strong> (str, optional):\nThe name of the sample being analyzed. If not provided, the stem of the file_location path will be used.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>file_location</strong> (Path):\nThe path to the RAW file being parsed.</li>\n<li><strong>analyzer</strong> (str):\nThe type of mass analyzer used in the instrument.</li>\n<li><strong>instrument_label</strong> (str):\nThe name of the instrument used to acquire the data.</li>\n<li><strong>sample_name</strong> (str):\nThe name of the sample being analyzed.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>run(spectra=True).\nParses the RAW file and returns a dictionary of mass spectra dataframes and a scan metadata dataframe.</li>\n<li>get_mass_spectrum_from_scan(scan_number, polarity, auto_process=True)\nParses the RAW file and returns a MassSpecBase object from a single scan.</li>\n<li>get_mass_spectra_obj().\nParses the RAW file and instantiates a MassSpectraBase object.</li>\n<li>get_lcms_obj().\nParses the RAW file and instantiates an LCMSBase object.</li>\n<li>get_icr_transient_times().\nReturn a list for transient time targets for all scans, or selected scans range</li>\n</ul>\n\n<p>Inherits from ThermoBaseClass and SpectraParserInterface</p>\n", "bases": "ThermoBaseClass, corems.mass_spectra.input.parserbase.SpectraParserInterface"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.__init__", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.__init__", "kind": "function", "doc": "<p>file_location: srt pathlib.Path or s3path.S3Path\nThermo Raw file path</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sample_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.file_location", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.analyzer", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.instrument_label", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.instrument_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.load", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.load", "kind": "function", "doc": "<p>Load mass spectra data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.get_scan_df", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.get_scan_df", "kind": "function", "doc": "<p>Return scan data as a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.get_ms_raw", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.get_ms_raw", "kind": "function", "doc": "<p>Return a dictionary of mass spectra data as a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span>, </span><span class=\"param\"><span class=\"n\">scan_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.run", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.run", "kind": "function", "doc": "<p>Extracts mass spectra data from a raw file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spectra</strong> (str, optional):\nWhich mass spectra data to include in the output. Default is all.  Other options: none, ms1, ms2.</li>\n<li><strong>scan_df</strong> (pandas.DataFrame, optional):\nScan dataframe.  If not provided, the scan dataframe is created from the mzML file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing two elements:\n<ul>\n<li>A dictionary containing mass spectra data, separated by MS level.</li>\n<li>A pandas DataFrame containing scan information, including scan number, scan time, TIC, MS level,\nscan text, scan window lower and upper bounds, polarity, and precursor m/z (if applicable).</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>, </span><span class=\"param\"><span class=\"n\">scan_df</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.get_mass_spectrum_from_scan", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.get_mass_spectrum_from_scan", "kind": "function", "doc": "<p>Instatiate a MassSpecBase object from a single scan number from the binary file, currently only supports profile mode.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_number</strong> (int):\nThe scan number to extract the mass spectrum from.</li>\n<li><strong>polarity</strong> (int):\nThe polarity of the scan.  1 for positive mode, -1 for negative mode.</li>\n<li><strong>spectrum_mode</strong> (str):\nThe type of mass spectrum to extract.  Must be 'profile' or 'centroid'.</li>\n<li><strong>auto_process</strong> (bool, optional):\nIf True, perform peak picking and noise threshold calculation after creating the mass spectrum object. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecProfile | MassSpecCentroid</strong>: The MassSpecProfile or MassSpecCentroid object containing the parsed mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span>, </span><span class=\"param\"><span class=\"n\">spectrum_mode</span>, </span><span class=\"param\"><span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.get_mass_spectra_obj", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.get_mass_spectra_obj", "kind": "function", "doc": "<p>Instatiate a MassSpectraBase object from the binary data file file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpectraBase</strong>: The MassSpectra object containing the parsed mass spectra.  The object is instatiated with the mzML file, analyzer, instrument, sample name, and scan dataframe.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.get_lcms_obj", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.get_lcms_obj", "kind": "function", "doc": "<p>Instatiates a LCMSBase object from the mzML file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spectra</strong> (str, optional):\nWhich mass spectra data to include in the output. Default is \"all\".  Other options: \"none\", \"ms1\", \"ms2\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>LCMSBase</strong>: LCMS object containing mass spectra data. The object is instatiated with the file location, analyzer, instrument, sample name, scan info, mz dataframe (as specifified), polarity, as well as the attributes holding the scans, retention times, and tics.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectra</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.input.rawFileReader.ImportMassSpectraThermoMSFileReader.get_icr_transient_times", "modulename": "corems.mass_spectra.input.rawFileReader", "qualname": "ImportMassSpectraThermoMSFileReader.get_icr_transient_times", "kind": "function", "doc": "<p>Return a list for transient time targets for all scans, or selected scans range</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Resolving Power and Transient time targets based on 7T FT-ICR MS system</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output", "modulename": "corems.mass_spectra.output", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export", "modulename": "corems.mass_spectra.output.export", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.ion_type_dict", "modulename": "corems.mass_spectra.output.export", "qualname": "ion_type_dict", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;M+&#x27;: [{}, {}], &#x27;protonated&#x27;: [{&#x27;H&#x27;: 1}, {}], &#x27;[M+H]+&#x27;: [{&#x27;H&#x27;: 1}, {}], &#x27;[M+NH4]+&#x27;: [{&#x27;N&#x27;: 1, &#x27;H&#x27;: 4}, {}], &#x27;[M+Na]+&#x27;: [{&#x27;Na&#x27;: 1}, {}], &#x27;[M+K]+&#x27;: [{&#x27;K&#x27;: 1}, {}], &#x27;[M+2Na+Cl]+&#x27;: [{&#x27;Na&#x27;: 2, &#x27;Cl&#x27;: 1}, {}], &#x27;[M+2Na-H]+&#x27;: [{&#x27;Na&#x27;: 2}, {&#x27;H&#x27;: 1}], &#x27;[M+C2H3Na2O2]+&#x27;: [{&#x27;C&#x27;: 2, &#x27;H&#x27;: 3, &#x27;Na&#x27;: 2, &#x27;O&#x27;: 2}, {}], &#x27;[M+C4H10N3]+&#x27;: [{&#x27;C&#x27;: 4, &#x27;H&#x27;: 10, &#x27;N&#x27;: 3}, {}], &#x27;[M+NH4+ACN]+&#x27;: [{&#x27;C&#x27;: 2, &#x27;H&#x27;: 7, &#x27;N&#x27;: 2}, {}], &#x27;[M+H-H2O]+&#x27;: [{}, {&#x27;H&#x27;: 1, &#x27;O&#x27;: 1}], &#x27;de-protonated&#x27;: [{}, {&#x27;H&#x27;: 1}], &#x27;[M-H]-&#x27;: [{}, {&#x27;H&#x27;: 1}], &#x27;[M+Cl]-&#x27;: [{&#x27;Cl&#x27;: 1}, {}], &#x27;[M+HCOO]-&#x27;: [{&#x27;C&#x27;: 1, &#x27;H&#x27;: 1, &#x27;O&#x27;: 2}, {}], &#x27;[M+CH3COO]-&#x27;: [{&#x27;C&#x27;: 2, &#x27;H&#x27;: 3, &#x27;O&#x27;: 2}, {}], &#x27;[M+2NaAc+Cl]-&#x27;: [{&#x27;Na&#x27;: 2, &#x27;C&#x27;: 2, &#x27;H&#x27;: 3, &#x27;O&#x27;: 2, &#x27;Cl&#x27;: 1}, {}], &#x27;[M+K-2H]-&#x27;: [{&#x27;K&#x27;: 1}, {&#x27;H&#x27;: 2}], &#x27;[M+Na-2H]-&#x27;: [{&#x27;Na&#x27;: 1}, {&#x27;H&#x27;: 2}]}"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport", "kind": "class", "doc": "<p>A class to export low resolution GC-MS data.</p>\n\n<p>This class provides methods to export low resolution GC-MS data to various formats such as Excel, CSV, HDF5, and Pandas DataFrame.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>out_file_path : str\n    The output file path.\ngcms : object\n    The low resolution GCMS object.</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>output_file : Path\n    The output file path as a Path object.\ngcms : object\n    The low resolution GCMS object.</p>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>get_pandas_df(id_label=\"corems:\"). Get the exported data as a Pandas DataFrame.</li>\n<li>get_json(nan=False, id_label=\"corems:\"). Get the exported data as a JSON string.</li>\n<li>to_pandas(write_metadata=True, id_label=\"corems:\"). Export the data to a Pandas DataFrame and save it as a pickle file.</li>\n<li>to_excel(write_mode='a', write_metadata=True, id_label=\"corems:\"),\nExport the data to an Excel file.</li>\n<li>to_csv(separate_output=False, write_mode=\"w\", write_metadata=True, id_label=\"corems:\").\nExport the data to a CSV file.</li>\n<li>to_hdf(id_label=\"corems:\").\nExport the data to an HDF5 file.</li>\n<li>get_data_stats(gcms).\nGet statistics about the GCMS data.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.__init__", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">gcms</span></span>)</span>"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.output_file", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.output_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.gcms", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.gcms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_pandas_df", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_pandas_df", "kind": "function", "doc": "<p>Get the exported data as a Pandas DataFrame.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>id_label : str, optional\n    The ID label for the data. Default is \"corems:\".</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>DataFrame\n    The exported data as a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_json", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_json", "kind": "function", "doc": "<p>Get the exported data as a JSON string.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>nan : bool, optional\n    Whether to include NaN values in the JSON string. Default is False.\nid_label : str, optional\n    The ID label for the data. Default is \"corems:\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nan</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.to_pandas", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.to_pandas", "kind": "function", "doc": "<p>Export the data to a Pandas DataFrame and save it as a pickle file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>write_metadata : bool, optional\n    Whether to write metadata to the output file.\nid_label : str, optional\n    The ID label for the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.to_excel", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.to_excel", "kind": "function", "doc": "<p>Export the data to an Excel file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>write_mode : str, optional\n    The write mode for the Excel file. Default is 'a' (append).\nwrite_metadata : bool, optional\n    Whether to write metadata to the output file. Default is True.\nid_label : str, optional\n    The ID label for the data. Default is \"corems:\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.to_csv", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.to_csv", "kind": "function", "doc": "<p>Export the data to a CSV file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>separate_output : bool, optional\n    Whether to separate the output into multiple files. Default is False.\nwrite_mode : str, optional\n    The write mode for the CSV file. Default is 'w' (write).\nwrite_metadata : bool, optional\n    Whether to write metadata to the output file. Default is True.\nid_label : str, optional\n    The ID label for the data. Default is \"corems:\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">separate_output</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">write_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;w&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.to_hdf", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.to_hdf", "kind": "function", "doc": "<p>Export the data to an HDF5 file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>id_label : str, optional\n    The ID label for the data. Default is \"corems:\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;corems:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_data_stats", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_data_stats", "kind": "function", "doc": "<p>Get statistics about the GCMS data.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>gcms : object\n    The low resolution GCMS object.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>dict\n    A dictionary containing the data statistics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gcms</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_calibration_stats", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_calibration_stats", "kind": "function", "doc": "<p>Get statistics about the GC-MS calibration.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gcms</span>, </span><span class=\"param\"><span class=\"n\">id_label</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_blank_stats", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_blank_stats", "kind": "function", "doc": "<p>Get statistics about the GC-MS blank.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gcms</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_instrument_metadata", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_instrument_metadata", "kind": "function", "doc": "<p>Get metadata about the GC-MS instrument.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gcms</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_data_metadata", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_data_metadata", "kind": "function", "doc": "<p>Get metadata about the GC-MS data.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>gcms : object\n    The low resolution GCMS object.\nid_label : str\n    The ID label for the data.\noutput_path : str\n    The output file path.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>dict\n    A dictionary containing the data metadata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gcms</span>, </span><span class=\"param\"><span class=\"n\">id_label</span>, </span><span class=\"param\"><span class=\"n\">output_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_parameters_json", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_parameters_json", "kind": "function", "doc": "<p>Get the parameters as a JSON string.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>gcms : GCMS object\n    The low resolution GCMS object.\nid_label : str\n    The ID label for the data.\noutput_path : str\n    The output file path.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>str\n    The parameters as a JSON string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gcms</span>, </span><span class=\"param\"><span class=\"n\">id_label</span>, </span><span class=\"param\"><span class=\"n\">output_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.write_settings", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.write_settings", "kind": "function", "doc": "<p>Write the settings to a JSON file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>output_path : str\n    The output file path.\ngcms : GCMS object\n    The low resolution GCMS object.\nid_label : str\n    The ID label for the data. Default is \"emsl:\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">gcms</span>, </span><span class=\"param\"><span class=\"n\">id_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;emsl:&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LowResGCMSExport.get_list_dict_data", "modulename": "corems.mass_spectra.output.export", "qualname": "LowResGCMSExport.get_list_dict_data", "kind": "function", "doc": "<p>Get the exported data as a list of dictionaries.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>gcms : object\n    The low resolution GCMS object.\ninclude_no_match : bool, optional\n    Whether to include no match data. Default is True.\nno_match_inline : bool, optional\n    Whether to include no match data inline. Default is False.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list\n    The exported data as a list of dictionaries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gcms</span>, </span><span class=\"param\"><span class=\"n\">include_no_match</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">no_match_inline</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport", "kind": "class", "doc": "<p>A class to export high resolution mass spectra data.</p>\n\n<p>This class provides methods to export high resolution mass spectra data to various formats\nsuch as Excel, CSV, HDF5, and Pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str | Path):\nThe output file path.</li>\n<li><strong>mass_spectra</strong> (object):\nThe high resolution mass spectra object.</li>\n<li><strong>output_type</strong> (str, optional):\nThe output type. Default is 'excel'.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>output_file</strong> (Path):\nThe output file path without suffix</li>\n<li><strong>dir_loc</strong> (Path):\nThe directory location for the output file,\nby default this will be the output_file + \".corems\" and all output files will be\nwritten into this location</li>\n<li><strong>mass_spectra</strong> (MassSpectraBase):\nThe high resolution mass spectra object.</li>\n</ul>\n", "bases": "corems.mass_spectrum.output.export.HighResMassSpecExport"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.__init__", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span>, </span><span class=\"param\"><span class=\"n\">output_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;excel&#39;</span></span>)</span>"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.dir_loc", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.dir_loc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.output_file", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.output_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.mass_spectra", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.mass_spectra", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.atoms_order_list", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.atoms_order_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.get_pandas_df", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.get_pandas_df", "kind": "function", "doc": "<p>Get the mass spectra as a list of Pandas DataFrames.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.to_pandas", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.to_pandas", "kind": "function", "doc": "<p>Export the data to a Pandas DataFrame and save it as a pickle file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>write_metadata : bool, optional\n    Whether to write metadata to the output file. Default is True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.to_excel", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.to_excel", "kind": "function", "doc": "<p>Export the data to an Excel file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>write_metadata : bool, optional\n    Whether to write metadata to the output file. Default is True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.to_csv", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.to_csv", "kind": "function", "doc": "<p>Export the data to a CSV file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>write_metadata : bool, optional\n    Whether to write metadata to the output file. Default is True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.get_mass_spectra_attrs", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.get_mass_spectra_attrs", "kind": "function", "doc": "<p>Get the mass spectra attributes as a JSON string.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>mass_spectra : object\n    The high resolution mass spectra object.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>str\n    The mass spectra attributes as a JSON string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.HighResMassSpectraExport.to_hdf", "modulename": "corems.mass_spectra.output.export", "qualname": "HighResMassSpectraExport.to_hdf", "kind": "function", "doc": "<p>Export the data to an HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>overwrite</strong> (bool, optional):\nWhether to overwrite the output file. Default is False.</li>\n<li><strong>export_raw</strong> (bool, optional):\nWhether to export the raw mass spectra data. Default is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">export_raw</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LCMSExport", "modulename": "corems.mass_spectra.output.export", "qualname": "LCMSExport", "kind": "class", "doc": "<p>A class to export high resolution LC-MS data.</p>\n\n<p>This class provides methods to export high resolution LC-MS data to HDF5.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str | Path):\nThe output file path, do not include the file extension.</li>\n<li><strong>lcms_object</strong> (LCMSBase):\nThe high resolution lc-ms object.</li>\n</ul>\n", "bases": "HighResMassSpectraExport"}, {"fullname": "corems.mass_spectra.output.export.LCMSExport.__init__", "modulename": "corems.mass_spectra.output.export", "qualname": "LCMSExport.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span>)</span>"}, {"fullname": "corems.mass_spectra.output.export.LCMSExport.to_hdf", "modulename": "corems.mass_spectra.output.export", "qualname": "LCMSExport.to_hdf", "kind": "function", "doc": "<p>Export the data to an HDF5.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>overwrite</strong> (bool, optional):\nWhether to overwrite the output file. Default is False.</li>\n<li><strong>save_parameters</strong> (bool, optional):\nWhether to save the parameters as a separate json or toml file. Default is True.</li>\n<li><strong>parameter_format</strong> (str, optional):\nThe format to save the parameters in. Default is 'toml'.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If parameter_format is not 'json' or 'toml'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">save_parameters</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">parameter_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;toml&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport", "kind": "class", "doc": "<p>A class to export lipidomics data.</p>\n\n<p>This class provides methods to export lipidomics data to various formats and summarize the lipid report.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str | Path):\nThe output file path, do not include the file extension.</li>\n<li><strong>mass_spectra</strong> (object):\nThe high resolution mass spectra object.</li>\n</ul>\n", "bases": "LCMSExport"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.__init__", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">mass_spectra</span></span>)</span>"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.ion_type_dict", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.ion_type_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.get_ion_formula", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.get_ion_formula", "kind": "function", "doc": "<p>From a neutral formula and an ion type, return the formula of the ion.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a static method.\nIf the neutral_formula is not a string, this method will return None.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>neutral_formula</strong> (str):\nThe neutral formula, this should be a string form from the MolecularFormula class\n(e.g. 'C2 H4 O2', isotopes OK), or simple string (e.g. 'C2H4O2', no isotope handling in this case).\nIn the case of a simple string, the atoms are parsed based on the presence of capital letters,\ne.g. MgCl2 is parsed as 'Mg Cl2.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type, e.g. 'protonated', '[M+H]+', '[M+Na]+', etc.\nSee the self.ion_type_dict for the available ion types.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The formula of the ion as a string (like 'C2 H4 O2'); or None if the neutral_formula is not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">neutral_formula</span>, </span><span class=\"param\"><span class=\"n\">ion_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.get_isotope_type", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.get_isotope_type", "kind": "function", "doc": "<p>From an ion formula, return the 13C isotope type of the ion.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a static method.\nIf the ion_formula is not a string, this method will return None.\nThis is currently only functional for 13C isotopes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ion_formula</strong> (str):\nThe formula of the ion, expected to be a string like 'C2 H4 O2'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The isotope type of the ion, e.g. '13C1', '13C2', etc; or None if the ion_formula does not contain a 13C isotope.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the ion_formula is not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ion_formula</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.clean_ms1_report", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.clean_ms1_report", "kind": "function", "doc": "<p>Clean the MS1 report.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms1_summary_full</strong> (DataFrame):\nThe full MS1 summary DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: The cleaned MS1 summary DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms1_summary_full</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.summarize_lipid_report", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.summarize_lipid_report", "kind": "function", "doc": "<p>Summarize the lipid report.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms2_annot</strong> (DataFrame):\nThe MS2 annotation DataFrame with all annotations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: The summarized lipid report.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms2_annot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.clean_ms2_report", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.clean_ms2_report", "kind": "function", "doc": "<p>Clean the MS2 report.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lipid_summary</strong> (DataFrame):\nThe full lipid summary DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: The cleaned lipid summary DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lipid_summary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.to_report", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.to_report", "kind": "function", "doc": "<p>Create a report of the mass features and their annotations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_metadata</strong> (dict, optional):\nThe molecular metadata. Default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: The report of the mass features and their annotations.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The report will contain the mass features and their annotations from MS1 and MS2 (if available).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">molecular_metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectra.output.export.LipidomicsExport.report_to_csv", "modulename": "corems.mass_spectra.output.export", "qualname": "LipidomicsExport.report_to_csv", "kind": "function", "doc": "<p>Create a report of the mass features and their annotations and save it as a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_metadata</strong> (dict, optional):\nThe molecular metadata. Default is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">molecular_metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum", "modulename": "corems.mass_spectrum", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc", "modulename": "corems.mass_spectrum.calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "kind": "module", "doc": "<p>Created on March 23 2023</p>\n\n<p>@author: Will Kew</p>\n\n<p>Modules for automatic mass internal recalibration</p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration", "kind": "class", "doc": "<p>This class is designed for high resolution (FTICR, Orbitrap) data of complex mixture, e.g. Organic matter</p>\n\n<p>The tool first does a broad mass range search for the most commonly expected ion type (i.e. CHO, deprotonated - for negative ESI)\nAnd then the assigned data mass error distribution is searched, with a gaussian fit to the most prominent range.\nThis tool works when the data are of sufficient quality, and not outwith the typical expected range of the mass analyzer\nIt presumes the mean error is out by 0-several ppm, but that the spread of error values is modest (&lt;2ppm)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nCoreMS mass spectrum object</li>\n<li><strong>plot</strong> (bool, optional):\nWhether to plot the error distribution. The default is False.</li>\n<li><strong>docker</strong> (bool, optional):\nWhether to use the docker database. The default is True. If not, it uses a dynamically generated sqlite database.</li>\n<li><strong>ppmFWHMprior</strong> (float, optional):\nThe FWHM of the prior distribution (ppm). The default is 3.</li>\n<li><strong>ppmRangeprior</strong> (float, optional):\nThe range of the prior distribution (ppm). The default is 15.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>determine_error_boundaries(). Determine the error boundaries for recalibration space.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This initialisation function creates a copy of the MassSpectrum object to avoid over-writing assignments.\nPossible future task is to make the base class copyable.</p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.__init__", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mass_spectrum</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">docker</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ppmFWHMprior</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">ppmRangeprior</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">15</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.mass_spectrum", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.mass_spectrum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.plot", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.plot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.docker", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.docker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.ppmFWHMprior", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.ppmFWHMprior", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.ppmRangeprior", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.ppmRangeprior", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.set_uncal_settings", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.set_uncal_settings", "kind": "function", "doc": "<p>Set uncalibrated formula search settings</p>\n\n<p>This function serves the uncalibrated data (hence broad error tolerance)\nIt only allows CHO formula in deprotonated ion type- as most common for SRFA ESI negative mode</p>\n\n<p>This will not work for positive mode data, or for other ion types, or other expected elemental searches.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.positive_search_settings", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.positive_search_settings", "kind": "function", "doc": "<p>Set the positive mode elemental search settings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.get_error_range", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.get_error_range", "kind": "function", "doc": "<p>Get the error range from the error distribution</p>\n\n<p>Using lmfit and seaborn kdeplot to extract the error range from the error distribution of assigned species.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>errors</strong> (list):\nlist of the errors of the assigned species (ppm)</li>\n<li><strong>ppmFWHMprior</strong> (float, optional):\nThe FWHM of the prior distribution (ppm). The default is 3.</li>\n<li><strong>plot_logic</strong> (bool, optional):\nWhether to plot the error distribution. The default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mean_error</strong> (float):\nmean mass error of the Gaussian distribution (ppm)</li>\n<li><strong>fwhm_error</strong> (float):\nfull width half max of the gaussian error distribution (ppm)</li>\n<li><strong>ppm_thresh</strong> (list):\nrecommended thresholds for the recalibration parameters (ppm)\nConsists of [mean_error-fwhm_error,mean_error+fwhm_error]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">errors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">ppmFWHMprior</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">plot_logic</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.AutoRecalibration.HighResRecalibration.determine_error_boundaries", "modulename": "corems.mass_spectrum.calc.AutoRecalibration", "qualname": "HighResRecalibration.determine_error_boundaries", "kind": "function", "doc": "<p>Determine the error boundaries for recalibration space</p>\n\n<p>This is the main function in this class\nSets the Molecular Formulas search settings, performs the initial formula search\nConverts the data to a dataframe, and gets the error range\nReturns the error thresholds.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mean_error</strong> (float):\nmean mass error of the Gaussian distribution (ppm)</li>\n<li><strong>fwhm_error</strong> (float):\nfull width half max of the gaussian error distribution (ppm)</li>\n<li><strong>ppm_thresh</strong> (list):\nrecommended thresholds for the recalibration parameters (ppm)\nConsists of [mean_error-fwhm_error,mean_error+fwhm_error]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.Calibration", "modulename": "corems.mass_spectrum.calc.Calibration", "kind": "module", "doc": "<p>Created on Wed May 13 02:16:09 2020</p>\n\n<p>@author: Will Kew</p>\n"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration", "kind": "class", "doc": "<p>MzDomainCalibration class for recalibrating mass spectra</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (CoreMS MassSpectrum Object):\nThe mass spectrum to be calibrated.</li>\n<li><strong>ref_masslist</strong> (str):\nThe path to a reference mass list.</li>\n<li><strong>mzsegment</strong> (tuple of floats, optional):\nThe mz range to recalibrate, or None. Used for calibration of specific parts of the mz domain at a time.\nFuture work - allow multiple mzsegments to be passed.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (CoreMS MassSpectrum Object):\nThe mass spectrum to be calibrated.</li>\n<li><strong>mzsegment</strong> (tuple of floats or None):\nThe mz range to recalibrate, or None.</li>\n<li><strong>ref_mass_list_path</strong> (str or Path):\nThe path to the reference mass list.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>run().\nMain function to run this class.</li>\n<li>load_ref_mass_list().\nLoad reference mass list (Bruker format).</li>\n<li>gen_ref_mass_list_from_assigned(min_conf=0.7).\nGenerate reference mass list from assigned masses.</li>\n<li>find_calibration_points(df_ref, calib_ppm_error_threshold=(-1, 1), calib_snr_threshold=5).\nFind calibration points in the mass spectrum based on the reference mass list.</li>\n<li>robust_calib(param, cal_peaks_mz, cal_refs_mz, order=1).\nRecalibration function.</li>\n<li>recalibrate_mass_spectrum(cal_peaks_mz, cal_refs_mz, order=1, diagnostic=False).\nMain recalibration function which uses a robust linear regression.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.__init__", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass_spectrum</span>, </span><span class=\"param\"><span class=\"n\">ref_masslist</span>, </span><span class=\"param\"><span class=\"n\">mzsegment</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.mass_spectrum", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.mass_spectrum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.mzsegment", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.mzsegment", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.ref_mass_list_path", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.ref_mass_list_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.load_ref_mass_list", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.load_ref_mass_list", "kind": "function", "doc": "<p>Load reference mass list (Bruker format)</p>\n\n<p>Loads in a reference mass list from a .ref file\nNote that some versions of Bruker's software produce .ref files with a different format.\nAs such, users may need to manually edit the .ref file in a text editor to ensure it is in the correct format.\nCoreMS includes an example .ref file with the correct format for reference.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df_ref</strong> (Pandas DataFrame):\nreference mass list object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.gen_ref_mass_list_from_assigned", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.gen_ref_mass_list_from_assigned", "kind": "function", "doc": "<p>Generate reference mass list from assigned masses</p>\n\n<p>This function will generate a ref mass dataframe object from an assigned corems mass spec obj\nusing assigned masses above a certain minimum confidence threshold.</p>\n\n<p>This function needs to be retested and check it is covered in the unit tests.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_conf</strong> (float, optional):\nminimum confidence score. The default is 0.7.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df_ref</strong> (Pandas DataFrame):\nreference mass list - based on calculated masses.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_conf</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.find_calibration_points", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.find_calibration_points", "kind": "function", "doc": "<p>Function to find calibration points in the mass spectrum</p>\n\n<p>Based on the reference mass list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df_ref</strong> (Pandas DataFrame):\nreference mass list for recalibration.</li>\n<li><strong>calib_ppm_error_threshold</strong> (tuple of floats, optional):\nppm error for finding calibration masses in the spectrum. The default is -1,1.\nNote: This is based on the calculation of ppm = ((mz_measure - mz_theoretical)/mz_theoretical)*1e6.\n    Some software does this the other way around and value signs must be inverted for that to work.</li>\n<li><strong>calib_snr_threshold</strong> (float, optional):\nsnr threshold for finding calibration masses in the spectrum. The default is 5.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>cal_peaks_mz</strong> (list of floats):\nmasses of measured ions to use in calibration routine</li>\n<li><strong>cal_refs_mz</strong> (list of floats):\nreference mz values of found calibration points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">df_ref</span>,</span><span class=\"param\">\t<span class=\"n\">calib_ppm_error_threshold</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">calib_snr_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_ref_match_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;legacy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_ref_match_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.003</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_ref_match_std_raw_error_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.robust_calib", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.robust_calib", "kind": "function", "doc": "<p>Recalibration function</p>\n\n<p>Computes the rms of m/z errors to minimize when calibrating.\nThis is adapted from from spike.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>param</strong> (list of floats):\ngenerated by minimize function from scipy optimize.</li>\n<li><strong>cal_peaks_mz</strong> (list of floats):\nmasses of measured peaks to use in mass calibration.</li>\n<li><strong>cal_peaks_mz</strong> (list of floats):\nreference mz values of found calibration points.</li>\n<li><strong>order</strong> (int, optional):\norder of the recalibration function. 1 = linear, 2 = quadratic. The default is 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rmserror</strong> (float):\nroot mean square mass error for calibration points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cal_peaks_mz</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cal_refs_mz</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.recalibrate_mass_spectrum", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.recalibrate_mass_spectrum", "kind": "function", "doc": "<p>Main recalibration function which uses a robust linear regression</p>\n\n<p>This function performs the recalibration of the mass spectrum object.\nIt iteratively applies</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cal_peaks_mz</strong> (list of float):\nmasses of measured peaks to use in mass calibration.</li>\n<li><strong>cal_refs_mz</strong> (list of float):\nreference mz values of found calibration points.</li>\n<li><strong>order</strong> (int, optional):\norder of the recalibration function. 1 = linear, 2 = quadratic. The default is 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (CoreMS mass spectrum object):\nCalibrated mass spectrum object</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function is adapted, in part, from the SPIKE project [1,2] and is based on the robust linear regression method.</p>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Chiron L., Coutouly M-A., Starck J-P., Rolando C., Delsuc M-A.\nSPIKE a Processing Software dedicated to Fourier Spectroscopies\n<a href=\"https://arxiv.org/abs/1608.06777\">https://arxiv.org/abs/1608.06777</a> (2016)</li>\n<li>SPIKE - <a href=\"https://github.com/spike-project/spike\">https://github.com/spike-project/spike</a></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cal_peaks_mz</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cal_refs_mz</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">diagnostic</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.Calibration.MzDomainCalibration.run", "modulename": "corems.mass_spectrum.calc.Calibration", "qualname": "MzDomainCalibration.run", "kind": "function", "doc": "<p>Run the calibration routine</p>\n\n<p>This function runs the calibration routine.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration", "kind": "class", "doc": "<p>Frequency Domain Calibration class for mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>selected_mass_peaks</strong> (list):\nList of selected mass peaks.</li>\n<li><strong>include_isotopologue</strong> (bool, optional):\nFlag to include isotopologues, by default False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mz_exp</strong> (ndarray):\nArray of experimental m/z values.</li>\n<li><strong>mz_calc</strong> (ndarray):\nArray of calculated m/z values.</li>\n<li><strong>freq_exp</strong> (ndarray):\nArray of experimental frequencies.</li>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>freq_exp_ms</strong> (ndarray):\nArray of experimental frequencies for mass spectrum.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>recal_mass_spec(mz_domain, Aterm, Bterm, Cterm).\nRecalibrate the mass spectrum with the given parameters.</li>\n<li>linear().\nPerform linear calibration.</li>\n<li>quadratic(iteration=False).\nPerform quadratic calibration.</li>\n<li>ledford_calibration(iteration=False).\nPerform Ledford calibration.</li>\n<li>step_fit(steps=4).\nPerform step fit calibration.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.__init__", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass_spectrum</span>, </span><span class=\"param\"><span class=\"n\">selected_mass_peaks</span>, </span><span class=\"param\"><span class=\"n\">include_isotopologue</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.selected_mspeaks", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.selected_mspeaks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.mz_exp", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.mz_exp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.mz_calc", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.mz_calc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.freq_exp", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.freq_exp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.mass_spectrum", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.mass_spectrum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.freq_exp_ms", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.freq_exp_ms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.recal_mass_spec", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.recal_mass_spec", "kind": "function", "doc": "<p>Recalibrate the mass spectrum with the given parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_domain</strong> (ndarray):\nArray of m/z values for recalibration.</li>\n<li><strong>Aterm</strong> (float):\nAterm parameter for recalibration.</li>\n<li><strong>Bterm</strong> (float):\nBterm parameter for recalibration.</li>\n<li><strong>Cterm</strong> (float):\nCterm parameter for recalibration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz_domain</span>, </span><span class=\"param\"><span class=\"n\">Aterm</span>, </span><span class=\"param\"><span class=\"n\">Bterm</span>, </span><span class=\"param\"><span class=\"n\">Cterm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.linear", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.linear", "kind": "function", "doc": "<p>Perform linear calibration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.quadratic", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.quadratic", "kind": "function", "doc": "<p>Perform quadratic calibration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iteration</strong> (bool, optional):\nFlag to perform iterative calibration, by default False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iteration</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.ledford_calibration", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.ledford_calibration", "kind": "function", "doc": "<p>Perform Ledford calibration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iteration</strong> (bool, optional):\nFlag to perform iterative calibration, by default False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iteration</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.CalibrationCalc.FreqDomain_Calibration.step_fit", "modulename": "corems.mass_spectrum.calc.CalibrationCalc", "qualname": "FreqDomain_Calibration.step_fit", "kind": "function", "doc": "<p>Perform step fit calibration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>steps</strong> (int, optional):\nNumber of steps for step fit calibration, by default 4.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "qualname": "KendrickGrouping", "kind": "class", "doc": "<p>Class for Kendrick grouping of mass spectra.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>mz_odd_even_index_lists().\nGet odd and even indexes lists.</li>\n<li>calc_error(current, test).\nCalculate the error between two values.</li>\n<li>populate_kendrick_index_dict_error(list_indexes, sort=True).\nPopulate the Kendrick index dictionary based on error.</li>\n<li>populate_kendrick_index_dict_rounding(list_indexes, sort=True).\nPopulate the Kendrick index dictionary based on rounding.</li>\n<li>sort_abundance_kendrick_dict(even_kendrick_group_index, odd_kendrick_group_index).\nSort the Kendrick index dictionary based on abundance.</li>\n<li>kendrick_groups_indexes(sort=True).\nGet the Kendrick groups indexes dictionary.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping.mz_odd_even_index_lists", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "qualname": "KendrickGrouping.mz_odd_even_index_lists", "kind": "function", "doc": "<p>Get odd and even indexes lists.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the lists of even and odd indexes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping.calc_error", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "qualname": "KendrickGrouping.calc_error", "kind": "function", "doc": "<p>Calculate the error between two values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>current</strong> (float):\nThe current value.</li>\n<li><strong>test</strong> (float):\nThe test value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The calculated error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping.populate_kendrick_index_dict_error", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "qualname": "KendrickGrouping.populate_kendrick_index_dict_error", "kind": "function", "doc": "<p>Populate the Kendrick index dictionary based on error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list_indexes</strong> (list):\nThe list of indexes.</li>\n<li><strong>sort</strong> (bool, optional):\nWhether to sort the dictionary by abundance (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The Kendrick index dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">list_indexes</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping.populate_kendrick_index_dict_rounding", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "qualname": "KendrickGrouping.populate_kendrick_index_dict_rounding", "kind": "function", "doc": "<p>Populate the Kendrick index dictionary based on rounding.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list_indexes</strong> (list):\nThe list of indexes.</li>\n<li><strong>sort</strong> (bool, optional):\nWhether to sort the dictionary by abundance (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The Kendrick index dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">list_indexes</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping.sort_abundance_kendrick_dict", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "qualname": "KendrickGrouping.sort_abundance_kendrick_dict", "kind": "function", "doc": "<p>Sort the Kendrick index dictionary based on abundance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>even_kendrick_group_index</strong> (dict):\nThe Kendrick index dictionary for even indexes.</li>\n<li><strong>odd_kendrick_group_index</strong> (dict):\nThe Kendrick index dictionary for odd indexes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The sorted Kendrick index dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">even_kendrick_group_index</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">odd_kendrick_group_index</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping.kendrick_groups_indexes", "modulename": "corems.mass_spectrum.calc.KendrickGroup", "qualname": "KendrickGrouping.kendrick_groups_indexes", "kind": "function", "doc": "<p>Get the Kendrick groups indexes dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sort</strong> (bool, optional):\nWhether to sort the dictionary by abundance (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The Kendrick groups indexes dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction", "kind": "class", "doc": "<p>Class for mass error prediction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (list):\nList of mass spectrum objects.</li>\n<li><strong>mz_overlay</strong> (int, optional):\nThe mz overlay value for peak simulation. Default is 10.</li>\n<li><strong>rp_increments</strong> (int, optional):\nThe resolving power increments for peak simulation. Default is 10000.</li>\n<li><strong>base_line_target</strong> (float, optional):\nThe target value for the baseline resolution. Default is 0.01.</li>\n<li><strong>max_interation</strong> (int, optional):\nThe maximum number of iterations for peak simulation. Default is 1000.</li>\n<li><strong>interpolation</strong> (str, optional):\nThe interpolation method for missing data. Default is 'linear'.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (list):\nList of mass spectrum objects.</li>\n<li><strong>mz_overlay</strong> (int):\nThe mz overlay value for peak simulation.</li>\n<li><strong>rp_increments</strong> (int):\nThe resolving power increments for peak simulation.</li>\n<li><strong>base_line_target</strong> (float):\nThe target value for the baseline resolution.</li>\n<li><strong>max_interation</strong> (int):\nThe maximum number of iterations for peak simulation.</li>\n<li><strong>df</strong> (DataFrame or None):\nThe calculated error distribution dataframe.</li>\n<li><strong>interpolation</strong> (str):\nThe interpolation method for missing data.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>run().\nRuns the mass error prediction calculation.</li>\n<li>get_results().\nReturns the calculated error distribution dataframe.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.__init__", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mass_spectrum</span>,</span><span class=\"param\">\t<span class=\"n\">mz_overlay</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">rp_increments</span><span class=\"o\">=</span><span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">base_line_target</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">max_interation</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.mass_spectrum_obj", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.mass_spectrum_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.mz_overlay", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.mz_overlay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.rp_increments", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.rp_increments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.base_line_target", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.base_line_target", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.max_interation", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.max_interation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.df", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.interpolation", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.interpolation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.run", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.run", "kind": "function", "doc": "<p>Runs the mass error prediction calculation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.get_results", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.get_results", "kind": "function", "doc": "<p>Returns the calculated error distribution dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.calc_error_dist", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.calc_error_dist", "kind": "function", "doc": "<p>Calculate the error distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.sum_data", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.sum_data", "kind": "function", "doc": "<p>Sum the abundances of the simulated peaks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tuple_mz_abun_list</strong> (tuple):\nA tuple containing the mz and abundance lists.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the summed mz and abundance lists.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tuple_mz_abun_list</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.calc_error", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.calc_error", "kind": "function", "doc": "<p>Calculate the error between two values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_ref</strong> (float):\nThe reference value.</li>\n<li><strong>mass_sim</strong> (float):\nThe simulated value.</li>\n<li><strong>factor</strong> (float):\nThe factor to multiply the error by.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The calculated error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_ref</span>, </span><span class=\"param\"><span class=\"n\">mass_sim</span>, </span><span class=\"param\"><span class=\"n\">factor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.find_peak_apex", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.find_peak_apex", "kind": "function", "doc": "<p>Find the peak apex.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (array):\nThe mz array.</li>\n<li><strong>abund</strong> (array):\nThe abundance array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the peak apex mass and abundance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz</span>, </span><span class=\"param\"><span class=\"n\">abund</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassErrorPrediction.MassErrorPrediction.find_peak_valley", "modulename": "corems.mass_spectrum.calc.MassErrorPrediction", "qualname": "MassErrorPrediction.find_peak_valley", "kind": "function", "doc": "<p>Find the peak valley.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (array):\nThe mz array.</li>\n<li><strong>abund</strong> (array):\nThe abundance array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the peak valley mz and abundance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz</span>, </span><span class=\"param\"><span class=\"n\">abund</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassSpectrumCalc", "modulename": "corems.mass_spectrum.calc.MassSpectrumCalc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MassSpectrumCalc.MassSpecCalc", "modulename": "corems.mass_spectrum.calc.MassSpectrumCalc", "qualname": "MassSpecCalc", "kind": "class", "doc": "<p>Class for Mass Spectrum Calculations</p>\n\n<p>Class including numerical calculations related to mass spectrum class\nInherited PeakPicking and NoiseThresholdCalc ensuring its methods are\navailable to the instantiated mass spectrum class object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nCoreMS mass spectrum object</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>All Attributes are derivative from the MassSpecBase Class</strong></li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>check_mspeaks().\nCheck if the mspeaks attribute is populated</li>\n<li>sort_by_abundance().\nSort the mspeaks by abundance</li>\n<li>percentile_assigned(report_error=False).\nCalculate the percentage of assigned peaks</li>\n<li>resolving_power_calc(B, T).\nCalculate the resolving power</li>\n<li>number_average_molecular_weight(profile=False).\nCalculate the number average molecular weight</li>\n<li>weight_average_molecular_weight(profile=False).\nCalculate the weight average molecular weight</li>\n</ul>\n", "bases": "corems.mass_spectrum.calc.PeakPicking.PeakPicking, corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc"}, {"fullname": "corems.mass_spectrum.calc.MassSpectrumCalc.MassSpecCalc.percentile_assigned", "modulename": "corems.mass_spectrum.calc.MassSpectrumCalc", "qualname": "MassSpecCalc.percentile_assigned", "kind": "function", "doc": "<p>Percentage of peaks which are assigned</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>report_error</strong> (bool, optional):\nReport the error of the assigned peaks. Default is False.</li>\n<li><strong>mute_output</strong> (bool, optional):\nOverride the verbose setting. Default is False.\nIf True, the function will silence results</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">report_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">mute_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassSpectrumCalc.MassSpecCalc.resolving_power_calc", "modulename": "corems.mass_spectrum.calc.MassSpectrumCalc", "qualname": "MassSpecCalc.resolving_power_calc", "kind": "function", "doc": "<p>Calculate the theoretical resolving power</p>\n\n<p>Calls on the MSPeak object function to calculate the resolving power of a peak, this calcs for all peaks in a spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>T</strong> (float):\ntransient time</li>\n<li><strong>B</strong> (float):\nMagnetic Filed Strength (Tesla)</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Marshall et al. (Mass Spectrom Rev. 1998 Jan-Feb;17(1):1-35.)\nDOI: 10.1002/(SICI)1098-2787(1998)17:1&lt;1::AID-MAS1>3.0.CO;2-K</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassSpectrumCalc.MassSpecCalc.number_average_molecular_weight", "modulename": "corems.mass_spectrum.calc.MassSpectrumCalc", "qualname": "MassSpecCalc.number_average_molecular_weight", "kind": "function", "doc": "<p>Average molecular weight calculation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>profile</strong> (bool, optional):\nis data profile or centroid mode. The default is False (e.g. Centroid data)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The average molecular weight.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MassSpectrumCalc.MassSpecCalc.weight_average_molecular_weight", "modulename": "corems.mass_spectrum.calc.MassSpectrumCalc", "qualname": "MassSpecCalc.weight_average_molecular_weight", "kind": "function", "doc": "<p>Weighted Average molecular weight calculation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The weight average molecular weight.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "kind": "module", "doc": "<p>Created on June 2nd 2023</p>\n\n<p>@author: Will Kew</p>\n\n<p>Module for mean resolving power filtration\nBased upon the work in:</p>\n\n<p>Kanawati, B, Bader, TM, Wanczek, K-P, Li, Y, Schmitt-Kopplin, P.\nFourier transform (FT)-artifacts and power-function resolution filter in Fourier transform mass spectrometry.\nRapid Commun Mass Spectrom. 2017; 31: 1607- 1615. <a href=\"https://doi.org/10.1002/rcm.7940\">https://doi.org/10.1002/rcm.7940</a></p>\n\n<p>Calculates a m/z normalised resolving power, fits a gaussian distribution to this, and then filters out peaks which are outside of the user defined number of standard deviations</p>\n"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter", "kind": "class", "doc": "<p>Class for for mean resolving power filtration.</p>\n\n<p>This module implements a mean resolving power filter based on the work described [1]</p>\n\n<p>The MeanResolvingPowerFilter class provides methods to calculate the m/z normalized resolving power, fit a Gaussian distribution to it, and filter out peaks that are outside of the user-defined number of standard deviations.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>mass_spectrum (object)</strong> (The mass spectrum object.):</p></li>\n<li><p><strong>ndeviations (int)</strong> (The number of standard deviations used for filtering.):</p></li>\n<li><p><strong>plot (bool)</strong> (Flag indicating whether to plot the results.):</p></li>\n<li><p><strong>guess_pars (bool)</strong> (Flag indicating whether to guess the parameters for the Gaussian model.):</p></li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>extract_peaks(): Extracts the peaks from the mass spectrum.</li>\n<li>normalise_rps(tmpdf_ms): Normalizes the resolving powers to be independent of m/z.</li>\n<li>calculate_distribution(tmpdf_ms): Calculates the distribution of the resolving powers.</li>\n<li>create_index_list_to_remove(tmpdf_ms, rps_thresh): Creates an index list of peaks to remove based on the calculated thresholds.</li>\n<li>main(): Executes the main filtering process and returns the index list of peaks to remove.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Kanawati, B, Bader, TM, Wanczek, K-P, Li, Y, Schmitt-Kopplin, P.\nFourier transform (FT)-artifacts and power-function resolution filter in Fourier transform mass spectrometry.\nRapid Commun Mass Spectrom. 2017; 31: 1607- 1615. <a href=\"https://doi.org/10.1002/rcm.7940\">https://doi.org/10.1002/rcm.7940</a></li>\n</ol>\n"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.__init__", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mass_spectrum</span>,</span><span class=\"param\">\t<span class=\"n\">ndeviations</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">guess_pars</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.mass_spectrum", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.mass_spectrum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.plot", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.plot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.ndeviations", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.ndeviations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.guess_pars", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.guess_pars", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.extract_peaks", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.extract_peaks", "kind": "function", "doc": "<p>Extracts the peaks from the mass spectrum.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tmpdf_ms</strong> (Pandas DataFrame):\nA DataFrame containing the extracted peaks.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.normalise_rps", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.normalise_rps", "kind": "function", "doc": "<p>Normalizes the resolving powers to be independent of m/z.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tmpdf_ms</strong> (Pandas DataFrame):\nA DataFrame containing the extracted peaks.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tmpdf_ms</strong> (Pandas DataFrame):\nA DataFrame with the resolving powers normalized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tmpdf_ms</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.calculate_distribution", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.calculate_distribution", "kind": "function", "doc": "<p>Calculates the distribution of the resolving powers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tmpdf_ms</strong> (Pandas DataFrame):\nA DataFrame containing the extracted peaks with normalized resolving powers.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rps_thresh</strong> (list):\nA list of the calculated thresholds for filtering.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tmpdf_ms</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.create_index_list_to_remove", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.create_index_list_to_remove", "kind": "function", "doc": "<p>Creates an index list of peaks to remove based on the calculated thresholds.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tmpdf_ms</strong> (Pandas DataFrame):\nA DataFrame containing the extracted peaks with normalized resolving powers.</li>\n<li><strong>rps_thresh</strong> (list):\nA list of the calculated thresholds for filtering.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>index_to_keep</strong> (list):\nA list of indices of peaks to keep.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tmpdf_ms</span>, </span><span class=\"param\"><span class=\"n\">rps_thresh</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.MeanResolvingPowerFilter.MeanResolvingPowerFilter.main", "modulename": "corems.mass_spectrum.calc.MeanResolvingPowerFilter", "qualname": "MeanResolvingPowerFilter.main", "kind": "function", "doc": "<p>Executes the main filtering process and returns the index list of peaks to remove.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>index_to_remove</strong> (list):\nA list of indices of peaks to remove.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "qualname": "NoiseThresholdCalc", "kind": "class", "doc": "<p>Class for noise threshold calculation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>settings</strong> (MSParameters):\nThe mass spectrum parameters object.</li>\n<li><strong>is_centroid</strong> (bool):\nFlag indicating whether the mass spectrum is centroid or profile.</li>\n<li><strong>baseline_noise</strong> (float):\nThe baseline noise.</li>\n<li><strong>baseline_noise_std</strong> (float):\nThe baseline noise standard deviation.</li>\n<li><strong>max_signal_to_noise</strong> (float):\nThe maximum signal to noise.</li>\n<li><strong>max_abundance</strong> (float):\nThe maximum abundance.</li>\n<li><strong>abundance</strong> (np.array):\nThe abundance array.</li>\n<li><strong>abundance_profile</strong> (np.array):\nThe abundance profile array.</li>\n<li><strong>mz_exp</strong> (np.array):\nThe experimental m/z array.</li>\n<li><strong>mz_exp_profile</strong> (np.array):\nThe experimental m/z profile array.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_noise_threshold(). Get the noise threshold.</li>\n<li>cut_mz_domain_noise(). Cut the m/z domain to the noise threshold regions.</li>\n<li>get_noise_average(ymincentroid).\nGet the average noise and standard deviation.</li>\n<li>get_abundance_minima_centroid(abun_cut)\nGet the abundance minima for centroid data.</li>\n<li>run_log_noise_threshold_calc().\nRun the log noise threshold calculation.</li>\n<li>run_noise_threshold_calc().\nRun the noise threshold calculation.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc.get_noise_threshold", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "qualname": "NoiseThresholdCalc.get_noise_threshold", "kind": "function", "doc": "<p>Get the noise threshold.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[Tuple[float, float], Tuple[float, float]]</strong>: A tuple containing the m/z and abundance noise thresholds.\n(min_mz, max_mz), (noise_threshold, noise_threshold)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc.cut_mz_domain_noise", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "qualname": "NoiseThresholdCalc.cut_mz_domain_noise", "kind": "function", "doc": "<p>Cut the m/z domain to the noise threshold regions.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[np.array, np.array]</strong>: A tuple containing the m/z and abundance arrays of the truncated spectrum region.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc.get_noise_average", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "qualname": "NoiseThresholdCalc.get_noise_average", "kind": "function", "doc": "<p>Get the average noise and standard deviation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ymincentroid</strong> (np.array):\nThe ymincentroid array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[float, float]</strong>: A tuple containing the average noise and standard deviation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ymincentroid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc.get_abundance_minima_centroid", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "qualname": "NoiseThresholdCalc.get_abundance_minima_centroid", "kind": "function", "doc": "<p>Get the abundance minima for centroid data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>abun_cut</strong> (np.array):\nThe abundance cut array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.array</strong>: The abundance minima array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">abun_cut</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc.run_log_noise_threshold_calc", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "qualname": "NoiseThresholdCalc.run_log_noise_threshold_calc", "kind": "function", "doc": "<p>Run the log noise threshold calculation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[float, float]</strong>: A tuple containing the average noise and standard deviation.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Method for estimating the noise based on decimal log of all the data point</p>\n\n<p>Idea is that you calculate a histogram of of the log10(abundance) values.\nThe maximum of the histogram == the standard deviation of the noise.</p>\n\n<p>For aFT data it is a gaussian distribution of noise - not implemented here!\nFor mFT data it is a Rayleigh distribution, and the value is actually 10^(abu_max)*0.463.</p>\n\n<p>See the publication cited above for the derivation of this.</p>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>dx.doi.org/10.1021/ac403278t | Anal. Chem. 2014, 86, 3308\u22123316</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc.run_noise_threshold_calc", "modulename": "corems.mass_spectrum.calc.NoiseCalc", "qualname": "NoiseThresholdCalc.run_noise_threshold_calc", "kind": "function", "doc": "<p>Runs noise threshold calculation (not log based method)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[float, float]</strong>: A tuple containing the average noise and standard deviation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc_Bayes", "modulename": "corems.mass_spectrum.calc.NoiseCalc_Bayes", "kind": "module", "doc": "<p>This code is for Bayesian estimation of the noise levels.\nIt is it not implemented or used in the current code base.\nThe packages it uses are not part of the requirements.\nIf you want to use it, you will need to install them manually.</p>\n"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc_Bayes.BayesNoiseCalc", "modulename": "corems.mass_spectrum.calc.NoiseCalc_Bayes", "qualname": "BayesNoiseCalc", "kind": "class", "doc": "<p>Class for noise threshold calculation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>settings</strong> (MSParameters):\nThe mass spectrum parameters object.</li>\n<li><strong>is_centroid</strong> (bool):\nFlag indicating whether the mass spectrum is centroid or profile.</li>\n<li><strong>baseline_noise</strong> (float):\nThe baseline noise.</li>\n<li><strong>baseline_noise_std</strong> (float):\nThe baseline noise standard deviation.</li>\n<li><strong>max_signal_to_noise</strong> (float):\nThe maximum signal to noise.</li>\n<li><strong>max_abundance</strong> (float):\nThe maximum abundance.</li>\n<li><strong>abundance</strong> (np.array):\nThe abundance array.</li>\n<li><strong>abundance_profile</strong> (np.array):\nThe abundance profile array.</li>\n<li><strong>mz_exp</strong> (np.array):\nThe experimental m/z array.</li>\n<li><strong>mz_exp_profile</strong> (np.array):\nThe experimental m/z profile array.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_noise_threshold(). Get the noise threshold.</li>\n<li>cut_mz_domain_noise(). Cut the m/z domain to the noise threshold regions.</li>\n<li>get_noise_average(ymincentroid).\nGet the average noise and standard deviation.</li>\n<li>get_abundance_minima_centroid(abun_cut)\nGet the abundance minima for centroid data.</li>\n<li>run_log_noise_threshold_calc().\nRun the log noise threshold calculation.</li>\n<li>run_noise_threshold_calc().\nRun the noise threshold calculation.</li>\n</ul>\n", "bases": "corems.mass_spectrum.calc.NoiseCalc.NoiseThresholdCalc"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc_Bayes.BayesNoiseCalc.from_posterior", "modulename": "corems.mass_spectrum.calc.NoiseCalc_Bayes", "qualname": "BayesNoiseCalc.from_posterior", "kind": "function", "doc": "<h1 id=\"legacy-code-for-bayesian-efforts-not-used\">Legacy code for Bayesian efforts - not used.</h1>\n\n<p>pymc3 is not installed by default,\n    if have plans to use it manual installation of pymc3\n    package before using this method is needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">param</span>, </span><span class=\"param\"><span class=\"n\">samples</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc_Bayes.BayesNoiseCalc.error_model_from_trace", "modulename": "corems.mass_spectrum.calc.NoiseCalc_Bayes", "qualname": "BayesNoiseCalc.error_model_from_trace", "kind": "function", "doc": "<h1 id=\"legacy-code-for-bayesian-efforts-not-used\">Legacy code for Bayesian efforts - not used.</h1>\n\n<p>pymc3 is not installed by default,\n    if have plans to use it manual installation of pymc3\n    package before using this method is needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">ymincentroid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.NoiseCalc_Bayes.BayesNoiseCalc.simple_model_error_dist", "modulename": "corems.mass_spectrum.calc.NoiseCalc_Bayes", "qualname": "BayesNoiseCalc.simple_model_error_dist", "kind": "function", "doc": "<h1 id=\"legacy-code-for-bayesian-efforts-not-used\">Legacy code for Bayesian efforts - not used.</h1>\n\n<p>pymc3 is not installed by default,\n    if have plans to use it manual installation of pymc3\n    package before using this method is needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ymincentroid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking", "modulename": "corems.mass_spectrum.calc.PeakPicking", "kind": "module", "doc": "<p>@author: Yuri E. Corilo\n@date: Jun 27, 2019</p>\n"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking", "kind": "class", "doc": "<p>Class for peak picking.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>prepare_peak_picking_data().\nPrepare the mz, abundance, and frequence data for peak picking.</li>\n<li>cut_mz_domain_peak_picking().\nCut the m/z domain for peak picking.</li>\n<li>extrapolate_axes_for_pp(mz=None, abund=None, freq=None).\nExtrapolate the m/z axis and fill the abundance axis with 0s.</li>\n<li>do_peak_picking().\nPerform peak picking.</li>\n<li>find_minima(apex_index, abundance, len_abundance, right=True).\nFind the minima of a peak.</li>\n<li>linear_fit_calc(intes, massa, index_term, index_sign).\nAlgebraic solution to a linear fit.</li>\n<li>calculate_resolving_power(intes, massa, current_index).\nCalculate the resolving power of a peak.</li>\n<li>cal_minima(mass, abun).\nCalculate the minima of a peak.</li>\n<li>calc_centroid(mass, abund, freq).\nCalculate the centroid of a peak.</li>\n<li>get_threshold(intes).\nGet the intensity threshold for peak picking.</li>\n<li>algebraic_quadratic(list_mass, list_y).\nFind the apex of a peak - algebraically.</li>\n<li>find_apex_fit_quadratic(mass, abund, freq, current_index).\nFind the apex of a peak.</li>\n<li>check_prominence(abun, current_index, len_abundance, peak_height_diff).\nCheck the prominence of a peak.</li>\n<li>use_the_max(mass, abund, current_index, len_abundance, peak_height_diff).\nUse the max peak height as the centroid.</li>\n<li>calc_centroid_legacy(mass, abund, freq).\nLegacy centroid calculation. Deprecated - for deletion.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.prepare_peak_picking_data", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.prepare_peak_picking_data", "kind": "function", "doc": "<p>Prepare the data for peak picking.</p>\n\n<p>This function will prepare the m/z, abundance, and frequency data for peak picking according to the settings.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz</strong> (ndarray):\nThe m/z axis.</li>\n<li><strong>abundance</strong> (ndarray):\nThe abundance axis.</li>\n<li><strong>freq</strong> (ndarray or None):\nThe frequency axis, if available.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.cut_mz_domain_peak_picking", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.cut_mz_domain_peak_picking", "kind": "function", "doc": "<p>Cut the m/z domain for peak picking.</p>\n\n<p>Simplified function</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_domain_X_low_cutoff</strong> (ndarray):\nThe m/z values within the specified range.</li>\n<li><strong>mz_domain_low_Y_cutoff</strong> (ndarray):\nThe abundance values within the specified range.</li>\n<li><strong>freq_domain_low_Y_cutoff</strong> (ndarray or None):\nThe frequency values within the specified range, if available.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.legacy_cut_mz_domain_peak_picking", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.legacy_cut_mz_domain_peak_picking", "kind": "function", "doc": "<p>Cut the m/z domain for peak picking.\nDEPRECATED</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_domain_X_low_cutoff</strong> (ndarray):\nThe m/z values within the specified range.</li>\n<li><strong>mz_domain_low_Y_cutoff</strong> (ndarray):\nThe abundance values within the specified range.</li>\n<li><strong>freq_domain_low_Y_cutoff</strong> (ndarray or None):\nThe frequency values within the specified range, if available.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.extrapolate_axis", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.extrapolate_axis", "kind": "function", "doc": "<p>This function will extrapolate an input array in both directions by N pts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>initial_array</strong> (ndarray):\nThe input array.</li>\n<li><strong>pts</strong> (int):\nThe number of points to extrapolate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ndarray</strong>: The extrapolated array.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a static method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">initial_array</span>, </span><span class=\"param\"><span class=\"n\">pts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.extrapolate_axes_for_pp", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.extrapolate_axes_for_pp", "kind": "function", "doc": "<p>Extrapolate the m/z axis and fill the abundance axis with 0s.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (ndarray or None):\nThe m/z axis, if available. If None, the experimental m/z axis is used.</li>\n<li><strong>abund</strong> (ndarray or None):\nThe abundance axis, if available. If None, the experimental abundance axis is used.</li>\n<li><strong>freq</strong> (ndarray or None):\nThe frequency axis, if available. If None, the experimental frequency axis is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz</strong> (ndarray):\nThe extrapolated m/z axis.</li>\n<li><strong>abund</strong> (ndarray):\nThe abundance axis with 0s filled.</li>\n<li><strong>freq</strong> (ndarray or None):\nThe extrapolated frequency axis, if available.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function will extrapolate the mz axis by the number of datapoints specified in the settings,\nand fill the abundance axis with 0s.\nThis should prevent peak picking issues at the spectrum edge.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">abund</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.do_peak_picking", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.do_peak_picking", "kind": "function", "doc": "<p>Perform peak picking.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.find_minima", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.find_minima", "kind": "function", "doc": "<p>Find the minima of a peak.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>apex_index</strong> (int):\nThe index of the peak apex.</li>\n<li><strong>abundance</strong> (ndarray):\nThe abundance values.</li>\n<li><strong>len_abundance</strong> (int):\nThe length of the abundance array.</li>\n<li><strong>right</strong> (bool, optional):\nFlag indicating whether to search for minima to the right of the apex (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The index of the minima.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">apex_index</span>, </span><span class=\"param\"><span class=\"n\">abundance</span>, </span><span class=\"param\"><span class=\"n\">len_abundance</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.linear_fit_calc", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.linear_fit_calc", "kind": "function", "doc": "<p>Algebraic solution to a linear fit - roughly 25-50x faster than numpy polyfit when passing only two vals and doing a 1st order fit</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>intes</strong> (ndarray):\nThe intensity values.</li>\n<li><strong>massa</strong> (ndarray):\nThe mass values.</li>\n<li><strong>index_term</strong> (int):\nThe index of the current term.</li>\n<li><strong>index_sign</strong> (str):\nThe index sign</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ndarray</strong>: The coefficients of the linear fit.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a static method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">intes</span>, </span><span class=\"param\"><span class=\"n\">massa</span>, </span><span class=\"param\"><span class=\"n\">index_term</span>, </span><span class=\"param\"><span class=\"n\">index_sign</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.calculate_resolving_power", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.calculate_resolving_power", "kind": "function", "doc": "<p>Calculate the resolving power of a peak.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>intes</strong> (ndarray):\nThe intensity values.</li>\n<li><strong>massa</strong> (ndarray):\nThe mass values.</li>\n<li><strong>current_index</strong> (int):\nThe index of the current peak.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The resolving power of the peak.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a conservative calculation of resolving power,\nthe peak need to be resolved at least at the half-maximum magnitude,\notherwise, the combined full width at half maximum is used to calculate resolving power.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">intes</span>, </span><span class=\"param\"><span class=\"n\">massa</span>, </span><span class=\"param\"><span class=\"n\">current_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.cal_minima", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.cal_minima", "kind": "function", "doc": "<p>Calculate the minima of a peak.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass</strong> (ndarray):\nThe mass values.</li>\n<li><strong>abun</strong> (ndarray):\nThe abundance values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ndarray or None</strong>: The mass values at the minima, if found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass</span>, </span><span class=\"param\"><span class=\"n\">abun</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.calc_centroid", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.calc_centroid", "kind": "function", "doc": "<p>Calculate the centroid of a peak.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass</strong> (ndarray):\nThe mass values.</li>\n<li><strong>abund</strong> (ndarray):\nThe abundance values.</li>\n<li><strong>freq</strong> (ndarray or None):\nThe frequency values, if available.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass</span>, </span><span class=\"param\"><span class=\"n\">abund</span>, </span><span class=\"param\"><span class=\"n\">freq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.get_threshold", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.get_threshold", "kind": "function", "doc": "<p>Get the intensity threshold for peak picking.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>intes</strong> (ndarray):\nThe intensity values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The intensity threshold.</li>\n<li><strong>float</strong>: The factor to multiply the intensity threshold by.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">intes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.algebraic_quadratic", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.algebraic_quadratic", "kind": "function", "doc": "<p>Find the apex of a peak - algebraically.\nFaster than using numpy polyfit by ~28x per fit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list_mass</strong> (ndarray):\nlist of m/z values (3 points)</li>\n<li><strong>list_y</strong> (ndarray):\nlist of abundance values (3 points)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>a, b, c</strong> (float):\ncoefficients of the quadratic equation.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is a static method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list_mass</span>, </span><span class=\"param\"><span class=\"n\">list_y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.find_apex_fit_quadratic", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.find_apex_fit_quadratic", "kind": "function", "doc": "<p>Find the apex of a peak.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass</strong> (ndarray):\nThe mass values.</li>\n<li><strong>abund</strong> (ndarray):\nThe abundance values.</li>\n<li><strong>freq</strong> (ndarray or None):\nThe frequency values, if available.</li>\n<li><strong>current_index</strong> (int):\nThe index of the current peak.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The m/z value of the peak apex.</li>\n<li><strong>float</strong>: The frequency value of the peak apex, if available.</li>\n<li><strong>float</strong>: The abundance value of the peak apex.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass</span>, </span><span class=\"param\"><span class=\"n\">abund</span>, </span><span class=\"param\"><span class=\"n\">freq</span>, </span><span class=\"param\"><span class=\"n\">current_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.check_prominence", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.check_prominence", "kind": "function", "doc": "<p>Check the prominence of a peak.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>abun</strong> (ndarray):\nThe abundance values.</li>\n<li><strong>current_index</strong> (int):\nThe index of the current peak.</li>\n<li><strong>len_abundance</strong> (int):\nThe length of the abundance array.</li>\n<li><strong>peak_height_diff</strong> (function):\nThe function to calculate the peak height difference.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple or False</strong>: A tuple containing the indexes of the peak, if the prominence is above the threshold.\nOtherwise, False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">abun</span>, </span><span class=\"param\"><span class=\"n\">current_index</span>, </span><span class=\"param\"><span class=\"n\">len_abundance</span>, </span><span class=\"param\"><span class=\"n\">peak_height_diff</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.use_the_max", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.use_the_max", "kind": "function", "doc": "<p>Use the max peak height as the centroid</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass</strong> (ndarray):\nThe mass values.</li>\n<li><strong>abund</strong> (ndarray):\nThe abundance values.</li>\n<li><strong>current_index</strong> (int):\nThe index of the current peak.</li>\n<li><strong>len_abundance</strong> (int):\nThe length of the abundance array.</li>\n<li><strong>peak_height_diff</strong> (function):\nThe function to calculate the peak height difference.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The m/z value of the peak apex.</li>\n<li><strong>float</strong>: The abundance value of the peak apex.</li>\n<li><strong>tuple or None</strong>: A tuple containing the indexes of the peak, if the prominence is above the threshold.\nOtherwise, None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass</span>, </span><span class=\"param\"><span class=\"n\">abund</span>, </span><span class=\"param\"><span class=\"n\">current_index</span>, </span><span class=\"param\"><span class=\"n\">len_abundance</span>, </span><span class=\"param\"><span class=\"n\">peak_height_diff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.calc.PeakPicking.PeakPicking.calc_centroid_legacy", "modulename": "corems.mass_spectrum.calc.PeakPicking", "qualname": "PeakPicking.calc_centroid_legacy", "kind": "function", "doc": "<p>Legacy centroid calculation\nDeprecated - for deletion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass</span>, </span><span class=\"param\"><span class=\"n\">abund</span>, </span><span class=\"param\"><span class=\"n\">freq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory", "modulename": "corems.mass_spectrum.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.overrides", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "overrides", "kind": "function", "doc": "<p>Checks if the method overrides a method from an interface class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface_class</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase", "kind": "class", "doc": "<p>A mass spectrum base class, stores the profile data and instrument settings.</p>\n\n<p>Iteration over a list of MSPeaks classes stored at the _mspeaks attributes.\n_mspeaks is populated under the hood by calling process_mass_spec method.\nIteration is null if _mspeaks is empty.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_exp</strong> (array_like):\nThe m/z values of the mass spectrum.</li>\n<li><strong>abundance</strong> (array_like):\nThe abundance values of the mass spectrum.</li>\n<li><strong>d_params</strong> (dict):\nA dictionary of parameters for the mass spectrum.</li>\n<li><strong>**kwargs</strong>: Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mspeaks</strong> (list):\nA list of mass peaks.</li>\n<li><strong>is_calibrated</strong> (bool):\nWhether the mass spectrum is calibrated.</li>\n<li><strong>is_centroid</strong> (bool):\nWhether the mass spectrum is centroided.</li>\n<li><strong>has_frequency</strong> (bool):\nWhether the mass spectrum has a frequency domain.</li>\n<li><strong>calibration_order</strong> (None or int):\nThe order of the mass spectrum's calibration.</li>\n<li><strong>calibration_points</strong> (None or ndarray):\nThe calibration points of the mass spectrum.</li>\n<li><strong>calibration_ref_mzs</strong> (None or ndarray):\nThe reference m/z values of the mass spectrum's calibration.</li>\n<li><strong>calibration_meas_mzs</strong> (None or ndarray):\nThe measured m/z values of the mass spectrum's calibration.</li>\n<li><strong>calibration_RMS</strong> (None or float):\nThe root mean square of the mass spectrum's calibration.</li>\n<li><strong>calibration_segment</strong> (None or CalibrationSegment):\nThe calibration segment of the mass spectrum.</li>\n<li><strong>_abundance</strong> (ndarray):\nThe abundance values of the mass spectrum.</li>\n<li><strong>_mz_exp</strong> (ndarray):\nThe m/z values of the mass spectrum.</li>\n<li><strong>_mspeaks</strong> (list):\nA list of mass peaks.</li>\n<li><strong>_dict_nominal_masses_indexes</strong> (dict):\nA dictionary of nominal masses and their indexes.</li>\n<li><strong>_baseline_noise</strong> (float):\nThe baseline noise of the mass spectrum.</li>\n<li><strong>_baseline_noise_std</strong> (float):\nThe standard deviation of the baseline noise of the mass spectrum.</li>\n<li><strong>_dynamic_range</strong> (float or None):\nThe dynamic range of the mass spectrum.</li>\n<li><strong>_transient_settings</strong> (None or TransientSettings):\nThe transient settings of the mass spectrum.</li>\n<li><strong>_frequency_domain</strong> (None or FrequencyDomain):\nThe frequency domain of the mass spectrum.</li>\n<li><strong>_mz_cal_profile</strong> (None or MzCalibrationProfile):\nThe m/z calibration profile of the mass spectrum.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>process_mass_spec(). Main function to process the mass spectrum,\nincluding calculating the noise threshold, peak picking, and resetting the MSpeak indexes.</li>\n</ul>\n\n<p>See also: MassSpecCentroid(), MassSpecfromFreq(), MassSpecProfile()</p>\n", "bases": "corems.mass_spectrum.calc.MassSpectrumCalc.MassSpecCalc, corems.mass_spectrum.calc.KendrickGroup.KendrickGrouping"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.__init__", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mz_exp</span>, </span><span class=\"param\"><span class=\"n\">abundance</span>, </span><span class=\"param\"><span class=\"n\">d_params</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.mspeaks", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.mspeaks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.is_calibrated", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.is_calibrated", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.is_centroid", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.is_centroid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.has_frequency", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.has_frequency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_order", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_order", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_points", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_ref_mzs", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_ref_mzs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_meas_mzs", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_meas_mzs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_RMS", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_RMS", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_segment", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_segment", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_raw_error_median", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_raw_error_median", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.calibration_raw_error_stdev", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.calibration_raw_error_stdev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.set_indexes", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.set_indexes", "kind": "function", "doc": "<p>Set the mass spectrum to iterate over only the selected MSpeaks indexes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list_indexes</strong> (list of int):\nA list of integers representing the indexes of the MSpeaks to iterate over.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">list_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.reset_indexes", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.reset_indexes", "kind": "function", "doc": "<p>Reset the mass spectrum to iterate over all MSpeaks objects.</p>\n\n<p>This method resets the mass spectrum to its original state, allowing iteration over all MSpeaks objects.\nIt also sets the index of each MSpeak object to its corresponding position in the mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.add_mspeak", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.add_mspeak", "kind": "function", "doc": "<p>Add a new MSPeak object to the MassSpectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ion_charge</strong> (int):\nThe ion charge of the MSPeak.</li>\n<li><strong>mz_exp</strong> (float):\nThe experimental m/z value of the MSPeak.</li>\n<li><strong>abundance</strong> (float):\nThe abundance of the MSPeak.</li>\n<li><strong>resolving_power</strong> (float):\nThe resolving power of the MSPeak.</li>\n<li><strong>signal_to_noise</strong> (float):\nThe signal-to-noise ratio of the MSPeak.</li>\n<li><strong>massspec_indexes</strong> (list):\nA list of indexes of the MSPeak in the MassSpectrum object.</li>\n<li><strong>exp_freq</strong> (float, optional):\nThe experimental frequency of the MSPeak. Defaults to None.</li>\n<li><strong>ms_parent</strong> (MSParent, optional):\nThe MSParent object associated with the MSPeak. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span>,</span><span class=\"param\">\t<span class=\"n\">mz_exp</span>,</span><span class=\"param\">\t<span class=\"n\">abundance</span>,</span><span class=\"param\">\t<span class=\"n\">resolving_power</span>,</span><span class=\"param\">\t<span class=\"n\">signal_to_noise</span>,</span><span class=\"param\">\t<span class=\"n\">massspec_indexes</span>,</span><span class=\"param\">\t<span class=\"n\">exp_freq</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ms_parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.reset_cal_therms", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.reset_cal_therms", "kind": "function", "doc": "<p>Reset calibration terms and recalculate the mass-to-charge ratio and abundance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Aterm</strong> (float):\nThe A-term calibration coefficient.</li>\n<li><strong>Bterm</strong> (float):\nThe B-term calibration coefficient.</li>\n<li><strong>C</strong> (float):\nThe C-term calibration coefficient.</li>\n<li><strong>fas</strong> (float, optional):\nThe frequency amplitude scaling factor. Default is 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Aterm</span>, </span><span class=\"param\"><span class=\"n\">Bterm</span>, </span><span class=\"param\"><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">fas</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.clear_molecular_formulas", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.clear_molecular_formulas", "kind": "function", "doc": "<p>Clear the molecular formulas for all mspeaks in the MassSpectrum.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: An array of the cleared molecular formulas for each mspeak in the MassSpectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.process_mass_spec", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.process_mass_spec", "kind": "function", "doc": "<p>Process the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>keep_profile</strong> (bool, optional):\nWhether to keep the profile data after processing. Defaults to True.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This method does the following:</p>\n\n<ul>\n<li>calculates the noise threshold</li>\n<li>does peak picking (creates mspeak_objs)</li>\n<li>resets the mspeak_obj indexes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keep_profile</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.cal_noise_threshold", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.cal_noise_threshold", "kind": "function", "doc": "<p>Calculate the noise threshold of the mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.parameters", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.parameters", "kind": "variable", "doc": "<p>Return the parameters of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.set_parameter_from_json", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.set_parameter_from_json", "kind": "function", "doc": "<p>Set the parameters of the mass spectrum from a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parameters_path</strong> (str):\nThe path to the JSON file containing the parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.set_parameter_from_toml", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.set_parameter_from_toml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.mspeaks_settings", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.mspeaks_settings", "kind": "variable", "doc": "<p>Return the MS peak settings of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.settings", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.settings", "kind": "variable", "doc": "<p>Return the settings of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.molecular_search_settings", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.molecular_search_settings", "kind": "variable", "doc": "<p>Return the molecular search settings of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.mz_cal_profile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.mz_cal_profile", "kind": "variable", "doc": "<p>Return the calibrated m/z profile of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.mz_cal", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.mz_cal", "kind": "variable", "doc": "<p>Return the calibrated m/z values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.mz_exp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.mz_exp", "kind": "variable", "doc": "<p>Return the experimental m/z values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.freq_exp_profile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.freq_exp_profile", "kind": "variable", "doc": "<p>Return the experimental frequency profile of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.freq_exp_pp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.freq_exp_pp", "kind": "variable", "doc": "<p>Return the experimental frequency values of the mass spectrum that are used for peak picking.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.mz_exp_profile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.mz_exp_profile", "kind": "variable", "doc": "<p>Return the experimental m/z profile of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.mz_exp_pp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.mz_exp_pp", "kind": "variable", "doc": "<p>Return the experimental m/z values of the mass spectrum that are used for peak picking.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.abundance_profile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.abundance_profile", "kind": "variable", "doc": "<p>Return the abundance profile of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.abundance_profile_pp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.abundance_profile_pp", "kind": "variable", "doc": "<p>Return the abundance profile of the mass spectrum that is used for peak picking.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.abundance", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.abundance", "kind": "variable", "doc": "<p>Return the abundance values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.freq_exp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.freq_exp", "kind": "function", "doc": "<p>Return the experimental frequency values of the mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.resolving_power", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.resolving_power", "kind": "variable", "doc": "<p>Return the resolving power values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.signal_to_noise", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.signal_to_noise", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.nominal_mz", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.nominal_mz", "kind": "variable", "doc": "<p>Return the nominal m/z values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.get_mz_and_abundance_peaks_tuples", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.get_mz_and_abundance_peaks_tuples", "kind": "function", "doc": "<p>Return a list of tuples containing the m/z and abundance values of the mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.kmd", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.kmd", "kind": "variable", "doc": "<p>Return the Kendrick mass defect values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.kendrick_mass", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.kendrick_mass", "kind": "variable", "doc": "<p>Return the Kendrick mass values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.max_mz_exp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.max_mz_exp", "kind": "variable", "doc": "<p>Return the maximum experimental m/z value of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.min_mz_exp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.min_mz_exp", "kind": "variable", "doc": "<p>Return the minimum experimental m/z value of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.max_abundance", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.max_abundance", "kind": "variable", "doc": "<p>Return the maximum abundance value of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.max_signal_to_noise", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.max_signal_to_noise", "kind": "variable", "doc": "<p>Return the maximum signal-to-noise ratio of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.most_abundant_mspeak", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.most_abundant_mspeak", "kind": "variable", "doc": "<p>Return the most abundant MSpeak object of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.min_abundance", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.min_abundance", "kind": "variable", "doc": "<p>Return the minimum abundance value of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.dynamic_range", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.dynamic_range", "kind": "variable", "doc": "<p>Return the dynamic range of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.baseline_noise", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.baseline_noise", "kind": "variable", "doc": "<p>Return the baseline noise of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.baseline_noise_std", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.baseline_noise_std", "kind": "variable", "doc": "<p>Return the standard deviation of the baseline noise of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.Aterm", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.Aterm", "kind": "variable", "doc": "<p>Return the A-term calibration coefficient of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.Bterm", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.Bterm", "kind": "variable", "doc": "<p>Return the B-term calibration coefficient of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.Cterm", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.Cterm", "kind": "variable", "doc": "<p>Return the C-term calibration coefficient of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filename", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filename", "kind": "variable", "doc": "<p>Return the filename of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.dir_location", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.dir_location", "kind": "variable", "doc": "<p>Return the directory location of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.sort_by_mz", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.sort_by_mz", "kind": "function", "doc": "<p>Sort the mass spectrum by m/z values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.sort_by_abundance", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.sort_by_abundance", "kind": "function", "doc": "<p>Sort the mass spectrum by abundance values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.tic", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.tic", "kind": "variable", "doc": "<p>Return the total ion current of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.check_mspeaks_warning", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.check_mspeaks_warning", "kind": "function", "doc": "<p>Check if the mass spectrum has MSpeaks objects.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Warning</strong>: If the mass spectrum has no MSpeaks objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.check_mspeaks", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.check_mspeaks", "kind": "function", "doc": "<p>Check if the mass spectrum has MSpeaks objects.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the mass spectrum has no MSpeaks objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.remove_assignment_by_index", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.remove_assignment_by_index", "kind": "function", "doc": "<p>Remove the molecular formula assignment of the MSpeaks objects at the specified indexes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indexes</strong> (list of int):\nA list of indexes of the MSpeaks objects to remove the molecular formula assignment from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_index", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_index", "kind": "function", "doc": "<p>Filter the mass spectrum by the specified indexes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list_indexes</strong> (list of int):\nA list of indexes of the MSpeaks objects to drop.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">list_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_mz", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_mz", "kind": "function", "doc": "<p>Filter the mass spectrum by the specified m/z range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_mz</strong> (float):\nThe minimum m/z value to keep.</li>\n<li><strong>max_mz</strong> (float):\nThe maximum m/z value to keep.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_mz</span>, </span><span class=\"param\"><span class=\"n\">max_mz</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_s2n", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_s2n", "kind": "function", "doc": "<p>Filter the mass spectrum by the specified signal-to-noise ratio range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_s2n</strong> (float):\nThe minimum signal-to-noise ratio to keep.</li>\n<li><strong>max_s2n</strong> (float, optional):\nThe maximum signal-to-noise ratio to keep. Defaults to False (no maximum).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_s2n</span>, </span><span class=\"param\"><span class=\"n\">max_s2n</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_abundance", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_abundance", "kind": "function", "doc": "<p>Filter the mass spectrum by the specified abundance range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_abund</strong> (float):\nThe minimum abundance to keep.</li>\n<li><strong>max_abund</strong> (float, optional):\nThe maximum abundance to keep. Defaults to False (no maximum).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_abund</span>, </span><span class=\"param\"><span class=\"n\">max_abund</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_max_resolving_power", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_max_resolving_power", "kind": "function", "doc": "<p>Filter the mass spectrum by the specified maximum resolving power.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>B</strong> (float):</p></li>\n<li><p><strong>T</strong> (float):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">T</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_mean_resolving_power", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_mean_resolving_power", "kind": "function", "doc": "<p>Filter the mass spectrum by the specified mean resolving power.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ndeviations</strong> (float, optional):\nThe number of standard deviations to use for filtering. Defaults to 3.</li>\n<li><strong>plot</strong> (bool, optional):\nWhether to plot the resolving power distribution. Defaults to False.</li>\n<li><strong>guess_pars</strong> (bool, optional):\nWhether to guess the parameters for the Gaussian model. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ndeviations</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">guess_pars</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_min_resolving_power", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_min_resolving_power", "kind": "function", "doc": "<p>Filter the mass spectrum by the specified minimum resolving power.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>B</strong> (float):</p></li>\n<li><p><strong>T</strong> (float):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">T</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.filter_by_noise_threshold", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.filter_by_noise_threshold", "kind": "function", "doc": "<p>Filter the mass spectrum by the noise threshold.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.find_peaks", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.find_peaks", "kind": "function", "doc": "<p>Find the peaks of the mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.change_kendrick_base_all_mspeaks", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.change_kendrick_base_all_mspeaks", "kind": "function", "doc": "<p>Change the Kendrick base of all MSpeaks objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kendrick_dict_base</strong> (dict):\nA dictionary of the Kendrick base to change to.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Example of kendrick_dict_base parameter: kendrick_dict_base = {\"C\": 1, \"H\": 2} or {\"C\": 1, \"H\": 1, \"O\":1} etc</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kendrick_dict_base</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.get_nominal_mz_first_last_indexes", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.get_nominal_mz_first_last_indexes", "kind": "function", "doc": "<p>Return the first and last indexes of the MSpeaks objects with the specified nominal mass.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nominal_mass</strong> (int):\nThe nominal mass to get the indexes for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the first and last indexes of the MSpeaks objects with the specified nominal mass.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nominal_mass</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.get_masses_count_by_nominal_mass", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.get_masses_count_by_nominal_mass", "kind": "function", "doc": "<p>Return a dictionary of the nominal masses and their counts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.datapoints_count_by_nominal_mz", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.datapoints_count_by_nominal_mz", "kind": "function", "doc": "<p>Return a dictionary of the nominal masses and their counts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_overlay</strong> (float, optional):\nThe m/z overlay to use for counting. Defaults to 0.1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary of the nominal masses and their counts.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz_overlay</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.get_nominal_mass_indexes", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.get_nominal_mass_indexes", "kind": "function", "doc": "<p>Return the indexes of the MSpeaks objects with the specified nominal mass.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nominal_mass</strong> (int):\nThe nominal mass to get the indexes for.</li>\n<li><strong>overlay</strong> (float, optional):\nThe m/z overlay to use for counting. Defaults to 0.1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>generator</strong>: A generator of the indexes of the MSpeaks objects with the specified nominal mass.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nominal_mass</span>, </span><span class=\"param\"><span class=\"n\">overlay</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.plot_centroid", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.plot_centroid", "kind": "function", "doc": "<p>Plot the centroid data of the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nThe matplotlib axes to plot on. Defaults to None.</li>\n<li><strong>c</strong> (str, optional):\nThe color to use for the plot. Defaults to 'g' (green).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: The matplotlib axes containing the plot.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If no centroid data is found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">&#39;g&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.plot_profile_and_noise_threshold", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.plot_profile_and_noise_threshold", "kind": "function", "doc": "<p>Plot the profile data and noise threshold of the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nThe matplotlib axes to plot on. Defaults to None.</li>\n<li><strong>legend</strong> (bool, optional):\nWhether to show the legend. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: The matplotlib axes containing the plot.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If no noise threshold is found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.plot_mz_domain_profile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.plot_mz_domain_profile", "kind": "function", "doc": "<p>Plot the m/z domain profile of the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>color</strong> (str, optional):\nThe color to use for the plot. Defaults to 'green'.</li>\n<li><strong>ax</strong> (matplotlib.axes.Axes, optional):\nThe matplotlib axes to plot on. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: The matplotlib axes containing the plot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;green&#39;</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.to_excel", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.to_excel", "kind": "function", "doc": "<p>Export the mass spectrum to an Excel file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str):\nThe path to the Excel file to export to.</li>\n<li><strong>write_metadata</strong> (bool, optional):\nWhether to write the metadata to the Excel file. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.to_hdf", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.to_hdf", "kind": "function", "doc": "<p>Export the mass spectrum to an HDF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str):\nThe path to the HDF file to export to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.to_csv", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.to_csv", "kind": "function", "doc": "<p>Export the mass spectrum to a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str):\nThe path to the CSV file to export to.</li>\n<li><strong>write_metadata</strong> (bool, optional):\nWhether to write the metadata to the CSV file. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.to_pandas", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.to_pandas", "kind": "function", "doc": "<p>Export the mass spectrum to a Pandas dataframe with pkl extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str):\nThe path to the CSV file to export to.</li>\n<li><strong>write_metadata</strong> (bool, optional):\nWhether to write the metadata to the CSV file. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.to_dataframe", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.to_dataframe", "kind": "function", "doc": "<p>Return the mass spectrum as a Pandas dataframe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>additional_columns</strong> (list, optional):\nA list of additional columns to include in the dataframe. Defaults to None.\nSuitable columns are: \"Aromaticity Index\", \"Aromaticity Index (modified)\", and \"NOSC\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: The mass spectrum as a Pandas dataframe.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">additional_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.to_json", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.to_json", "kind": "function", "doc": "<p>Return the mass spectrum as a JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.parameters_json", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.parameters_json", "kind": "function", "doc": "<p>Return the parameters of the mass spectrum as a JSON string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecBase.parameters_toml", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecBase.parameters_toml", "kind": "function", "doc": "<p>Return the parameters of the mass spectrum as a TOML string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecProfile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecProfile", "kind": "class", "doc": "<p>A mass spectrum class when the entry point is on profile format</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Stores the profile data and instrument settings.\nIteration over a list of MSPeaks classes stored at the _mspeaks attributes.\n_mspeaks is populated under the hood by calling process_mass_spec method.\nIteration is null if _mspeaks is empty. Many more attributes and methods inherited from MassSpecBase().</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_dict</strong> (dict):\nA dictionary containing the profile data.</li>\n<li><strong>d_params : dict{'str'</strong> (float, int or str}):\ncontains the instrument settings and processing settings</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the mass spectrum. Defaults to True.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_abundance</strong> (ndarray):\nThe abundance values of the mass spectrum.</li>\n<li><strong>_mz_exp</strong> (ndarray):\nThe m/z values of the mass spectrum.</li>\n<li><strong>_mspeaks</strong> (list):\nA list of mass peaks.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>process_mass_spec(). Process the mass spectrum.</li>\n</ul>\n\n<p>see also: MassSpecBase(), MassSpecfromFreq(), MassSpecCentroid()</p>\n", "bases": "MassSpecBase"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecProfile.__init__", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecProfile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_dict</span>, </span><span class=\"param\"><span class=\"n\">d_params</span>, </span><span class=\"param\"><span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecfromFreq", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecfromFreq", "kind": "class", "doc": "<p>A mass spectrum class when data entry is on frequency domain</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Transform to m/z based on the settings stored at d_params</li>\n<li>Stores the profile data and instrument settings</li>\n<li>Iteration over a list of MSPeaks classes stored at the _mspeaks attributes</li>\n<li>_mspeaks is populated under the hood by calling process_mass_spec method</li>\n<li>iteration is null if _mspeaks is empty</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>frequency_domain</strong> (list(float)):\nall datapoints in frequency domain in Hz</li>\n<li><strong>magnitude :  frequency_domain</strong> (list(float)):\nall datapoints in for magnitude of each frequency datapoint</li>\n<li><strong>d_params : dict{'str'</strong> (float, int or str}):\ncontains the instrument settings and processing settings</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the mass spectrum. Defaults to True.</li>\n<li><strong>keep_profile</strong> (bool, optional):\nWhether to keep the profile data. Defaults to True.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>has_frequency</strong> (bool):\nWhether the mass spectrum has frequency data.</li>\n<li><strong>_frequency_domain</strong> (list(float)):\nFrequency domain in Hz</li>\n<li><strong>label</strong> (str):\nstore label (Bruker, Midas Transient, see Labels class ). It across distinct processing points</li>\n<li><strong>_abundance</strong> (ndarray):\nThe abundance values of the mass spectrum.</li>\n<li><strong>_mz_exp</strong> (ndarray):\nThe m/z values of the mass spectrum.</li>\n<li><strong>_mspeaks</strong> (list):\nA list of mass peaks.</li>\n<li><strong>See Also</strong> (all the attributes of MassSpecBase class):</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>_set_mz_domain().\ncalculates the m_z based on the setting of d_params</li>\n<li>process_mass_spec().  Process the mass spectrum.</li>\n</ul>\n\n<p>see also: MassSpecBase(), MassSpecProfile(), MassSpecCentroid()</p>\n", "bases": "MassSpecBase"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecfromFreq.__init__", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecfromFreq.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">frequency_domain</span>,</span><span class=\"param\">\t<span class=\"n\">magnitude</span>,</span><span class=\"param\">\t<span class=\"n\">d_params</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">keep_profile</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecfromFreq.has_frequency", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecfromFreq.has_frequency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecfromFreq.magnetron_frequency", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecfromFreq.magnetron_frequency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecfromFreq.magnetron_frequency_sigma", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecfromFreq.magnetron_frequency_sigma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecfromFreq.transient_settings", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecfromFreq.transient_settings", "kind": "variable", "doc": "<p>Return the transient settings of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecfromFreq.calc_magnetron_freq", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecfromFreq.calc_magnetron_freq", "kind": "function", "doc": "<p>Calculates the magnetron frequency of the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_magnetron_freq</strong> (float, optional):\nThe maximum magnetron frequency. Defaults to 50.</li>\n<li><strong>magnetron_freq_bins</strong> (int, optional):\nThe number of bins to use for the histogram. Defaults to 300.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Calculates the magnetron frequency by examining all the picked peaks and the distances between them in the frequency domain.\nA histogram of those values below the threshold 'max_magnetron_freq' with the 'magnetron_freq_bins' number of bins is calculated.\nA gaussian model is fit to this histogram - the center value of this (statistically probably) the magnetron frequency.\nThis appears to work well or nOmega datasets, but may not work well for 1x datasets or those with very low magnetron peaks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_magnetron_freq</span><span class=\"o\">=</span><span class=\"mi\">50</span>, </span><span class=\"param\"><span class=\"n\">magnetron_freq_bins</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid", "kind": "class", "doc": "<p>A mass spectrum class when the entry point is on centroid format</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Stores the centroid data and instrument settings</li>\n<li>Simulate profile data based on Gaussian or Lorentzian peak shape</li>\n<li>Iteration over a list of MSPeaks classes stored at the _mspeaks attributes</li>\n<li>_mspeaks is populated under the hood by calling process_mass_spec method</li>\n<li>iteration is null if _mspeaks is empty</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_dict : dict {string</strong> (numpy array float64 )):\ncontains keys [m/z, Abundance, Resolving Power, S/N]</li>\n<li><strong>d_params : dict{'str'</strong> (float, int or str}):\ncontains the instrument settings and processing settings</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the mass spectrum. Defaults to True.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>label</strong> (str):\nstore label (Bruker, Midas Transient, see Labels class)</li>\n<li><strong>_baseline_noise</strong> (float):\nstore baseline noise</li>\n<li><strong>_baseline_noise_std</strong> (float):\nstore baseline noise std</li>\n<li><strong>_abundance</strong> (ndarray):\nThe abundance values of the mass spectrum.</li>\n<li><strong>_mz_exp</strong> (ndarray):\nThe m/z values of the mass spectrum.</li>\n<li><strong>_mspeaks</strong> (list):\nA list of mass peaks.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>process_mass_spec().\nProcess the mass spectrum. Overriden from MassSpecBase. Populates the _mspeaks list with MSpeaks class using the centroid data.</li>\n<li>__simulate_profile__data__().\nSimulate profile data based on Gaussian or Lorentzian peak shape. Needs theoretical resolving power calculation and define peak shape, intended for plotting and inspection purposes only.</li>\n</ul>\n\n<p>see also: MassSpecBase(), MassSpecfromFreq(), MassSpecProfile()</p>\n", "bases": "MassSpecBase"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid.__init__", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_dict</span>, </span><span class=\"param\"><span class=\"n\">d_params</span>, </span><span class=\"param\"><span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid.is_centroid", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid.is_centroid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid.data_dict", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid.data_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid.mz_exp_profile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid.mz_exp_profile", "kind": "variable", "doc": "<p>Return the m/z profile of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid.abundance_profile", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid.abundance_profile", "kind": "variable", "doc": "<p>Return the abundance profile of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid.tic", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid.tic", "kind": "variable", "doc": "<p>Return the total ion current of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroid.process_mass_spec", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroid.process_mass_spec", "kind": "function", "doc": "<p>Process the mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes", "kind": "class", "doc": "<p>A mass spectrum class when the entry point is on low resolution centroid format</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Does not store MSPeak Objs, will iterate over mz, abundance pairs instead</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_dict : dict {string</strong> (numpy array float64 )):\ncontains keys [m/z, Abundance, Resolving Power, S/N]</li>\n<li><strong>d_params : dict{'str'</strong> (float, int or str}):\ncontains the instrument settings and processing settings</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_processed_tic</strong> (float):\nstore processed total ion current</li>\n<li><strong>_abundance</strong> (ndarray):\nThe abundance values of the mass spectrum.</li>\n<li><strong>_mz_exp</strong> (ndarray):\nThe m/z values of the mass spectrum.</li>\n</ul>\n", "bases": "MassSpecCentroid"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes.__init__", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_dict</span>, </span><span class=\"param\"><span class=\"n\">d_params</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes.mz_exp", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes.mz_exp", "kind": "variable", "doc": "<p>Return the m/z values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes.abundance", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes.abundance", "kind": "variable", "doc": "<p>Return the abundance values of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes.processed_tic", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes.processed_tic", "kind": "variable", "doc": "<p>Return the processed total ion current of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes.tic", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes.tic", "kind": "variable", "doc": "<p>Return the total ion current of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes.mz_abun_tuples", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes.mz_abun_tuples", "kind": "variable", "doc": "<p>Return the m/z and abundance values of the mass spectrum as a list of tuples.</p>\n"}, {"fullname": "corems.mass_spectrum.factory.MassSpectrumClasses.MassSpecCentroidLowRes.mz_abun_dict", "modulename": "corems.mass_spectrum.factory.MassSpectrumClasses", "qualname": "MassSpecCentroidLowRes.mz_abun_dict", "kind": "variable", "doc": "<p>Return the m/z and abundance values of the mass spectrum as a dictionary.</p>\n"}, {"fullname": "corems.mass_spectrum.input", "modulename": "corems.mass_spectrum.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass", "modulename": "corems.mass_spectrum.input.baseClass", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass", "kind": "class", "doc": "<p>The MassListBaseClass object reads mass list data types and returns the mass spectrum obj</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (Path or S3Path):\nFull data path.</li>\n<li><strong>isCentroid</strong> (bool, optional):\nDetermines the mass spectrum data structure. If set to True, it assumes centroid mode. If set to False, it assumes profile mode and attempts to peak pick. Default is True.</li>\n<li><strong>analyzer</strong> (str, optional):\nThe analyzer used for the mass spectrum. Default is 'Unknown'.</li>\n<li><strong>instrument_label</strong> (str, optional):\nThe label of the instrument used for the mass spectrum. Default is 'Unknown'.</li>\n<li><strong>sample_name</strong> (str, optional):\nThe name of the sample. Default is None.</li>\n<li><strong>header_lines</strong> (int, optional):\nThe number of lines to skip in the file, including the column labels line. Default is 0.</li>\n<li><strong>isThermoProfile</strong> (bool, optional):\nDetermines the number of expected columns in the file. If set to True, only m/z and intensity columns are expected. Signal-to-noise ratio (S/N) and resolving power (RP) will be calculated based on the data. Default is False.</li>\n<li><strong>headerless</strong> (bool, optional):\nIf True, assumes that there are no headers present in the file (e.g., a .xy file from Bruker) and assumes two columns: m/z and intensity. Default is False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>parameters</strong> (DataInputSetting):\nThe data input settings for the mass spectrum.</li>\n<li><strong>data_type</strong> (str):\nThe type of data in the file.</li>\n<li><strong>delimiter</strong> (str):\nThe delimiter used to read text-based files.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>set_parameter_from_toml(parameters_path). Sets the data input settings from a TOML file.</li>\n<li>set_parameter_from_json(parameters_path). Sets the data input settings from a JSON file.</li>\n<li>get_dataframe(). Reads the file and returns the data as a pandas DataFrame.</li>\n<li>load_settings(mass_spec_obj, output_parameters). Loads the settings for the mass spectrum.</li>\n<li>get_output_parameters(polarity, scan_index=0). Returns the output parameters for the mass spectrum.</li>\n<li>clean_data_frame(dataframe). Cleans the data frame by removing columns that are not in the expected columns set.</li>\n</ul>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.__init__", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_location</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"n\">s3path</span><span class=\"o\">.</span><span class=\"n\">S3Path</span>,</span><span class=\"param\">\t<span class=\"n\">isCentroid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">analyzer</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sample_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_lines</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">isThermoProfile</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">headerless</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.file_location", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.header_lines", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.header_lines", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.isCentroid", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.isCentroid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.isThermoProfile", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.isThermoProfile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.headerless", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.headerless", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.analyzer", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.instrument_label", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.instrument_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.sample_name", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.sample_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.parameters", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.set_parameter_from_toml", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.set_parameter_from_toml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.set_parameter_from_json", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.set_parameter_from_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.data_type", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.data_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.delimiter", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.delimiter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.encoding_detector", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.encoding_detector", "kind": "function", "doc": "<p>Detects the encoding of a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str):\nThe location of the file to be analyzed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The detected encoding of the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_location</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.set_data_type", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.set_data_type", "kind": "function", "doc": "<p>Set the data type and delimiter based on the file extension.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>: If the data type could not be automatically recognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.get_dataframe", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.get_dataframe", "kind": "function", "doc": "<p>Get the data as a pandas DataFrame.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: The data as a pandas DataFrame.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>: If the data type is not supported.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.load_settings", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.load_settings", "kind": "function", "doc": "<h1 id=\"todo-loading-output-parameters-from-json-file-is-not-functional\">TODO loading output parameters from json file is not functional</h1>\n\n<p>Load settings from a JSON file and apply them to the given mass_spec_obj.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spec_obj</strong> (MassSpec):\nThe mass spectrum object to apply the settings to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spec_obj</span>, </span><span class=\"param\"><span class=\"n\">output_parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.get_output_parameters", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.get_output_parameters", "kind": "function", "doc": "<p>Get the output parameters for the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>polarity</strong> (int):\nThe polarity of the mass spectrum +1 or -1.</li>\n<li><strong>scan_index</strong> (int, optional):\nThe index of the scan. Default is 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the output parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">polarity</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">scan_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.clean_data_frame", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.clean_data_frame", "kind": "function", "doc": "<p>Clean the input dataframe by removing columns that are not expected.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: The input dataframe to be cleaned.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.check_columns", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.check_columns", "kind": "function", "doc": "<p>Check if the given header labels match the expected columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_labels</strong> (list):\nThe header labels to be checked.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If any expected column is not found in the header labels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">header_labels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.read_xml_peaks", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.read_xml_peaks", "kind": "function", "doc": "<p>Read peaks from a Bruker .xml file and return a pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (str):\nThe path to the .xml file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: A DataFrame containing the peak data with columns: 'm/z', 'I', 'Resolving Power', 'Area', 'S/N', 'fwhm'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.baseClass.MassListBaseClass.get_xml_polarity", "modulename": "corems.mass_spectrum.input.baseClass", "qualname": "MassListBaseClass.get_xml_polarity", "kind": "function", "doc": "<p>Get the polarity from an XML peaklist.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The polarity of the XML peaklist. Returns -1 for negative polarity, +1 for positive polarity.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the data type is not XML peaklist in Bruker format or if the polarity is unhandled.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5", "modulename": "corems.mass_spectrum.input.boosterHDF5", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum", "kind": "class", "doc": "<p>The ReadHDF_BoosterMassSpectrum class parses the mass spectrum data from an HDF file and generate a mass spectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str):\nThe path to the HDF file.</li>\n<li><strong>isCentroid</strong> (bool, optional):\nSpecifies whether the mass spectrum is centroided or not. Default is False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>polarity</strong> (int):\nThe polarity of the mass spectrum.</li>\n<li><strong>h5pydata</strong> (h5py.File):\nThe HDF file object.</li>\n<li><strong>scans</strong> (list):\nThe list of scan names in the HDF file.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_data_profile(mz, abundance, auto_process). Returns a MassSpecProfile object from the given m/z and abundance arrays.</li>\n<li>get_attr_data(scan, attr_srt). Returns the attribute value for the given scan and attribute name.</li>\n<li>get_polarity(file_location). Returns the polarity of the mass spectrum.</li>\n<li>get_mass_spectrum(auto_process). Returns the mass spectrum as a MassSpecProfile object.</li>\n<li>get_output_parameters(). Returns the default output parameters for the mass spectrum.</li>\n</ul>\n", "bases": "corems.mass_spectrum.input.baseClass.MassListBaseClass"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum.__init__", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_location</span>, </span><span class=\"param\"><span class=\"n\">isCentroid</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum.polarity", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum.polarity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum.get_data_profile", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum.get_data_profile", "kind": "function", "doc": "<p>Returns a MassSpecProfile object from the given m/z and abundance arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (array_like):\nThe m/z values.</li>\n<li><strong>abundance</strong> (array_like):\nThe abundance values.</li>\n<li><strong>auto_process</strong> (bool):\nSpecifies whether to automatically process the mass spectrum.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecProfile</strong>: The MassSpecProfile object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mz</span>,</span><span class=\"param\">\t<span class=\"n\">abundance</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectrum</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MassSpectrumClasses</span><span class=\"o\">.</span><span class=\"n\">MassSpecProfile</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum.get_attr_data", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum.get_attr_data", "kind": "function", "doc": "<p>Returns the attribute value for the given scan and attribute name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan</strong> (int):\nThe scan index.</li>\n<li><strong>attr_srt</strong> (str):\nThe attribute name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: The attribute value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan</span>, </span><span class=\"param\"><span class=\"n\">attr_srt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum.get_polarity", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum.get_polarity", "kind": "function", "doc": "<p>Returns the polarity of the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str):\nThe path to the HDF file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The polarity of the mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">s3path</span><span class=\"o\">.</span><span class=\"n\">S3Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum.get_mass_spectrum", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum.get_mass_spectrum", "kind": "function", "doc": "<p>Returns the mass spectrum as a MassSpecProfile object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>auto_process</strong> (bool, optional):\nSpecifies whether to automatically process the mass spectrum. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecProfile</strong>: The MassSpecProfile object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectrum</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MassSpectrumClasses</span><span class=\"o\">.</span><span class=\"n\">MassSpecProfile</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.boosterHDF5.ReadHDF_BoosterMassSpectrum.get_output_parameters", "modulename": "corems.mass_spectrum.input.boosterHDF5", "qualname": "ReadHDF_BoosterMassSpectrum.get_output_parameters", "kind": "function", "doc": "<p>Returns the default output parameters for the mass spectrum.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The default output parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5", "modulename": "corems.mass_spectrum.input.coremsHDF5", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum", "kind": "class", "doc": "<p>Class for reading mass spectrum data from a CoreMS HDF5 file.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>h5pydata</strong> (h5py.File):\nThe HDF5 file object.</li>\n<li><strong>scans</strong> (list):\nList of scan labels in the HDF5 file.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_location</strong> (str or S3Path):\nThe path to the CoreMS HDF5 file.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>load_raw_data(mass_spectrum, scan_index=0) Load raw data into the mass spectrum object.</li>\n<li>get_mass_spectrum(scan_number=0, time_index=-1, auto_process=True, load_settings=True, load_raw=True).Get a mass spectrum object.</li>\n<li>load_settings(mass_spectrum, scan_index=0, time_index=-1). Load settings into the mass spectrum object.</li>\n<li>get_dataframe(scan_index=0, time_index=-1). Get a pandas DataFrame representing the mass spectrum.</li>\n<li>get_time_index_to_pull(scan_label, time_index). Get the time index to pull from the HDF5 file.</li>\n<li>get_high_level_attr_data(attr_str). Get high-level attribute data from the HDF5 file.</li>\n<li>get_scan_group_attr_data(scan_index, time_index, attr_group, attr_srt=None). Get scan group attribute data from the HDF5 file.</li>\n<li>get_raw_data_attr_data(scan_index, attr_group, attr_str). Get raw data attribute data from the HDF5 file.</li>\n<li>get_output_parameters(polarity, scan_index=0). Get the output parameters for the mass spectrum.</li>\n</ul>\n", "bases": "corems.mass_spectrum.input.massList.ReadCoremsMasslist"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.__init__", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_location</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.h5pydata", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.h5pydata", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.scans", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.scans", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.load_raw_data", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.load_raw_data", "kind": "function", "doc": "<p>Load raw data into the mass spectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpecCentroid):\nThe mass spectrum object to load the raw data into.</li>\n<li><strong>scan_index</strong> (int, optional):\nThe index of the scan to load the raw data from. Default is 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span>, </span><span class=\"param\"><span class=\"n\">scan_index</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.get_mass_spectrum", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.get_mass_spectrum", "kind": "function", "doc": "<p>Instantiate a mass spectrum object from the CoreMS HDF5 file.\nNote that this always returns a centroid mass spectrum object; functionality for profile and\nfrequency mass spectra is not yet implemented.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_number</strong> (int, optional):\nThe index of the scan to retrieve the mass spectrum from. Default is 0.</li>\n<li><strong>time_index</strong> (int, optional):\nThe index of the time point to retrieve the mass spectrum from. Default is -1.</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the mass spectrum. Default is True.</li>\n<li><strong>load_settings</strong> (bool, optional):\nWhether to load the settings into the mass spectrum object. Default is True.</li>\n<li><strong>load_raw</strong> (bool, optional):\nWhether to load the raw data into the mass spectrum object. Default is True.</li>\n<li><strong>load_molecular_formula</strong> (bool, optional):\nWhether to load the molecular formula into the mass spectrum object.\nDefault is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecCentroid</strong>: The mass spectrum object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the CoreMS file is not valid.\nIf the mass spectrum has not been processed and load_molecular_formula is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scan_number</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">time_index</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">load_settings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">load_raw</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">load_molecular_formula</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.load_settings", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.load_settings", "kind": "function", "doc": "<p>Load settings into the mass spectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpecCentroid):\nThe mass spectrum object to load the settings into.</li>\n<li><strong>scan_index</strong> (int, optional):\nThe index of the scan to load the settings from. Default is 0.</li>\n<li><strong>time_index</strong> (int, optional):\nThe index of the time point to load the settings from. Default is -1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span>, </span><span class=\"param\"><span class=\"n\">scan_index</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">time_index</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.get_dataframe", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.get_dataframe", "kind": "function", "doc": "<p>Get a pandas DataFrame representing the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_index</strong> (int, optional):\nThe index of the scan to retrieve the DataFrame from. Default is 0.</li>\n<li><strong>time_index</strong> (int, optional):\nThe index of the time point to retrieve the DataFrame from. Default is -1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: The pandas DataFrame representing the mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_index</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">time_index</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.get_time_index_to_pull", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.get_time_index_to_pull", "kind": "function", "doc": "<p>Get the time index to pull from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_label</strong> (str):\nThe label of the scan.</li>\n<li><strong>time_index</strong> (int):\nThe index of the time point.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The time index to pull.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_label</span>, </span><span class=\"param\"><span class=\"n\">time_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.get_high_level_attr_data", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.get_high_level_attr_data", "kind": "function", "doc": "<p>Get high-level attribute data from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>attr_str</strong> (str):\nThe attribute string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The attribute data.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If the attribute string is not found in the HDF5 file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attr_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.get_scan_group_attr_data", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.get_scan_group_attr_data", "kind": "function", "doc": "<p>Get scan group attribute data from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_index</strong> (int):\nThe index of the scan.</li>\n<li><strong>time_index</strong> (int):\nThe index of the time point.</li>\n<li><strong>attr_group</strong> (str):\nThe attribute group.</li>\n<li><strong>attr_srt</strong> (str, optional):\nThe attribute string. Default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The attribute data.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This method retrieves attribute data from the HDF5 file for a specific scan and time point.\nThe attribute data is stored in the specified attribute group.\nIf an attribute string is provided, only the corresponding attribute value is returned.\nIf no attribute string is provided, all attribute data in the group is returned as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_index</span>, </span><span class=\"param\"><span class=\"n\">time_index</span>, </span><span class=\"param\"><span class=\"n\">attr_group</span>, </span><span class=\"param\"><span class=\"n\">attr_srt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.get_raw_data_attr_data", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.get_raw_data_attr_data", "kind": "function", "doc": "<p>Get raw data attribute data from the HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_index</strong> (int):\nThe index of the scan.</li>\n<li><strong>attr_group</strong> (str):\nThe attribute group.</li>\n<li><strong>attr_str</strong> (str):\nThe attribute string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The attribute data.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: If the attribute string is not found in the attribute group.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This method retrieves the attribute data associated with a specific scan, attribute group, and attribute string\nfrom the HDF5 file. It returns the attribute data as a dictionary.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">get_raw_data_attr_data</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;group1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;attribute1&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_index</span>, </span><span class=\"param\"><span class=\"n\">attr_group</span>, </span><span class=\"param\"><span class=\"n\">attr_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.coremsHDF5.ReadCoreMSHDF_MassSpectrum.get_output_parameters", "modulename": "corems.mass_spectrum.input.coremsHDF5", "qualname": "ReadCoreMSHDF_MassSpectrum.get_output_parameters", "kind": "function", "doc": "<p>Get the output parameters for the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>polarity</strong> (str):\nThe polarity of the mass spectrum.</li>\n<li><strong>scan_index</strong> (int, optional):\nThe index of the scan. Default is 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The output parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">scan_index</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.massList", "modulename": "corems.mass_spectrum.input.massList", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.massList.ReadCoremsMasslist", "modulename": "corems.mass_spectrum.input.massList", "qualname": "ReadCoremsMasslist", "kind": "class", "doc": "<p>The ReadCoremsMasslist object reads processed mass list data types\nand returns the mass spectrum obj with the molecular formula obj</p>\n\n<p><strong>Only available for centroid mass spectrum type:</strong> it will ignore the parameter <strong>isCentroid</strong>\nPlease see MassListBaseClass for more details</p>\n", "bases": "corems.mass_spectrum.input.baseClass.MassListBaseClass"}, {"fullname": "corems.mass_spectrum.input.massList.ReadCoremsMasslist.get_mass_spectrum", "modulename": "corems.mass_spectrum.input.massList", "qualname": "ReadCoremsMasslist.get_mass_spectrum", "kind": "function", "doc": "<p>Get the mass spectrum object from the processed mass list data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loadSettings</strong> (bool, optional):\nWhether to load the settings for the mass spectrum. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecCentroid</strong>: The mass spectrum object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the input file is not a valid CoreMS file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loadSettings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectrum</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MassSpectrumClasses</span><span class=\"o\">.</span><span class=\"n\">MassSpecCentroid</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.massList.ReadCoremsMasslist.add_molecular_formula", "modulename": "corems.mass_spectrum.input.massList", "qualname": "ReadCoremsMasslist.add_molecular_formula", "kind": "function", "doc": "<p>Add molecular formula information to the mass spectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spec_obj</strong> (MassSpecCentroid):\nThe mass spectrum object to add the molecular formula to.</li>\n<li><strong>dataframe</strong> (pandas.DataFrame):\nThe processed mass list data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spec_obj</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.massList.ReadMassList", "modulename": "corems.mass_spectrum.input.massList", "qualname": "ReadMassList", "kind": "class", "doc": "<p>The ReadMassList object reads unprocessed mass list data types\nand returns the mass spectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MassListBaseClass</strong> (class):\nThe base class for reading mass list data types.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_mass_spectrum(polarity, scan=0, auto_process=True, loadSettings=True). Reads mass list data types and returns the mass spectrum object.</li>\n</ul>\n", "bases": "corems.mass_spectrum.input.baseClass.MassListBaseClass"}, {"fullname": "corems.mass_spectrum.input.massList.ReadMassList.get_mass_spectrum", "modulename": "corems.mass_spectrum.input.massList", "qualname": "ReadMassList.get_mass_spectrum", "kind": "function", "doc": "<p>Reads mass list data types and returns the mass spectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>polarity</strong> (int):\nThe polarity of the mass spectrum (+1 or -1).</li>\n<li><strong>scan</strong> (int, optional):\nThe scan number of the mass spectrum (default is 0).</li>\n<li><strong>auto_process</strong> (bool, optional):\nFlag indicating whether to automatically process the mass spectrum (default is True).</li>\n<li><strong>loadSettings</strong> (bool, optional):\nFlag indicating whether to load settings for the mass spectrum (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mass_spec</strong> (MassSpecCentroid or MassSpecProfile):\nThe mass spectrum object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">scan</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">loadSettings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.massList.ReadBrukerXMLList", "modulename": "corems.mass_spectrum.input.massList", "qualname": "ReadBrukerXMLList", "kind": "class", "doc": "<p>The ReadBrukerXMLList object reads Bruker XML objects\nand returns the mass spectrum object.\nSee MassListBaseClass for details</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MassListBaseClass</strong> (class):\nThe base class for reading mass list data types and returning the mass spectrum object.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_mass_spectrum(polarity: bool = None, scan: int = 0, auto_process: bool = True, loadSettings: bool = True). Reads mass list data types and returns the mass spectrum object.</li>\n</ul>\n", "bases": "corems.mass_spectrum.input.baseClass.MassListBaseClass"}, {"fullname": "corems.mass_spectrum.input.massList.ReadBrukerXMLList.get_mass_spectrum", "modulename": "corems.mass_spectrum.input.massList", "qualname": "ReadBrukerXMLList.get_mass_spectrum", "kind": "function", "doc": "<p>Reads mass list data types and returns the mass spectrum object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>polarity</strong> (bool, optional):\nThe polarity of the mass spectrum. Can be +1 or -1. If not provided, it will be determined from the XML file.</li>\n<li><strong>scan</strong> (int, optional):\nThe scan number of the mass spectrum. Default is 0.</li>\n<li><strong>auto_process</strong> (bool, optional):\nWhether to automatically process the mass spectrum. Default is True.</li>\n<li><strong>loadSettings</strong> (bool, optional):\nWhether to load the settings for the mass spectrum. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mass_spec</strong> (MassSpecCentroid):\nThe mass spectrum object representing the centroided mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scan</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">loadSettings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.numpyArray", "modulename": "corems.mass_spectrum.input.numpyArray", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.input.numpyArray.ms_from_array_profile", "modulename": "corems.mass_spectrum.input.numpyArray", "qualname": "ms_from_array_profile", "kind": "function", "doc": "<p>Create a MassSpecProfile object from an array of m/z values and abundance values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (numpy.ndarray):\nArray of m/z values.</li>\n<li><strong>abundance</strong> (numpy.ndarray):\nArray of abundance values.</li>\n<li><strong>dataname</strong> (str):\nName of the data.</li>\n<li><strong>polarity</strong> (int, optional):\nPolarity of the data. The default is -1.</li>\n<li><strong>auto_process</strong> (bool, optional):\nFlag to automatically process the data. The default is True.</li>\n<li><strong>data_type</strong> (str, optional):\nType of the data. The default is Labels.simulated_profile.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecProfile</strong>: The created MassSpecProfile object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mz</span>,</span><span class=\"param\">\t<span class=\"n\">abundance</span>,</span><span class=\"param\">\t<span class=\"n\">dataname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Simulated Profile&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.numpyArray.ms_from_array_centroid", "modulename": "corems.mass_spectrum.input.numpyArray", "qualname": "ms_from_array_centroid", "kind": "function", "doc": "<p>Create a MassSpecCentroid object from an array of m/z values, abundance values, resolution power, and signal-to-noise ratio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (numpy.ndarray):\nArray of m/z values.</li>\n<li><strong>abundance</strong> (numpy.ndarray):\nArray of abundance values.</li>\n<li><strong>rp</strong> (list(float)):\nList of resolving power values.</li>\n<li><strong>s2n</strong> (list(float)):\nList of signal-to-noise ratio values.</li>\n<li><strong>dataname</strong> (str):\nName of the data.</li>\n<li><strong>polarity</strong> (int, optional):\nPolarity of the data. The default is -1.</li>\n<li><strong>auto_process</strong> (bool, optional):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecCentroid</strong>: The created MassSpecCentroid object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mz</span>,</span><span class=\"param\">\t<span class=\"n\">abundance</span>,</span><span class=\"param\">\t<span class=\"n\">rp</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">s2n</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dataname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.input.numpyArray.get_output_parameters", "modulename": "corems.mass_spectrum.input.numpyArray", "qualname": "get_output_parameters", "kind": "function", "doc": "<p>Generate the output parameters for creating a MassSpecProfile or MassSpecCentroid object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>polarity</strong> (int):\nPolarity of the data.</li>\n<li><strong>file_location</strong> (str):\nFile location.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Output parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">polarity</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">file_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output", "modulename": "corems.mass_spectrum.output", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.output.export", "modulename": "corems.mass_spectrum.output.export", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport", "kind": "class", "doc": "<p>A class for exporting high-resolution mass spectra.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_file_path</strong> (str):\nThe output file path.</li>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to export.</li>\n<li><strong>output_type</strong> (str, optional):\nThe type of output file. Defaults to 'excel'. Can be 'excel', 'csv', 'pandas' or 'hdf5'.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>output_file</strong> (Path):\nThe output file path.</li>\n<li><strong>output_type</strong> (str):\nThe type of output file.</li>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to export.</li>\n<li><strong>atoms_order_list</strong> (list):\nThe list of assigned atoms in the order specified by Atoms.atoms_order list.</li>\n<li><strong>columns_label</strong> (list):\nThe column labels in order.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>save().\nSave the mass spectrum data to the output file.</li>\n<li>run().\nRun the export process.</li>\n<li>get_pandas_df().\nReturns the mass spectrum data as a pandas DataFrame.</li>\n<li>write_settings(output_path, mass_spectrum).\nWrites the settings of the mass spectrum to a JSON file.</li>\n<li>to_pandas(write_metadata=True).\nExports the mass spectrum data to a pandas DataFrame and saves it as a pickle file.</li>\n<li>to_excel(write_metadata=True).\nExports the mass spectrum data to an Excel file.</li>\n<li>to_csv(write_metadata=True).\nExports the mass spectrum data to a CSV file.</li>\n<li>to_json().\nExports the mass spectrum data to a JSON string.</li>\n<li>to_hdf().\nExports the mass spectrum data to an HDF5 file.</li>\n<li>parameters_to_toml().\nConverts the mass spectrum parameters to a TOML string.</li>\n<li>parameters_to_json().\nConverts the mass spectrum parameters to a JSON string.</li>\n<li>get_mass_spec_attrs(mass_spectrum).\nReturns the mass spectrum attributes as a dictionary.</li>\n<li>get_all_used_atoms_in_order(mass_spectrum).\nReturns the list of assigned atoms in the order specified by Atoms.atoms_order list.</li>\n<li>list_dict_to_list(mass_spectrum, is_hdf5=False).\nReturns the mass spectrum data as a list of dictionaries.</li>\n<li>get_list_dict_data(mass_spectrum, include_no_match=True, include_isotopologues=True, isotopologue_inline=True, no_match_inline=False, is_hdf5=False).\nReturns the mass spectrum data as a list of dictionaries.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.__init__", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_file_path</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span>, </span><span class=\"param\"><span class=\"n\">output_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;excel&#39;</span></span>)</span>"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.output_file", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.output_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.output_type", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.output_type", "kind": "variable", "doc": "<p>Returns the output type of the mass spectrum.</p>\n"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.mass_spectrum", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.mass_spectrum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.atoms_order_list", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.atoms_order_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.save", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.save", "kind": "function", "doc": "<p>Save the mass spectrum data to the output file.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the output type is not supported.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.run", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.run", "kind": "function", "doc": "<p>Run the export process.</p>\n\n<p>This method is called when the thread starts.\nIt calls the save method to perform the export.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.get_pandas_df", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.get_pandas_df", "kind": "function", "doc": "<p>Returns the mass spectrum data as a pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>additional_columns</strong> (list, optional):\nAdditional columns to include in the DataFrame. Defaults to None.\nSuitable additional columns are: 'Aromaticity Index', 'NOSC', 'Aromaticity Index (modified)'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: The mass spectrum data as a pandas DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">additional_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.write_settings", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.write_settings", "kind": "function", "doc": "<p>Writes the settings of the mass spectrum to a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong> (str):\nThe output file path.</li>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to export.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.to_pandas", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.to_pandas", "kind": "function", "doc": "<p>Exports the mass spectrum data to a pandas DataFrame and saves it as a pickle file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>write_metadata</strong> (bool, optional):\nWhether to write the metadata to a JSON file. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.to_excel", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.to_excel", "kind": "function", "doc": "<p>Exports the mass spectrum data to an Excel file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>write_metadata</strong> (bool, optional):\nWhether to write the metadata to a JSON file. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.to_csv", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.to_csv", "kind": "function", "doc": "<p>Exports the mass spectrum data to a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>write_metadata</strong> (bool, optional):\nWhether to write the metadata to a JSON file. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.to_json", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.to_json", "kind": "function", "doc": "<p>Exports the mass spectrum data to a JSON string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.add_mass_spectrum_to_hdf5", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.add_mass_spectrum_to_hdf5", "kind": "function", "doc": "<p>Adds the mass spectrum data to an HDF5 file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hdf_handle</strong> (h5py.File):\nThe HDF5 file handle.</li>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to add to the HDF5 file.</li>\n<li><strong>group_key</strong> (str):\nThe group key (where to add the mass spectrum data within the HDF5 file).</li>\n<li><strong>mass_spectra_group</strong> (h5py.Group, optional):\nThe mass spectra group. Defaults to None (no group, mass spectrum is added to the root).</li>\n<li><strong>export_raw</strong> (bool, optional):\nWhether to export the raw data. Defaults to True.\nIf False, only the processed data (peaks) is exported (essentially centroided data).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hdf_handle</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectrum</span>,</span><span class=\"param\">\t<span class=\"n\">group_key</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectra_group</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">export_raw</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.to_hdf", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.to_hdf", "kind": "function", "doc": "<p>Exports the mass spectrum data to an HDF5 file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.parameters_to_toml", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.parameters_to_toml", "kind": "function", "doc": "<p>Converts the mass spectrum parameters to a TOML string.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The TOML string of the mass spectrum parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.parameters_to_json", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.parameters_to_json", "kind": "function", "doc": "<p>Converts the mass spectrum parameters to a JSON string.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The JSON string of the mass spectrum parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.get_mass_spec_attrs", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.get_mass_spec_attrs", "kind": "function", "doc": "<p>Returns the mass spectrum attributes as a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to export.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The mass spectrum attributes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.get_all_used_atoms_in_order", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.get_all_used_atoms_in_order", "kind": "function", "doc": "<p>Returns the list of assigned atoms in the order specified by Atoms.atoms_order list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to export.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The list of assigned atoms in the order specified by Atoms.atoms_order list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.list_dict_to_list", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.list_dict_to_list", "kind": "function", "doc": "<p>Returns the mass spectrum data as a list of dictionaries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to export.</li>\n<li><strong>is_hdf5</strong> (bool, optional):\nWhether the mass spectrum is being exported to an HDF5 file. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The mass spectrum data as a list of dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span>, </span><span class=\"param\"><span class=\"n\">is_hdf5</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.mass_spectrum.output.export.HighResMassSpecExport.get_list_dict_data", "modulename": "corems.mass_spectrum.output.export", "qualname": "HighResMassSpecExport.get_list_dict_data", "kind": "function", "doc": "<p>Returns the mass spectrum data as a list of dictionaries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum to export.</li>\n<li><strong>include_no_match</strong> (bool, optional):\nWhether to include unassigned (no match) data. Defaults to True.</li>\n<li><strong>include_isotopologues</strong> (bool, optional):\nWhether to include isotopologues. Defaults to True.</li>\n<li><strong>isotopologue_inline</strong> (bool, optional):\nWhether to include isotopologues inline. Defaults to True.</li>\n<li><strong>no_match_inline</strong> (bool, optional):\nWhether to include unassigned (no match) data inline. Defaults to False.</li>\n<li><strong>is_hdf5</strong> (bool, optional):\nWhether the mass spectrum is being exported to an HDF5 file. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The mass spectrum data as a list of dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectrum</span>,</span><span class=\"param\">\t<span class=\"n\">include_no_match</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_isotopologues</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">isotopologue_inline</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">no_match_inline</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_hdf5</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">additional_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula", "modulename": "corems.molecular_formula", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.calc", "modulename": "corems.molecular_formula.calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.calc.MolecularFormulaCalc", "modulename": "corems.molecular_formula.calc.MolecularFormulaCalc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.calc.MolecularFormulaCalc.isospec_version", "modulename": "corems.molecular_formula.calc.MolecularFormulaCalc", "qualname": "isospec_version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;2.2.2&#x27;"}, {"fullname": "corems.molecular_formula.calc.MolecularFormulaCalc.MolecularFormulaCalc", "modulename": "corems.molecular_formula.calc.MolecularFormulaCalc", "qualname": "MolecularFormulaCalc", "kind": "class", "doc": "<p>Class of calculations related to molecular formula</p>\n\n<p>This class is not intended to be used directly, but rather to be inherited by other classes in the molecular_formula/factory module like MolecularFormula, MolecularFormulaIsotopologue, and LCMSLibRefMolecularFormula</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mz_calc</strong> (float):\nThe m/z value of the molecular formula.</li>\n<li><strong>neutral_mass</strong> (float):\nThe neutral mass of the molecular formula.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge of the molecular formula.</li>\n<li><strong>_external_mz</strong> (float):\nThe externally provided m/z value of the molecular formula.</li>\n<li><strong>_d_molecular_formula</strong> (dict):\nThe dictionary representation of the molecular formula.</li>\n<li><strong>_mspeak_parent</strong> (object):\nThe parent MS peak object associated with the molecular formula.</li>\n<li><strong>_assignment_mass_error</strong> (float):\nThe mass error of the molecular formula.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>_calc_resolving_power_low_pressure(B, T)\nCalculate the resolving power at low pressure.</li>\n<li>_calc_resolving_power_high_pressure(B, T)\nCalculate the resolving power at high pressure.</li>\n<li>_adduct_mz(adduct_atom, ion_charge)\nGet the m/z value of an adducted ion version of the molecular formula.</li>\n<li>_protonated_mz(ion_charge)\nGet the m/z value of a protonated or deprotonated ion version of the molecular formula.</li>\n<li>_radical_mz(ion_charge)\nGet the m/z value of a radical ion version of the molecular formula.</li>\n<li>_neutral_mass()\nGet the neutral mass of the molecular formula.</li>\n<li>_calc_mz()\nGet the m/z value of the molecular formula.</li>\n<li>_calc_assignment_mass_error(method='ppm')\nCalculate the mass error of the molecular formula.</li>\n<li>_calc_mz_confidence(mean=0)\nCalculate the m/z confidence of the molecular formula.</li>\n<li>_calc_isotopologue_confidence()\nCalculate the isotopologue confidence of the molecular formula.</li>\n<li>normalize_distance(dist, dist_range)\nNormalize the distance value.</li>\n<li>subtract_formula(formula_obj, formated=True)\nSubtract a formula from the current formula object.</li>\n<li>_calc_average_mz_score()\nCalculate the average m/z error score of the molecular formula identification, including the isotopologues.</li>\n</ul>\n"}, {"fullname": "corems.molecular_formula.calc.MolecularFormulaCalc.MolecularFormulaCalc.normalize_distance", "modulename": "corems.molecular_formula.calc.MolecularFormulaCalc", "qualname": "MolecularFormulaCalc.normalize_distance", "kind": "function", "doc": "<p>Normalize the distance value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dist</strong> (float):\nThe distance value to be normalized.</li>\n<li><strong>dist_range</strong> (list):\nThe range of the distance value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dist</span>, </span><span class=\"param\"><span class=\"n\">dist_range</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.calc.MolecularFormulaCalc.MolecularFormulaCalc.subtract_formula", "modulename": "corems.molecular_formula.calc.MolecularFormulaCalc", "qualname": "MolecularFormulaCalc.subtract_formula", "kind": "function", "doc": "<p>Subtract a formula from the current formula object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>formula_obj</strong> (MolecularFormula):\nMolecularFormula object to be subtracted from the current formula object</li>\n<li><strong>formated</strong> (bool, optional):\nIf True, returns the formula in string format, by default True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">formula_obj</span>, </span><span class=\"param\"><span class=\"n\">formated</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.calc.MolecularFormulaCalc.MolecularFormulaCalc.dbe_ai", "modulename": "corems.molecular_formula.calc.MolecularFormulaCalc", "qualname": "MolecularFormulaCalc.dbe_ai", "kind": "variable", "doc": "<p>Calculate the double bond equivalent (DBE) of the molecular formula, based on the number of carbons, hydrogens, and oxygens.</p>\n"}, {"fullname": "corems.molecular_formula.factory", "modulename": "corems.molecular_formula.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase", "kind": "class", "doc": "<p>Base class for representing a molecular formula.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_formula</strong> (dict, list, str):\nThe molecular formula.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>ion_type</strong> (str, optional):\nThe ion type. Defaults to None.</li>\n<li><strong>adduct_atom</strong> (str, optional):\nThe adduct atom. Defaults to None.</li>\n<li><strong>mspeak_parent</strong> (_MSPeak, optional):\nThe parent mass spectrum peak object instance. Defaults to None.</li>\n<li><strong>external_mz</strong> (float, optional):\nThe external m/z value. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>: If the ion type is not 'DE_OR_PROTONATED', 'RADICAL' or  'ADDUCT'.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>isotopologue_count_percentile</strong> (float):\nThe isotopologue count percentile.</li>\n<li><strong>O_C</strong> (float):\nThe O/C ratio.</li>\n<li><strong>H_C</strong> (float):\nThe H/C ratio.</li>\n<li><strong>dbe</strong> (float):\nThe double bond equivalent.</li>\n<li><strong>mz_nominal_calc</strong> (int):\nThe nominal m/z value.</li>\n<li><strong>mz_error</strong> (float):\nThe m/z error.</li>\n<li><strong>mz_calc</strong> (float):\nThe m/z value.</li>\n<li><strong>protonated_mz</strong> (float):\nThe protonated or deprotonated m/z value.</li>\n<li><strong>radical_mz</strong> (float):\nThe radical m/z value.</li>\n<li><strong>neutral_mass</strong> (float):\nThe neutral mass.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>atoms</strong> (list):\nThe atoms in the molecular formula.</li>\n<li><strong>confidence_score</strong> (float):\nThe confidence score of the molecular formula identification.</li>\n<li><strong>isotopologue_similarity</strong> (float):\nThe isotopologue similarity score of the molecular formula identification.</li>\n<li><strong>average_mz_error_score</strong> (float):\nThe average m/z error score of the molecular formula identification, including the isotopologues.</li>\n<li><strong>mz_error_score</strong> (float):\nThe m/z error score of the molecular formula identification.</li>\n<li><strong>kmd</strong> (float):\nThe Kendrick mass defect (KMD).</li>\n<li><strong>kendrick_mass</strong> (float):\nThe Kendrick mass.</li>\n<li><strong>knm</strong> (float):\nThe nominal Kendrick mass.</li>\n<li><strong>string</strong> (str):\nThe molecular formula string.</li>\n<li><strong>string_formated</strong> (str):\nThe molecular formula string formated with subscripts and superscripts.</li>\n<li><strong>class_label</strong> (str):\nThe class label.</li>\n<li><strong>class_dict</strong> (dict):\nThe class dictionary.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>change_kendrick_base(kendrick_dict_base).\nChange the Kendrick base.</li>\n<li>isotopologues(min_abundance, current_mono_abundance, dynamic_range).\nCalculate the isotopologues.</li>\n<li>atoms_qnt(atom).\nGet the atom quantity.</li>\n<li>atoms_symbol(atom).\nGet the atom symbol without the mass number.</li>\n<li>to_dict().\nGet the molecular formula as a dictionary.</li>\n<li>to_list().\nGet the molecular formula as a list.</li>\n</ul>\n", "bases": "corems.molecular_formula.calc.MolecularFormulaCalc.MolecularFormulaCalc"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.__init__", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">molecular_formula</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atom</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mspeak_parent</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">external_mz</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.is_isotopologue", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.is_isotopologue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.expected_isotopologues", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.expected_isotopologues", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.mspeak_mf_isotopologues_indexes", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.mspeak_mf_isotopologues_indexes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.get", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.get", "kind": "function", "doc": "<p>Get the atom quantity of a specific atom.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom</strong> (str):\nThe atom symbol.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The atom quantity.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atom</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.split", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.split", "kind": "function", "doc": "<p>Splits the molecular formula string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>delimiters</strong> (list):\nThe list of delimiters.</li>\n<li><strong>string</strong> (str):\nThe molecular formula string.</li>\n<li><strong>maxsplit</strong> (int, optional):\nThe maximum number of splits. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The molecular formula list.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Does not work when formula has atoms with same characters in a row that below to different atoms, i.e. C10H21NNa.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delimiters</span>, </span><span class=\"param\"><span class=\"n\">string</span>, </span><span class=\"param\"><span class=\"n\">maxsplit</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.isotopologue_count_percentile", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.isotopologue_count_percentile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.O_C", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.O_C", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.H_C", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.H_C", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.A_I", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.A_I", "kind": "variable", "doc": "<p>Aromaticity index</p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.A_I_mod", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.A_I_mod", "kind": "variable", "doc": "<p>Modified aromaticity index</p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.nosc", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.nosc", "kind": "variable", "doc": "<p>Nominal oxidation state of carbon</p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.dbe", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.dbe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.mz_nominal_calc", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.mz_nominal_calc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.mz_error", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.mz_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.mz_calc", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.mz_calc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.protonated_mz", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.protonated_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.radical_mz", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.radical_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.neutral_mass", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.neutral_mass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.adduct_mz", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.adduct_mz", "kind": "function", "doc": "<p>Get m/z of an adducted ion version of the molecular formula.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adduct_atom</strong> (str):\nThe adduct atom.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The m/z value of the adducted ion version of the molecular formula.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">adduct_atom</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.ion_type", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.ion_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.ion_charge", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.ion_charge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.atoms", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.atoms", "kind": "variable", "doc": "<p>Get the atoms in the molecular formula.</p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.confidence_score", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.confidence_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.isotopologue_similarity", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.isotopologue_similarity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.average_mz_error_score", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.average_mz_error_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.mz_error_score", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.mz_error_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.kmd", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.kmd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.kendrick_mass", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.kendrick_mass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.knm", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.knm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.change_kendrick_base", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.change_kendrick_base", "kind": "function", "doc": "<p>Change the Kendrick base.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kendrick_dict_base</strong> (dict):\nThe Kendrick base dictionary. Ex: {\"C\": 1, \"H\": 2}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kendrick_dict_base</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.isotopologues", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.isotopologues", "kind": "function", "doc": "<p>Calculate the isotopologues for a given molecular formula.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_abundance</strong> (float):\nThe minimum abundance.</li>\n<li><strong>current_mono_abundance</strong> (float):\nThe current monoisotopic abundance.</li>\n<li><strong>dynamic_range</strong> (float):\nThe dynamic range.</li>\n</ul>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li><strong>MolecularFormulaIsotopologue</strong>: The molecular formula isotopologue.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This calculation ignores the hydrogen isotopes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_abundance</span>, </span><span class=\"param\"><span class=\"n\">current_mono_abundance</span>, </span><span class=\"param\"><span class=\"n\">dynamic_range</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.atoms_qnt", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.atoms_qnt", "kind": "function", "doc": "<p>Get the atom quantity of a specific atom in the molecular formula.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atom</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.atoms_symbol", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.atoms_symbol", "kind": "function", "doc": "<p>Get the atom symbol without the mass number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atom</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.string", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.string", "kind": "variable", "doc": "<p>Returns the molecular formula as a string.</p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.string_formated", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.string_formated", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.to_dict", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.to_dict", "kind": "function", "doc": "<p>Returns the molecular formula as a dictionary.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The molecular formula as a dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.to_list", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.to_list", "kind": "function", "doc": "<p>Returns the molecular formula as a list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The molecular formula as a list.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the molecular formula identification was not performed yet.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.class_label", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.class_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaBase.class_dict", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaBase.class_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue", "kind": "class", "doc": "<p>Class for representing a molecular formula isotopologue.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>_d_molecular_formula</strong> (dict):\nThe molecular formula as a dictionary.</li>\n<li><strong>prob_ratio</strong> (float):\nThe probability ratio.</li>\n<li><strong>mono_abundance</strong> (float):\nThe monoisotopic abundance.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>mspeak_parent</strong> (object, optional):\nThe parent mass spectrum peak object instance. Defaults to None.</li>\n<li><strong>ion_type</strong> (str, optional):\nThe ion type. Defaults to None.</li>\n<li><strong>adduct_atom</strong> (str, optional):\nThe adduct atom. Defaults to None.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>prob_ratio</strong> (float):\nThe probability ratio.</li>\n<li><strong>abundance_calc</strong> (float):\nThe calculated abundance.</li>\n<li><strong>area_error</strong> (float):\nThe area error.</li>\n<li><strong>abundance_error</strong> (float):\nThe abundance error.</li>\n<li><strong>is_isotopologue</strong> (bool):\nThe isotopologue flag. Defaults to True.</li>\n<li><strong>mspeak_index_mono_isotopic</strong> (int):\nThe index of the monoisotopic peak in the mass spectrum peak list. Defaults to None.</li>\n<li><strong>mono_isotopic_formula_index</strong> (int):\nThe index of the monoisotopic formula in the molecular formula list. Defaults to None.</li>\n</ul>\n", "bases": "MolecularFormulaBase"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.__init__", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">_d_molecular_formula</span>,</span><span class=\"param\">\t<span class=\"n\">prob_ratio</span>,</span><span class=\"param\">\t<span class=\"n\">mono_abundance</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span>,</span><span class=\"param\">\t<span class=\"n\">mspeak_parent</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atom</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.prob_ratio", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.prob_ratio", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.abundance_calc", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.abundance_calc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.is_isotopologue", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.is_isotopologue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.mspeak_index_mono_isotopic", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.mspeak_index_mono_isotopic", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.mono_isotopic_formula_index", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.mono_isotopic_formula_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.area_error", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.area_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormulaIsotopologue.abundance_error", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormulaIsotopologue.abundance_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.LCMSLibRefMolecularFormula", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "LCMSLibRefMolecularFormula", "kind": "class", "doc": "<p>Class for representing a molecular formula associated with a molecule in a LCMS library reference.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_formula</strong> (dict, list, str):\nThe molecular formula.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>ion_type</strong> (str, optional):\nThe ion type. Defaults to None.</li>\n<li><strong>adduct_atom</strong> (str, optional):\nThe adduct atom. Defaults to None.</li>\n<li><strong>mspeak_parent</strong> (object, optional):\nThe parent mass spectrum peak object instance. Defaults to None.</li>\n<li><strong>name</strong> (str, optional):\nThe name of the reference molecule. Defaults to None.</li>\n<li><strong>kegg_id</strong> (str, optional):\nThe KEGG ID of the reference molecule. Defaults to None.</li>\n<li><strong>cas</strong> (str, optional):\nThe CAS number of the reference molecule. Defaults to None.</li>\n</ul>\n", "bases": "MolecularFormulaBase"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.LCMSLibRefMolecularFormula.__init__", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "LCMSLibRefMolecularFormula.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">molecular_formula</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atom</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mspeak_parent</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kegg_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cas</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.LCMSLibRefMolecularFormula.name", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "LCMSLibRefMolecularFormula.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.LCMSLibRefMolecularFormula.kegg_id", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "LCMSLibRefMolecularFormula.kegg_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.LCMSLibRefMolecularFormula.cas", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "LCMSLibRefMolecularFormula.cas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormula", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormula", "kind": "class", "doc": "<p>General class for representing a molecular formula.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_formula</strong> (dict, list, str):\nThe molecular formula.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>ion_type</strong> (str, optional):\nThe ion type. Defaults to None.</li>\n<li><strong>adduct_atom</strong> (str, optional):\nThe adduct atom. Defaults to None.</li>\n<li><strong>mspeak_parent</strong> (object, optional):\nThe parent mass spectrum peak object instance. Defaults to None.</li>\n<li><strong>external_mz</strong> (float, optional):\nThe external m/z value. Defaults to False.</li>\n</ul>\n", "bases": "MolecularFormulaBase"}, {"fullname": "corems.molecular_formula.factory.MolecularFormulaFactory.MolecularFormula.__init__", "modulename": "corems.molecular_formula.factory.MolecularFormulaFactory", "qualname": "MolecularFormula.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">molecular_formula</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atom</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mspeak_parent</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">external_mz</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.molecular_formula.input", "modulename": "corems.molecular_formula.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref", "modulename": "corems.molecular_formula.input.masslist_ref", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy", "kind": "class", "doc": "<p>Proxy class for MolecularFormulaLink to be used in the molecular formula ref file import</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_formula</strong> (MolecularFormula | LCMSLibRefMolecularFormula):\ncorems MolecularFormula or LCMSLibRefMolecularFormula object</li>\n<li><strong>mz</strong> (float):\ntarget m/z</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>C</strong> (int):\nnumber of carbon atoms</li>\n<li><strong>H</strong> (int):\nnumber of hydrogen atoms</li>\n<li><strong>H_C</strong> (float):\nratio of hydrogen to carbon atoms</li>\n<li><strong>class_label</strong> (str):\nmolecular formula class label</li>\n<li><strong>mz_calc</strong> (float):\ncalculated m/z</li>\n<li><strong>dbe</strong> (int):\ndouble bond equivalent</li>\n<li><strong>formula_dict</strong> (dict):\nmolecular formula dictionary</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>to_dict().\nreturn molecular formula dictionary</li>\n</ul>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.__init__", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">molecular_formula</span>, </span><span class=\"param\"><span class=\"n\">mz</span></span>)</span>"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.C", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.C", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.H", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.H", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.H_C", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.H_C", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.class_label", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.class_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.mz_calc", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.mz_calc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.dbe", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.dbe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.formula_dict", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.formula_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.MolecularFormulaLinkProxy.to_dict", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "MolecularFormulaLinkProxy.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef", "kind": "class", "doc": "<p>Import Mass List from Reference File</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ref_file_location</strong> (str):\npath to the reference file</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>ref_file_location</strong> (str):\npath to the reference file</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>molecular_formula_ref(mz, molecular_formula).\nReturn MolecularFormulaLinkProxy object</li>\n<li>from_lcms_lib_file(ion_charge, ion_types).\nReturn Dict[standard_name, Dict[m/z, List[MolecularFormula]]] from LCMS library reference file</li>\n<li>from_bruker_ref_file().\nReturn List[MolecularFormula] from Bruker reference file</li>\n<li>from_corems_ref_file(delimiter).\nReturn List[MolecularFormula] from CoreMS reference file</li>\n<li>split(delimiters, string, maxsplit).\nSplits a string using a list of delimiters.</li>\n<li>mformula_s_to_dict(s_mformulatring, iontype).\nConverts a molecular formula string to a dict</li>\n</ul>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.__init__", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ref_file_location</span></span>)</span>"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.ref_file_location", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.ref_file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.molecular_formula_ref", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.molecular_formula_ref", "kind": "function", "doc": "<p>Instantiate a MolecularFormulaLinkProxy object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz</strong> (float):\ntarget m/z</li>\n<li><strong>molecular_formula</strong> (MolecularFormula | LCMSLibRefMolecularFormula):\ncorems MolecularFormula or LCMSLibRefMolecularFormula object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MolecularFormulaLinkProxy</strong>: MolecularFormulaLinkProxy object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz</span>, </span><span class=\"param\"><span class=\"n\">molecular_formula</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.from_lcms_lib_file", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.from_lcms_lib_file", "kind": "function", "doc": "<p>Create a dictionary of LCMSLibRefMolecularFormula objects from LCMS library reference file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ion_charge</strong> (float):\nion charge</li>\n<li><strong>ion_types</strong> (List[str]):\nlist of ion types</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict</strong>: Dict[standard_name, Dict[m/z, List[MolecularFormula]]] from LCMS library reference file. m/z is the target m/z; standard_name is the name of the molecular standard mix; MolecularFormula is the corems molecular formula class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ion_types</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">molecular_formula</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MolecularFormulaFactory</span><span class=\"o\">.</span><span class=\"n\">LCMSLibRefMolecularFormula</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.from_bruker_ref_file", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.from_bruker_ref_file", "kind": "function", "doc": "<p>Create a list of MolecularFormula objects from Bruker reference file</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>List[MolecularFormula]</strong>: List of MolecularFormula objects from Bruker reference file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">molecular_formula</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MolecularFormulaFactory</span><span class=\"o\">.</span><span class=\"n\">MolecularFormula</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.from_corems_ref_file", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.from_corems_ref_file", "kind": "function", "doc": "<p>Create a list of MolecularFormula objects from CoreMS reference file</p>\n\n<p>Not being used</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>delimiter</strong> (str):\ndelimiter used in the reference file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>List[MolecularFormula]</strong>: List of MolecularFormula objects from CoreMS reference file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.split", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.split", "kind": "function", "doc": "<p>Splits a string using a list of delimiters.</p>\n\n<p>Does not work when formula has atoms with same characters, i.e - C10H21NNa</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>delimiters</strong> (list):\nlist of delimiters</li>\n<li><strong>string</strong> (str):\nstring to be split</li>\n<li><strong>maxsplit</strong> (int, optional):\nmaximum number of splits. Default is 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: list of strings obtained after splitting the string</li>\n<li><strong>list</strong>: list of counts obtained after splitting the string</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delimiters</span>, </span><span class=\"param\"><span class=\"n\">string</span>, </span><span class=\"param\"><span class=\"n\">maxsplit</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_formula.input.masslist_ref.ImportMassListRef.mformula_s_to_dict", "modulename": "corems.molecular_formula.input.masslist_ref", "qualname": "ImportMassListRef.mformula_s_to_dict", "kind": "function", "doc": "<p>Converts a molecular formula string to a dict</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s_mformulatring</strong> (str):\nmolecular formula string, i.e. 'C10H21NNa'</li>\n<li><strong>iontype</strong> (str, optional):\nion type. Default is 'unknown'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: molecular formula dictionary</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Does not work if the atomic mass number is passed i.e. 37Cl, 81Br, convention follow the light isotope labeling 35Cl is Cl, 12C is C, etc.\nIf you need to use heavy isotopes please use another reference file format that separate the formula string by a blank space and parse it using the function corems_ref_file</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>: Atom does not exist in Atoms.atoms_order list</li>\n<li><strong>Exception</strong>: Empty molecular formula</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s_mformulatring</span>, </span><span class=\"param\"><span class=\"n\">iontype</span><span class=\"o\">=</span><span class=\"s1\">&#39;unknown&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id", "modulename": "corems.molecular_id", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc", "modulename": "corems.molecular_id.calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.ClusterFilter", "modulename": "corems.molecular_id.calc.ClusterFilter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.ClusterFilter.ClusteringFilter", "modulename": "corems.molecular_id.calc.ClusterFilter", "qualname": "ClusteringFilter", "kind": "class", "doc": "<p>Class for filtering and clustering mass spectra data using various algorithms.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nMass spectrum object.</li>\n<li><strong>ms_peaks</strong> (list):\nList of mass peaks.</li>\n<li><strong>ms_peak_indexes</strong> (list):\nList of peak indexes.</li>\n<li><strong>min_samples</strong> (int):\nMinimum number of samples in a cluster.</li>\n<li><strong>eps</strong> (float):\nThe maximum distance between two samples for one to be considered as in the neighborhood of the other.</li>\n<li><strong>bandwidth</strong> (float):\nBandwidth used in MeanShift algorithm.</li>\n<li><strong>quantile</strong> (float):\nQuantile used in estimate_bandwidth function.</li>\n<li><strong>n_samples</strong> (int):\nNumber of samples used in estimate_bandwidth function.</li>\n<li><strong>bin_seeding</strong> (bool):\nIf true, initial kernel locations are not locations of all points, but rather the location of the discretized version of points, where points are binned onto a grid whose coarseness corresponds to the bandwidth. Setting this option to True will speed up the algorithm because fewer seeds will be initialized.</li>\n<li><strong>min_peaks_per_class</strong> (int):\nMinimum number of peaks per class.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_mass_error_matrix_data(ms_peaks).\nGet the mass error matrix data from a list of mass peaks.</li>\n<li>get_kendrick_matrix_data(mass_spectrum).\nGet the Kendrick matrix data from a mass spectrum.</li>\n<li>filter_kendrick(mass_spectrum).\nFilter the mass spectrum data using the Kendrick algorithm.</li>\n<li>filter_kendrick_by_index(ms_peak_indexes, mass_spectrum_obj).\nFilter the mass spectrum data using the Kendrick algorithm based on a list of peak indexes.</li>\n<li>remove_assignment_by_mass_error(mass_spectrum).\nRemove assignments from the mass spectrum based on mass error.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.calc.ClusterFilter.ClusteringFilter.get_mass_error_matrix_data", "modulename": "corems.molecular_id.calc.ClusterFilter", "qualname": "ClusteringFilter.get_mass_error_matrix_data", "kind": "function", "doc": "<p>Get the mass error matrix data from a list of mass peaks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_peaks</strong> (list):\nList of mass peaks.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matrix_data</strong> (ndarray):\nMatrix data containing mass and error values.</li>\n<li><strong>list_indexes_mass_spec</strong> (list):\nList of indexes of mass peaks in the original mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms_peaks</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.ClusterFilter.ClusteringFilter.get_kendrick_matrix_data", "modulename": "corems.molecular_id.calc.ClusterFilter", "qualname": "ClusteringFilter.get_kendrick_matrix_data", "kind": "function", "doc": "<p>Get the Kendrick matrix data from a mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nMass spectrum object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matrix_data</strong> (ndarray):\nMatrix data containing Kendrick mass and Kendrick mass defect values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.ClusterFilter.ClusteringFilter.filter_kendrick", "modulename": "corems.molecular_id.calc.ClusterFilter", "qualname": "ClusteringFilter.filter_kendrick", "kind": "function", "doc": "<p>Filter the mass spectrum data using the Kendrick algorithm.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nMass spectrum object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.ClusterFilter.ClusteringFilter.filter_kendrick_by_index", "modulename": "corems.molecular_id.calc.ClusterFilter", "qualname": "ClusteringFilter.filter_kendrick_by_index", "kind": "function", "doc": "<p>Filter the mass spectrum data using the Kendrick algorithm based on a list of peak indexes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_peak_indexes</strong> (list):\nList of peak indexes.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nMass spectrum object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>noise_idx</strong> (list):\nList of indexes of noise points in the mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms_peak_indexes</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.ClusterFilter.ClusteringFilter.remove_assignment_by_mass_error", "modulename": "corems.molecular_id.calc.ClusterFilter", "qualname": "ClusteringFilter.remove_assignment_by_mass_error", "kind": "function", "doc": "<p>Remove assignments from the mass spectrum based on mass error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nMass spectrum object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.MolecularFilter", "modulename": "corems.molecular_id.calc.MolecularFilter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.MolecularFilter.MolecularFormulaSearchFilters", "modulename": "corems.molecular_id.calc.MolecularFilter", "qualname": "MolecularFormulaSearchFilters", "kind": "class", "doc": "<p>Class containing static methods for filtering molecular formulas in a mass spectrum.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>filter_kendrick(ms_peak_indexes, mass_spectrum_obj).\nApply Kendrick filter to the mass spectrum.</li>\n<li>check_min_peaks(ms_peak_indexes, mass_spectrum_obj).\nCheck if the number of peaks per class meets the minimum requirement.</li>\n<li>filter_isotopologue(ms_peak_indexes, mass_spectrum_obj).\nApply isotopologue filter to the mass spectrum.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.calc.MolecularFilter.MolecularFormulaSearchFilters.filter_kendrick", "modulename": "corems.molecular_id.calc.MolecularFilter", "qualname": "MolecularFormulaSearchFilters.filter_kendrick", "kind": "function", "doc": "<p>Apply Kendrick filter to the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_peak_indexes</strong> (list):\nList of peak indexes and their associated molecular formula objects.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>filtered_ms_peak_indexes</strong> (list):\nList of peak indexes and their associated molecular formula objects after applying the Kendrick filter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ms_peak_indexes</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.MolecularFilter.MolecularFormulaSearchFilters.check_min_peaks", "modulename": "corems.molecular_id.calc.MolecularFilter", "qualname": "MolecularFormulaSearchFilters.check_min_peaks", "kind": "function", "doc": "<p>Check if the number of peaks per class meets the minimum requirement.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_peak_indexes</strong> (list):\nList of peak indexes and their associated molecular formula objects.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ms_peak_indexes</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.MolecularFilter.MolecularFormulaSearchFilters.filter_isotopologue", "modulename": "corems.molecular_id.calc.MolecularFilter", "qualname": "MolecularFormulaSearchFilters.filter_isotopologue", "kind": "function", "doc": "<p>Apply isotopologue filter to the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_peak_indexes</strong> (list):\nList of peak indexes and their associated molecular formula objects.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>filtered_ms_peak_indexes</strong> (list):\nList of peak indexes and their associated molecular formula objects after applying the isotopologue filter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ms_peak_indexes</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.methods_name", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "methods_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;chebyshev_distance&#x27;: &#x27;Chebyshev Distance&#x27;, &#x27;squared_euclidean_distance&#x27;: &#x27;Squared Euclidean Distance&#x27;, &#x27;fidelity_similarity&#x27;: &#x27;Fidelity Similarity&#x27;, &#x27;matusita_distance&#x27;: &#x27;Matusita Distance&#x27;, &#x27;squared_chord_distance&#x27;: &#x27;Squared-chord Distance&#x27;, &#x27;harmonic_mean_similarity&#x27;: &#x27;Harmonic mean Distance&#x27;, &#x27;Pearson_chi_squared_distance&#x27;: &#x27;Pearson Chi Squared Distance&#x27;, &#x27;Neyman_chi_squared_distance&#x27;: &#x27;Neyman Chi Squared Distance&#x27;, &#x27;probabilistic_symmetric_chi_squared_distance&#x27;: &#x27;Probabilistic symmetric X2 Distance&#x27;, &#x27;topsoe_distance&#x27;: &#x27;Topsoe Distance&#x27;, &#x27;chernoff_distance&#x27;: &#x27;Chernoff Distance&#x27;, &#x27;ruzicka_distance&#x27;: &#x27;Ruzicka Distance&#x27;, &#x27;roberts_distance&#x27;: &#x27;Roberts Distance&#x27;, &#x27;motyka_distance&#x27;: &#x27;Motyka Distance&#x27;, &#x27;canberra_distance&#x27;: &#x27;Canberra Distance&#x27;, &#x27;canberra_metric&#x27;: &#x27;Canberra Metric&#x27;, &#x27;kulczynski_1_distance&#x27;: &#x27;Kulczynski 1 Distance&#x27;, &#x27;lorentzian_distance&#x27;: &#x27;Lorentzian Distance&#x27;, &#x27;clark_distance&#x27;: &#x27;Clark Distance&#x27;, &#x27;hellinger_distance&#x27;: &#x27;Hellinger Distance&#x27;, &#x27;whittaker_index_of_association_distance&#x27;: &#x27;Whittaker index of association Distance&#x27;, &#x27;spectral_contrast_angle_distance&#x27;: &#x27;Spectral Contrast Angle&#x27;, &#x27;wave_hedges_distance&#x27;: &#x27;Wave Hedges Distance&#x27;, &#x27;dice_similarity&#x27;: &#x27;Dice Similarity&#x27;, &#x27;inner_product_distance&#x27;: &#x27;Inner Product Distance&#x27;, &#x27;divergence_distance&#x27;: &#x27;Divergence Distance&#x27;, &#x27;jensen_difference_distance&#x27;: &#x27;Jensen Differences Distance&#x27;, &#x27;kumar_johnson_distance&#x27;: &#x27;Kumar Johnson Distance&#x27;, &#x27;avg_l_distance&#x27;: &#x27;Avg (L1, L8) Distance&#x27;, &#x27;vicis_wave_hadges_distance&#x27;: &#x27;Vicis Wave Hadges Distance&#x27;, &#x27;vicis_symmetric_chi_squared_1_distance&#x27;: &#x27;Vicis-Symmetric X2 1 Distance&#x27;, &#x27;vicis_symmetric_chi_squared_2_distance&#x27;: &#x27;Vicis-Symmetric X2 2 Distance&#x27;, &#x27;vicis_symmetric_chi_squared_3_distance&#x27;: &#x27;Vicis-Symmetric X2 3 Distance&#x27;, &#x27;max_symmetric_chi_squared_distance&#x27;: &#x27;Max Symmetric Chi Squared Distance&#x27;, &#x27;min_symmetric_chi_squared_distance&#x27;: &#x27;Min Symmetric Chi Squared Distance&#x27;, &#x27;additive_sym_chi_sq&#x27;: &#x27;Additive Symmetric Chi Squared&#x27;, &#x27;bhattacharya_distance&#x27;: &#x27;Battacharya Distance&#x27;, &#x27;generalized_ochiai_index&#x27;: &#x27;Generalized Ochiai Index&#x27;, &#x27;gower_distance&#x27;: &#x27;Gower Distance&#x27;, &#x27;impr_sqrt_cosine_sim&#x27;: &#x27;Improved Square Root Cosine Similarity&#x27;, &#x27;intersection_sim&#x27;: &#x27;Intersection Similarity&#x27;, &#x27;j_divergence&#x27;: &#x27;J Divergence&#x27;, &#x27;jensen_shannon_index&#x27;: &#x27;Jensen Shannon Index&#x27;, &#x27;k_divergence&#x27;: &#x27;K Divergence&#x27;, &#x27;VW6&#x27;: &#x27;VW6&#x27;, &#x27;VW5&#x27;: &#x27;VW5&#x27;, &#x27;VW4&#x27;: &#x27;VW4&#x27;, &#x27;VW3&#x27;: &#x27;VW3&#x27;, &#x27;VW2&#x27;: &#x27;VW2&#x27;, &#x27;VW1&#x27;: &#x27;VW1&#x27;, &#x27;taneja_divergence&#x27;: &#x27;Taneja Divergence&#x27;, &#x27;symmetric_chi_squared_distance&#x27;: &#x27;Symmetric Chi Squared Distance&#x27;, &#x27;squared_chi_squared_distance&#x27;: &#x27;Squared Chi Squared Distance&#x27;, &#x27;square_root_cosine_correlation&#x27;: &#x27;Square Root Cosine Correlation&#x27;, &#x27;sorensen_distance&#x27;: &#x27;Sorensen Distance&#x27;, &#x27;Minokowski_3&#x27;: &#x27;Minokowski 3 Distance&#x27;, &#x27;Minokowski_4&#x27;: &#x27;Minokowski 4 Distance&#x27;, &#x27;kumarjohnson_divergence&#x27;: &#x27;Kumar Johnson Divergence&#x27;, &#x27;kumarhassebrook_similarity&#x27;: &#x27;Kumar Hassebrook Similarity&#x27;, &#x27;kullbackleibler_divergence&#x27;: &#x27;Kullback Leibler Divergence&#x27;, &#x27;soergel_distance&#x27;: &#x27;Soergel Distance&#x27;}"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.methods_scale", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "methods_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;entropy&#x27;: [0, 1.3862943611198906], &#x27;weighted_entropy&#x27;: [0, 1.3862943611198906], &#x27;absolute_value&#x27;: [0, 2], &#x27;avg_l&#x27;: [0, 1.5], &#x27;bhattacharya_1&#x27;: [0, 2.4674011002723395], &#x27;bhattacharya_2&#x27;: [0, inf], &#x27;canberra&#x27;: [0, inf], &#x27;clark&#x27;: [0, inf], &#x27;divergence&#x27;: [0, inf], &#x27;euclidean&#x27;: [0, 1.4142135623730951], &#x27;hellinger&#x27;: [0, inf], &#x27;improved_similarity&#x27;: [0, inf], &#x27;lorentzian&#x27;: [0, inf], &#x27;manhattan&#x27;: [0, 2], &#x27;matusita&#x27;: [0, 1.4142135623730951], &#x27;mean_character&#x27;: [0, 2], &#x27;motyka&#x27;: [-0.5, 0], &#x27;ms_for_id&#x27;: [-inf, 0], &#x27;ms_for_id_v1&#x27;: [0, inf], &#x27;pearson_correlation&#x27;: [-1, 1], &#x27;penrose_shape&#x27;: [0, 1.4142135623730951], &#x27;penrose_size&#x27;: [0, inf], &#x27;probabilistic_symmetric_chi_squared&#x27;: [0, 1], &#x27;similarity_index&#x27;: [0, inf], &#x27;squared_chord&#x27;: [0, 2], &#x27;squared_euclidean&#x27;: [0, 2], &#x27;symmetric_chi_squared&#x27;: [0, 0.7071067811865476], &#x27;topsoe&#x27;: [0, 1.4142135623730951], &#x27;vicis_symmetric_chi_squared_3&#x27;: [0, 2], &#x27;wave_hedges&#x27;: [0, inf], &#x27;whittaker_index_of_association&#x27;: [0, inf]}"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity", "kind": "class", "doc": "<p>Class containing methods for calculating spectral similarity between two mass spectra.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_mz_abun_dict</strong> (dict):\nDictionary of mass to abundance values for the experimental mass spectrum.</li>\n<li><strong>ref_obj</strong> (dict):\nDictionary of mass to abundance values for the reference mass spectrum.</li>\n<li><strong>norm_func</strong> (function):\nFunction to normalize the abundance values.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>normalize_func</strong> (function):\nFunction to normalize the abundance values.</li>\n<li><strong>ms_mz_abun_dict</strong> (dict):\nDictionary of mass to abundance values for the experimental mass spectrum.</li>\n<li><strong>ref_obj</strong> (dict):\nDictionary of mass to abundance values for the reference mass spectrum.</li>\n<li><strong>exp_abun</strong> (list):\nList of abundance values for the experimental mass spectrum.</li>\n<li><strong>exp_mz</strong> (list):\nList of mass values for the experimental mass spectrum.</li>\n<li><strong>ref_mz</strong> (list):\nList of mass values for the reference mass spectrum.</li>\n<li><strong>ref_abun</strong> (list):\nList of abundance values for the reference mass spectrum.</li>\n<li><strong>ref_mz_abun_dict</strong> (dict):\nDictionary of mass to abundance values for the reference mass spectrum.</li>\n<li><strong>df</strong> (DataFrame):\nDataFrame containing the experimental and reference mass spectrum data.</li>\n<li><strong>zero_filled_u_l</strong> (tuple):\nTuple containing the experimental and reference mass spectrum data after zero filling and normalization.</li>\n<li><strong>common_mz_values</strong> (list):\nList of common mass values between the experimental and reference mass spectra.</li>\n<li><strong>n_x_y</strong> (int):\nNumber of common mass values between the experimental and reference mass spectra.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>nan_fill(df, fill_with=0).\nFill missing mass values with a given value.</li>\n<li>normalize(x, y, norm_func=sum).\nNormalize the abundance values.</li>\n<li>weighted_cosine_correlation(a=0.5, b=1.3, nanfill=1e-10).\nCalculate the weighted cosine correlation between the experimental and reference mass spectra.</li>\n<li>cosine_correlation().\nCalculate the cosine correlation between the experimental and reference mass spectra.</li>\n<li>stein_scott().\nCalculate the Stein-Scott similarity between the experimental and reference mass spectra.</li>\n<li>pearson_correlation().\nCalculate the Pearson correlation between the experimental and reference mass spectra.</li>\n<li>spearman_correlation().\nCalculate the Spearman correlation between the experimental and reference mass spectra.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.__init__", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ms_mz_abun_dict</span>, </span><span class=\"param\"><span class=\"n\">ref_obj</span>, </span><span class=\"param\"><span class=\"n\">norm_func</span><span class=\"o\">=&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">sum</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.normalize_func", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.normalize_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.ms_mz_abun_dict", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.ms_mz_abun_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.ref_obj", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.ref_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.exp_abun", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.exp_abun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.exp_mz", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.exp_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.ref_mz", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.ref_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.ref_abun", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.ref_abun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.ref_mz_abun_dict", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.ref_mz_abun_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.df", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.zero_filled_u_l", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.zero_filled_u_l", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.common_mz_values", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.common_mz_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.n_x_y", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.n_x_y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.nan_fill", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.nan_fill", "kind": "function", "doc": "<p>Fill missing mass values with a given value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (DataFrame):\nDataFrame containing the experimental and reference mass spectrum data.</li>\n<li><strong>fill_with</strong> (float):\nValue to fill missing mass values with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>x</strong> (list):\nList of abundance values for the experimental mass spectrum.</li>\n<li><strong>y</strong> (list):\nList of abundance values for the reference mass spectrum.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">fill_with</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.normalize", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.normalize", "kind": "function", "doc": "<p>Normalize the abundance values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (list):\nList of abundance values for the experimental mass spectrum.</li>\n<li><strong>y</strong> (list):\nList of abundance values for the reference mass spectrum.</li>\n<li><strong>norm_func</strong> (function):\nFunction to normalize the abundance values.\nDefault is sum</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>u_l</strong> (tuple):\nTuple containing the experimental and reference mass spectrum data after zero filling and normalization.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">norm_func</span><span class=\"o\">=&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">sum</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.weighted_cosine_correlation", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.weighted_cosine_correlation", "kind": "function", "doc": "<p>Calculate the weighted cosine correlation between the experimental and reference mass spectra.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong> (float):\nWeighting factor for the abundance values.\nDefault is 0.5</li>\n<li><strong>b</strong> (float):\nWeighting factor for the mass values.\nDefault is 1.3</li>\n<li><strong>nanfill</strong> (float):\nValue to fill missing mass values with.\nDefault is 1e-10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nWeighted cosine correlation between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mf\">1.3</span>, </span><span class=\"param\"><span class=\"n\">nanfill</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.cosine_correlation", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.cosine_correlation", "kind": "function", "doc": "<p>Calculate the cosine correlation between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nCosine correlation between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.stein_scott", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.stein_scott", "kind": "function", "doc": "<p>Calculate the Stein-Scott similarity between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>s_ss_x_y</strong> (float):\nStein-Scott similarity between the experimental and reference mass spectra.</li>\n<li><strong>s_ss_x_y_nist</strong> (float):\nStein-Scott similarity between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.pearson_correlation", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.pearson_correlation", "kind": "function", "doc": "<p>Calculate the Pearson correlation between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nPearson correlation between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.spearman_correlation", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.spearman_correlation", "kind": "function", "doc": "<p>Calculate the Spearman correlation between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>coorelation</strong> (float):\nSpearman correlation between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.kendall_tau", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.kendall_tau", "kind": "function", "doc": "<p>Calculate the Kendall's tau correlation between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nKendall's tau correlation between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.dft_correlation", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.dft_correlation", "kind": "function", "doc": "<p>Calculate the DFT correlation between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nDFT correlation between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.dwt_correlation", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.dwt_correlation", "kind": "function", "doc": "<p>Calculate the DWT correlation between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nDWT correlation between the experimental and reference mass spectra.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function requires the PyWavelets library to be installed.\n    This is not a default requirement as this function is not widely used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.euclidean_distance", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.euclidean_distance", "kind": "function", "doc": "<p>Calculate the Euclidean distance between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nEuclidean distance between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.manhattan_distance", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.manhattan_distance", "kind": "function", "doc": "<p>Calculate the Manhattan distance between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nManhattan distance between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.jaccard_distance", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.jaccard_distance", "kind": "function", "doc": "<p>Calculate the Jaccard distance between the experimental and reference mass spectra.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>correlation</strong> (float):\nJaccard distance between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.SpectralSimilarity.SpectralSimilarity.extra_distances", "modulename": "corems.molecular_id.calc.SpectralSimilarity", "qualname": "SpectralSimilarity.extra_distances", "kind": "function", "doc": "<p>Function to calculate distances using additional metrics defined in math_distance.py</p>\n\n<p>Currently, calculates all distances.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict_res</strong> (dict):\nDictionary containing the distances between the experimental and reference mass spectra.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance", "modulename": "corems.molecular_id.calc.math_distance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.calc.math_distance.entropy_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "entropy_distance", "kind": "function", "doc": "<p>Calculate entropy distance between two vectors</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Entropy distance between v and y</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.weighted_entropy_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "weighted_entropy_distance", "kind": "function", "doc": "<p>Calculate weighted entropy distance between two vectors</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Weighted entropy distance between v and y</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.chebyshev_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "chebyshev_distance", "kind": "function", "doc": "<p>Chebyshev distance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Chebyshev distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\underset{i}{\\max}{(|v_{i}\\ -\\ y_{i}|)}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.squared_euclidean_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "squared_euclidean_distance", "kind": "function", "doc": "<p>Squared Euclidean distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Squared Euclidean distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum(v_{i}-y_{i})^2$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.fidelity_similarity", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "fidelity_similarity", "kind": "function", "doc": "<p>Fidelity similarity:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Fidelity similarity between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum\\sqrt{v_{i}y_{i}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.matusita_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "matusita_distance", "kind": "function", "doc": "<p>Matusita distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Matusita distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sqrt{\\sum(\\sqrt{v_{i}}-\\sqrt{y_{i}})^2}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.squared_chord_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "squared_chord_distance", "kind": "function", "doc": "<p>Squared-chord distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Squared-chord distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum(\\sqrt{v_{i}}-\\sqrt{y_{i}})^2$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.bhattacharya_1_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "bhattacharya_1_distance", "kind": "function", "doc": "<p>Bhattacharya 1 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Bhattacharya 1 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$(\\arccos{(\\sum\\sqrt{v_{i}y_{i}})})^2$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.bhattacharya_2_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "bhattacharya_2_distance", "kind": "function", "doc": "<p>Bhattacharya 2 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Bhattacharya 2 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$-\\ln{(\\sum\\sqrt{v_{i}y_{i}})}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.harmonic_mean_similarity", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "harmonic_mean_similarity", "kind": "function", "doc": "<p>Harmonic mean similarity:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Harmonic mean similarity between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$#1-2\\sum(\\frac{v_{i}y_{i}}{v_{i}+y_{i}})\n2\\sum(\\frac{v_{i}y_{i}}{v_{i}+y_{i}})$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.chernoff_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "chernoff_distance", "kind": "function", "doc": "<p>Chernoff distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Chernoff distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\max{(-ln\\sum(v_{i}^ty_{i}^{1-t})^{1-t})},\\ t=0.1,\\ 0\\le\\ t&lt;1$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.ruzicka_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "ruzicka_distance", "kind": "function", "doc": "<p>Ruzicka distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Ruzicka distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{\\sum{|v_{i}-y_{i}|}}{\\sum{\\max(v_{i},y_{i})}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.roberts_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "roberts_distance", "kind": "function", "doc": "<p>Roberts distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Roberts distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$1-\\sum\\frac{(v_{i}+y_{i})\\frac{\\min{(v_{i},y_{i})}}{\\max{(v_{i},y_{i})}}}{\\sum(v_{i}+y_{i})}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.intersection_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "intersection_distance", "kind": "function", "doc": "<p>Intersection distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Intersection distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$1-\\frac{\\sum\\min{(v_{i},y_{i})}}{\\min(\\sum{v_{i},\\sum{y_{i})}}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.motyka_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "motyka_distance", "kind": "function", "doc": "<p>Motyka distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Motyka distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$-\\frac{\\sum\\min{(y_{i},v_{i})}}{\\sum(y_{i}+v_{i})}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.canberra_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "canberra_distance", "kind": "function", "doc": "<p>Canberra distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Canberra distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$#\\sum\\frac{|v_{i}-y_{i}|}{|v_{i}|+|y_{i}|}\n\\sum_{i}\\frac{|y_{i} - v_{i}|}{y_{i} + v_{i}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.canberra_metric", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "canberra_metric", "kind": "function", "doc": "<p>Canberra Metric</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Canberra metric between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{1}{\\sum_{i}I(v_{i}\\neq 0)}\\sum_{i}\\frac{|y_{i}-v_{i}|}{(y_{i}+v_{i})}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.kulczynski_1_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "kulczynski_1_distance", "kind": "function", "doc": "<p>Kulczynski 1 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Kulczynski 1 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{\\sum{|v_i}-y_i|}{\\sum m\\ i\\ n\\ (v_i,y_i)}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.baroni_urbani_buser_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "baroni_urbani_buser_distance", "kind": "function", "doc": "<p>Baroni-Urbani-Buser distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Baroni-Urbani-Buser distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$1-\\frac{\\sum\\min{(v_i,y_i)}+\\sqrt{\\sum\\min{(v_i,y_i)}\\sum(\\max{(v)}-\\max{(v_i,y_i)})}}{\\sum{\\max{(v_i,y_i)}+\\sqrt{\\sum{\\min{(v_i,y_i)}\\sum(\\max{(v)}-\\max{(v_i,y_i)})}}}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.penrose_size_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "penrose_size_distance", "kind": "function", "doc": "<p>Penrose size distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Penrose size distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sqrt N\\sum{|y_i-v_i|}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.mean_character_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "mean_character_distance", "kind": "function", "doc": "<p>Mean character distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Mean character distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{1}{N}\\sum{|y_i-v_i|}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.lorentzian_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "lorentzian_distance", "kind": "function", "doc": "<p>Lorentzian distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Lorentzian distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum{\\ln(1+|v_i-y_i|)}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.penrose_shape_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "penrose_shape_distance", "kind": "function", "doc": "<p>Penrose shape distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Penrose shape distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sqrt{\\sum((v_i-\\bar{v})-(y_i-\\bar{y}))^2}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.clark_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "clark_distance", "kind": "function", "doc": "<p>Clark distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Clark distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$#(\\frac{1}{N}\\sum(\\frac{v_i-y_i}{|v_i|+|y_i|})^2)^\\frac{1}{2}\n\\sqrt{\\sum(\\frac{|v_i-y_i|}{v_i+y_i})^2}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.hellinger_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "hellinger_distance", "kind": "function", "doc": "<p>Hellinger distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Hellinger distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$#\\sqrt{2\\sum(\\sqrt{\\frac{v_i}{\\bar{v}}}-\\sqrt{\\frac{y_i}{\\bar{y}}})^2}\n\\sqrt{2\\sum(\\sqrt{v_i}-\\sqrt{y_i})^2}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.whittaker_index_of_association_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "whittaker_index_of_association_distance", "kind": "function", "doc": "<p>Whittaker index of association distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Whittaker index of association distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{1}{2}\\sum|\\frac{v_i}{\\bar{v}}-\\frac{y_i}{\\bar{y}}|$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.similarity_index_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "similarity_index_distance", "kind": "function", "doc": "<p>Similarity Index Distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Similarity Index Distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sqrt{\\frac{\\sum{\\frac{v_i-y_i}{y_i}}^2}{N}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.improved_similarity_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "improved_similarity_distance", "kind": "function", "doc": "<p>Improved Similarity Index:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Improved Similarity Index between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sqrt{\\frac{1}{N}\\sum{\\frac{y_i-v_i}{y_i+v_i}}^2}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.absolute_value_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "absolute_value_distance", "kind": "function", "doc": "<p>Absolute Value Distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Absolute Value Distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac { \\sum(|y_i-v_i|)}{\\sum v_i}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.spectral_contrast_angle_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "spectral_contrast_angle_distance", "kind": "function", "doc": "<p>Spectral Contrast Angle:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Spectral Contrast Angle between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$1 - \\frac{\\sum{y_iv_i}}{\\sqrt{\\sum y_i^2\\sum v_i^2}}\n\\arccos(\\frac{\\sum_{P}y_{p}^* v_{p}^<em>}{\\sqrt{\\sum_{P}y_{p}^{</em>2} \\sum_{P}v_{p}^{*2}}})$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.wave_hedges_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "wave_hedges_distance", "kind": "function", "doc": "<p>Wave Hedges distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Wave Hedges distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum\\frac{|v_i-y_i|}{\\max{(v_i,y_i)}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.dice_similarity", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "dice_similarity", "kind": "function", "doc": "<p>Dice similarity:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Dice similarity between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{\\sum(v_i-y_i)^2}{\\sum v_i^2+\\sum y_i^2}\n\\frac{2 * \\sum_{i}v_{i}y_{i}}{\\sum_{i}y_{i}^2 + \\sum_{i}v_{i}^2}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.inner_product_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "inner_product_distance", "kind": "function", "doc": "<p>Inner Product distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Inner product distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$1-\\sum{v_iy_i}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.divergence_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "divergence_distance", "kind": "function", "doc": "<p>Divergence distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Divergence distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$2\\sum\\frac{(v_i-y_i)^2}{(v_i+y_i)^2}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.jensen_difference_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "jensen_difference_distance", "kind": "function", "doc": "<p>Jensen difference:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Jensen difference distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum[\\frac{1}{2}(v_i\\ln{v_i}+y_i\\ln{y_i})-(\\frac{v_i+y_i}{2})\\ln{(\\frac{v_i+y_i}{2})}]$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.kumar_johnson_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "kumar_johnson_distance", "kind": "function", "doc": "<p>Kumar-Johnson distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Kumar Johnson distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum\\frac{(v_i^2-y_i^2)^2}{2(v_iy_i)^\\frac{3}{2}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.avg_l_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "avg_l_distance", "kind": "function", "doc": "<p>Avg (L1, L\u221e) distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Average L distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{1}{2}(\\sum|v_i-y_i|+\\underset{i}{\\max}{|v_i-y_i|})$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.vicis_wave_hadges_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "vicis_wave_hadges_distance", "kind": "function", "doc": "<p>Vicis-Wave Hadges distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Vicis Wave Hadges distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum\\frac{|v_i-y_i|}{\\min{(v_i,\\ y_i)}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.vicis_symmetric_chi_squared_1_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "vicis_symmetric_chi_squared_1_distance", "kind": "function", "doc": "<p>Vicis-Symmetric \u03c72 1 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Vici Symmetric \u03c72 1 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum\\frac{(v_i-y_i)^2}{\\min{(v_i,y_i)^2}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.vicis_symmetric_chi_squared_2_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "vicis_symmetric_chi_squared_2_distance", "kind": "function", "doc": "<p>Vicis-Symmetric \u03c72 2 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Vicis Symmetric \u03c72 2 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum\\frac{(v_i-y_i)^2}{\\min{(v_i,y_i)}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.vicis_symmetric_chi_squared_3_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "vicis_symmetric_chi_squared_3_distance", "kind": "function", "doc": "<p>Vicis-Symmetric \u03c72 3 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Vici Symmetric \u03c72 3 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum\\frac{(v_i-y_i)^2}{\\max{(v_i,y_i)}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.max_symmetric_chi_squared_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "max_symmetric_chi_squared_distance", "kind": "function", "doc": "<p>Max-Symmetric \u03c72 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Max-Symmetric \u03c72 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\max{(\\sum\\frac{(v_i-y_i)^2}{v_i},\\sum\\frac{(v_i-y_i)^2}{y_i})}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.min_symmetric_chi_squared_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "min_symmetric_chi_squared_distance", "kind": "function", "doc": "<p>Min-Symmetric \u03c72 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Min-Symmetric \u03c72 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\min{(\\sum\\frac{(v_i-y_i)^2}{v_i},\\sum\\frac{(v_i-y_i)^2}{y_i})}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.additive_sym_chi_sq", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "additive_sym_chi_sq", "kind": "function", "doc": "<p>Additive Symmetric \u03c72 distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Additive Symmetric \u03c72 distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum_{i}\\frac{(y_{i} - v_{i})^2(y_{i}+v_{i})}{y_{i}v_{i}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.bhattacharya_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "bhattacharya_distance", "kind": "function", "doc": "<p>Bhattacharya Distance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Bhattcharya distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$-ln(\\sum_{i}\\sqrt{y_{i}v_{i}})$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.generalized_ochiai_index", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "generalized_ochiai_index", "kind": "function", "doc": "<p>Generalized Ochiai Index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Generalized Ochiai Index between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$1 - \\frac{\\sum_{i}min(y_{i}, v_{i})}{\\sqrt{\\sum_{i}y_{i} \\sum_{i}v_{i}}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.gower_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "gower_distance", "kind": "function", "doc": "<p>Gower Distance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Gower distance between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{1}{N}\\sum_{i}|y_{i} - v_{i}|$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.impr_sqrt_cosine_sim", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "impr_sqrt_cosine_sim", "kind": "function", "doc": "<p>Improved Square Root Cosine Similarity</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Improved Square Root Cosine Similarity between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{\\sum_{i}\\sqrt{y_{i}v_{i}}}{\\sum_{i}\\sqrt{y_{i}}\\sum_{i}\\sqrt{v_{i}}}$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.intersection_sim", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "intersection_sim", "kind": "function", "doc": "<p>Intersection Similarity</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Intersection Similarity between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum_{i}min(y_{i}, v_{i})$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.j_divergence", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "j_divergence", "kind": "function", "doc": "<p>J Divergence</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: J Divergence between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum_{i}(y_{i} - v_{i}) ln(\\frac{y_{i}}{v_{i}})$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.jensen_shannon_index", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "jensen_shannon_index", "kind": "function", "doc": "<p>Jensen-Shannon Index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Jensen Shannon Index between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\frac{1}{2}[\\sum_{i}y_{i}ln(\\frac{2y_{i}}{y_{i} + v_{i}}) + \\sum_{i}v_{i}ln(\\frac{2v_{i}}{y_{i}+v_{i}})]$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.k_divergence", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "k_divergence", "kind": "function", "doc": "<p>K-Divergence</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: K-Divergence between v and y</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>$$\\sum_{i}y_{i}ln(\\frac{2y_{i}}{y_{i} + v_{i}})$$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.topsoe_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "topsoe_distance", "kind": "function", "doc": "<p>Topsoe distance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong> (array_like):\nVector 1</li>\n<li><strong>y</strong> (array_like):\nVector 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Topsoe distance between v and y</li>\n<li><strong>Notes</strong></li>\n<li><strong>-----</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.probabilistic_symmetric_chi_squared_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "probabilistic_symmetric_chi_squared_distance", "kind": "function", "doc": "<p>Fixed\n\"I commented out the previous one; please review\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.VW6", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "VW6", "kind": "function", "doc": "<p>\"appears to be the same as max_symmetric_chi_squared_distance\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.VW5", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "VW5", "kind": "function", "doc": "<p>\"appears to be the same as max_symmetric_chi_squared_distance\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.VW4", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "VW4", "kind": "function", "doc": "<p>\"Tecnically the Symmetric chi2 eq63\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.VW3", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "VW3", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.VW2", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "VW2", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.VW1", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "VW1", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.taneja_divergence", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "taneja_divergence", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.symmetric_chi_squared_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "symmetric_chi_squared_distance", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.squared_chi_squared_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "squared_chi_squared_distance", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.square_root_cosine_correlation", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "square_root_cosine_correlation", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.sorensen_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "sorensen_distance", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.Pearson_chi_squared_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "Pearson_chi_squared_distance", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.Neyman_chi_squared_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "Neyman_chi_squared_distance", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.Minokowski_3", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "Minokowski_3", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.Minokowski_4", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "Minokowski_4", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.kumarjohnson_divergence", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "kumarjohnson_divergence", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.kumarhassebrook_similarity", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "kumarhassebrook_similarity", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.kullbackleibler_divergence", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "kullbackleibler_divergence", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.calc.math_distance.soergel_distance", "modulename": "corems.molecular_id.calc.math_distance", "qualname": "soergel_distance", "kind": "function", "doc": "<p>\"New\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory", "modulename": "corems.molecular_id.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL", "modulename": "corems.molecular_id.factory.EI_SQL", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Base", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Base", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Base.__init__", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Base.registry", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Base.metadata", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "default_value": "MetaData()"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar", "kind": "class", "doc": "<p>This class is used to store the metadata of the compounds in the database</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nThe id of the compound.</li>\n<li><strong>cas</strong> (str):\nThe CAS number of the compound.</li>\n<li><strong>inchikey</strong> (str):\nThe InChiKey of the compound.</li>\n<li><strong>inchi</strong> (str):\nThe InChi of the compound.</li>\n<li><strong>chebi</strong> (str):\nThe ChEBI ID of the compound.</li>\n<li><strong>smiles</strong> (str):\nThe SMILES of the compound.</li>\n<li><strong>kegg</strong> (str):\nThe KEGG ID of the compound.</li>\n<li><strong>iupac_name</strong> (str):\nThe IUPAC name of the compound.</li>\n<li><strong>traditional_name</strong> (str):\nThe traditional name of the compound.</li>\n<li><strong>common_name</strong> (str):\nThe common name of the compound.</li>\n<li><strong>data_id</strong> (int):\nThe id of the compound in the molecularData table.</li>\n<li><strong>data</strong> (LowResolutionEICompound):\nThe compound object.</li>\n</ul>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.__init__", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.id", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.cas", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.cas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.inchikey", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.inchikey", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.inchi", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.inchi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.chebi", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.chebi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.smiles", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.smiles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.kegg", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.kegg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.iupac_name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.iupac_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.traditional_name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.traditional_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.common_name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.common_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.data_id", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.data_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.Metadatar.data", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "Metadatar.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound", "kind": "class", "doc": "<p>This class is used to store the molecular and spectral data of the compounds in the low res EI database</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nThe id of the compound.</li>\n<li><strong>name</strong> (str):\nThe name of the compound.</li>\n<li><strong>classify</strong> (str):\nThe classification of the compound.</li>\n<li><strong>formula</strong> (str):\nThe formula of the compound.</li>\n<li><strong>ri</strong> (float):\nThe retention index of the compound.</li>\n<li><strong>retention_time</strong> (float):\nThe retention time of the compound.</li>\n<li><strong>source</strong> (str):\nThe source of the compound.</li>\n<li><strong>casno</strong> (str):\nThe CAS number of the compound.</li>\n<li><strong>comment</strong> (str):\nThe comment of the compound.</li>\n<li><strong>source_temp_c</strong> (float):\nThe source temperature of the spectra.</li>\n<li><strong>ev</strong> (float):\nThe electron volts of the spectra.</li>\n<li><strong>peaks_count</strong> (int):\nThe number of peaks in the spectra.</li>\n<li><strong>mz</strong> (numpy.ndarray):\nThe m/z values of the spectra.</li>\n<li><strong>abundance</strong> (numpy.ndarray):\nThe abundance values of the spectra.</li>\n<li><strong>metadatar</strong> (Metadatar):\nThe metadata object.</li>\n</ul>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.__init__", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">dict_data</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.id", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.classify", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.classify", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.formula", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.formula", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.ri", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.ri", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.retention_time", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.retention_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.source", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.source", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.casno", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.casno", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.comment", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.comment", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.derivativenum", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.derivativenum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.derivatization", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.derivatization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.source_temp_c", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.source_temp_c", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.ev", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.ev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.peaks_count", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.peaks_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.mz", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.abundance", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.abundance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResolutionEICompound.metadatar", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResolutionEICompound.metadatar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata", "kind": "class", "doc": "<p>Dataclass for the Metabolite Metadata</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nThe id of the compound.</li>\n<li><strong>cas</strong> (str):\nThe CAS number of the compound.</li>\n<li><strong>inchikey</strong> (str):\nThe InChiKey of the compound.</li>\n<li><strong>inchi</strong> (str):\nThe InChi of the compound.</li>\n<li><strong>chebi</strong> (str):\nThe ChEBI ID of the compound.</li>\n<li><strong>smiles</strong> (str):\nThe SMILES of the compound.</li>\n<li><strong>kegg</strong> (str):\nThe KEGG ID of the compound.</li>\n<li><strong>iupac_name</strong> (str):\nThe IUPAC name of the compound.</li>\n<li><strong>traditional_name</strong> (str):\nThe traditional name of the compound.</li>\n<li><strong>common_name</strong> (str):\nThe common name of the compound.</li>\n<li><strong>data_id</strong> (int):\nThe id of the compound in the molecularData table.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.__init__", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cas</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inchikey</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inchi</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chebi</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">smiles</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kegg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">iupac_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">traditional_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">common_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.id", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.cas", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.cas", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.inchikey", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.inchikey", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.inchi", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.inchi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.chebi", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.chebi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.smiles", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.smiles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.kegg", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.kegg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.data_id", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.data_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.iupac_name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.iupac_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.traditional_name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.traditional_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata.common_name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "MetaboliteMetadata.common_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef", "kind": "class", "doc": "<p>Dataclass for the Low Resolution Compound Reference</p>\n\n<p>This class is used to store the molecular and spectral data of the compounds in the low res EI database</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>compounds_dict</strong> (dict):\nA dictionary representing the compound.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nThe id of the compound.</li>\n<li><strong>name</strong> (str):\nThe name of the compound.</li>\n<li><strong>ri</strong> (str):\nThe retention index of the compound.</li>\n<li><strong>retention_time</strong> (str):\nThe retention time of the compound.</li>\n<li><strong>casno</strong> (str):\nThe CAS number of the compound.</li>\n<li><strong>comment</strong> (str):\nThe comment of the compound.</li>\n<li><strong>peaks_count</strong> (int):\nThe number of peaks in the spectra.</li>\n<li><strong>classify</strong> (str):\nThe classification of the compound.</li>\n<li><strong>derivativenum</strong> (str):\nThe derivative number of the compound.</li>\n<li><strong>derivatization</strong> (str):\nThe derivatization applied to the compound.</li>\n<li><strong>mz</strong> (numpy.ndarray):\nThe m/z values of the spectra.</li>\n<li><strong>abundance</strong> (numpy.ndarray):\nThe abundance values of the spectra.</li>\n<li><strong>source_temp_c</strong> (float):\nThe source temperature of the spectra.</li>\n<li><strong>ev</strong> (float):\nThe electron volts of the spectra.</li>\n<li><strong>formula</strong> (str):\nThe formula of the compound.</li>\n<li><strong>source</strong> (str):\nThe source of the spectra data.</li>\n<li><strong>classify</strong> (str):\nThe classification of the compound.</li>\n<li><strong>metadata</strong> (MetaboliteMetadata):\nThe metadata object.</li>\n<li><strong>similarity_score</strong> (float):\nThe similarity score of the compound.</li>\n<li><strong>ri_score</strong> (float):\nThe RI score of the compound.</li>\n<li><strong>spectral_similarity_score</strong> (float):\nThe spectral similarity score of the compound.</li>\n<li><strong>spectral_similarity_scores</strong> (dict):\nThe spectral similarity scores of the compound.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.__init__", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">compounds_dict</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.id", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.name", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.ri", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.ri", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.retention_time", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.retention_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.casno", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.casno", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.comment", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.comment", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.peaks_count", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.peaks_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.classify", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.classify", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.derivativenum", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.derivativenum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.derivatization", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.derivatization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.mz", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.abundance", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.abundance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.source_temp_c", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.source_temp_c", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.ev", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.ev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.formula", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.formula", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.source", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.source", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.similarity_score", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.similarity_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.ri_score", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.ri_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.spectral_similarity_score", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.spectral_similarity_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.LowResCompoundRef.spectral_similarity_scores", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "LowResCompoundRef.spectral_similarity_scores", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite", "kind": "class", "doc": "<p>A class for interacting with a SQLite database for low-resolution EI compounds.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (str, optional):\nThe URL of the SQLite database. Default is 'sqlite://'.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>engine</strong> (sqlalchemy.engine.Engine):\nThe SQLAlchemy engine for connecting to the database.</li>\n<li><strong>session</strong> (sqlalchemy.orm.Session):\nThe SQLAlchemy session for executing database operations.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>__init__(self, url='sqlite://').\nInitializes the EI_LowRes_SQLite object.</li>\n<li>__exit__(self, exc_type, exc_val, exc_tb).\nCloses the database connection.</li>\n<li>init_engine(self, url).\nInitializes the SQLAlchemy engine.</li>\n<li>__enter__(self).\nReturns the EI_LowRes_SQLite object.</li>\n<li>add_compound_list(self, data_dict_list).\nAdds a list of compounds to the database.</li>\n<li>add_compound(self, data_dict).\nAdds a single compound to the database.</li>\n<li>commit(self).\nCommits the changes to the database.</li>\n<li>row_to_dict(self, row).\nConverts a database row to a dictionary.</li>\n<li>get_all(self).\nRetrieves all compounds from the database.</li>\n<li>query_min_max_rt(self, min_max_rt).\nQueries compounds based on retention time range.</li>\n<li>query_min_max_ri(self, min_max_ri).\nQueries compounds based on RI range.</li>\n<li>query_names_and_rt(self, min_max_rt, compound_names).\nQueries compounds based on compound names and retention time range.</li>\n<li>query_min_max_ri_and_rt(self, min_max_ri, min_max_rt).\nQueries compounds based on RI range and retention time range.</li>\n<li>delete_compound(self, compound).\nDeletes a compound from the database.</li>\n<li>purge(self).\nDeletes all compounds from the database table.</li>\n<li>clear_data(self).\nClears all tables in the database.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.__init__", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">&#39;sqlite://&#39;</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.engine", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.engine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.session", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.init_engine", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.init_engine", "kind": "function", "doc": "<p>Initializes the SQLAlchemy engine.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (str):\nThe URL of the SQLite database.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sqlalchemy.engine.Engine</strong>: The SQLAlchemy engine for connecting to the database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.add_compound_list", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.add_compound_list", "kind": "function", "doc": "<p>Adds a list of compounds to the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_dict_list</strong> (list of dict):\nA list of dictionaries representing the compounds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_dict_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.add_compound", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.add_compound", "kind": "function", "doc": "<p>Adds a single compound to the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_dict</strong> (dict):\nA dictionary representing the compound.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.commit", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.commit", "kind": "function", "doc": "<p>Commits the changes to the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.row_to_dict", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.row_to_dict", "kind": "function", "doc": "<p>Converts a database row to a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row</strong> (sqlalchemy.engine.row.Row):\nA row from the database.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary representing the compound.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.get_all", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.get_all", "kind": "function", "doc": "<p>Retrieves all compounds from the database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of dictionaries representing the compounds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.query_min_max_rt", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.query_min_max_rt", "kind": "function", "doc": "<p>Queries compounds based on retention time range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_max_rt</strong> (tuple):\nA tuple containing the minimum and maximum retention time values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of dictionaries representing the compounds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_max_rt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.query_min_max_ri", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.query_min_max_ri", "kind": "function", "doc": "<p>Queries compounds based on RI range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_max_ri</strong> (tuple):\nA tuple containing the minimum and maximum RI values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_max_ri</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.query_names_and_rt", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.query_names_and_rt", "kind": "function", "doc": "<p>Queries compounds based on compound names and retention time range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_max_rt</strong> (tuple):\nA tuple containing the minimum and maximum retention time values.</li>\n<li><strong>compound_names</strong> (list):\nA list of compound names.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of dictionaries representing the compounds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_max_rt</span>, </span><span class=\"param\"><span class=\"n\">compound_names</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.query_min_max_ri_and_rt", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.query_min_max_ri_and_rt", "kind": "function", "doc": "<p>Queries compounds based on RI range and retention time range.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_max_ri</strong> (tuple):\nA tuple containing the minimum and maximum RI values.</li>\n<li><strong>min_max_rt</strong> (tuple):\nA tuple containing the minimum and maximum retention time values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of dictionaries representing the compounds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_max_ri</span>, </span><span class=\"param\"><span class=\"n\">min_max_rt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.delete_compound", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.delete_compound", "kind": "function", "doc": "<p>Deletes a compound from the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>compound</strong> (LowResolutionEICompound):\nA compound object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">compound</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.purge", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.purge", "kind": "function", "doc": "<p>Deletes all compounds from the database table.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Careful, this will delete the entire database table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.EI_SQL.EI_LowRes_SQLite.clear_data", "modulename": "corems.molecular_id.factory.EI_SQL", "qualname": "EI_LowRes_SQLite.clear_data", "kind": "function", "doc": "<p>Clears all tables in the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.profiled", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "profiled", "kind": "function", "doc": "<p>A context manager for profiling.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.insert_database_worker", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "insert_database_worker", "kind": "function", "doc": "<p>Inserts data into the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations", "kind": "class", "doc": "<p>A class for generating molecular formula combinations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_search_settings</strong> (object):\nAn object containing user-defined settings.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>sql_db</strong> (MolForm_SQL):\nThe SQLite database object.</li>\n<li><strong>len_existing_classes</strong> (int):\nThe number of existing classes in the SQLite database.</li>\n<li><strong>odd_ch_id</strong> (list):\nA list of odd carbon and hydrogen atom IDs.</li>\n<li><strong>odd_ch_dict</strong> (list):\nA list of odd carbon and hydrogen atom dictionaries.</li>\n<li><strong>odd_ch_mass</strong> (list):\nA list of odd carbon and hydrogen atom masses.</li>\n<li><strong>odd_ch_dbe</strong> (list):\nA list of odd carbon and hydrogen atom double bond equivalents.</li>\n<li><strong>even_ch_id</strong> (list):\nA list of even carbon and hydrogen atom IDs.</li>\n<li><strong>even_ch_dict</strong> (list):\nA list of even carbon and hydrogen atom dictionaries.</li>\n<li><strong>even_ch_mass</strong> (list):\nA list of even carbon and hydrogen atom masses.</li>\n<li><strong>even_ch_dbe</strong> (list):\nA list of even carbon and hydrogen atom double bond equivalents.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>cProfile_worker(args)\nA cProfile worker for the get_mol_formulas function.</li>\n<li>check_database_get_class_list(molecular_search_settings)\nChecks if the database has all the classes, if not create the missing classes.</li>\n<li>get_carbonsHydrogens(settings, odd_even)\nRetrieves carbon and hydrogen atoms from the molecular lookup table based on user-defined settings.</li>\n<li>add_carbonsHydrogens(settings, existing_classes_objs)\nAdds carbon and hydrogen atoms to the molecular lookup table based on user-defined settings.</li>\n<li>runworker(molecular_search_settings)\nRuns the molecular formula lookup table worker.</li>\n<li>get_classes_in_order(molecular_search_settings)\nGets the classes in order.</li>\n<li>sort_classes(atoms_in_order, combination_dict)\nSorts the classes in order.</li>\n<li>get_fixed_initial_number_of_hydrogen(min_h, odd_even)\nGets the fixed initial number of hydrogen atoms.</li>\n<li>calc_mz(datadict, class_mass=0)\nCalculates the mass-to-charge ratio (m/z) of a molecular formula.</li>\n<li>calc_dbe_class(datadict)\nCalculates the double bond equivalent (DBE) of a molecular formula.</li>\n<li>populate_combinations(classe_tuple, settings)\nPopulates the combinations.</li>\n<li>get_or_add(SomeClass, kw)\nGets or adds a class.</li>\n<li>get_mol_formulas(odd_even_tag, classe_tuple, settings)\nGets the molecular formulas.</li>\n<li>get_h_odd_or_even(class_dict)\nGets the hydrogen odd or even.</li>\n<li>get_total_halogen_atoms(class_dict)\nGets the total number of halogen atoms.</li>\n<li>get_total_hetero_valence(class_dict)\nGets the total valence of heteroatoms other than N, F, Cl, and Br</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.__init__", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sql_db</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.cProfile_worker", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.cProfile_worker", "kind": "function", "doc": "<p>cProfile worker for the get_mol_formulas function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.check_database_get_class_list", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.check_database_get_class_list", "kind": "function", "doc": "<p>check if the database has all the classes, if not create the missing classes</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_search_settings</strong> (object):\nAn object containing user-defined settings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: list of tuples with the class name and the class dictionary</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">molecular_search_settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_carbonsHydrogens", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_carbonsHydrogens", "kind": "function", "doc": "<p>Retrieve carbon and hydrogen atoms from the molecular lookup table based on user-defined settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>settings</strong> (object):\nAn object containing user-defined settings.</li>\n<li><strong>odd_even</strong> (str):\nA string indicating whether to retrieve even or odd hydrogen atoms.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of CarbonHydrogen objects that satisfy the specified conditions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">odd_even</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.add_carbonsHydrogens", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.add_carbonsHydrogens", "kind": "function", "doc": "<p>Add carbon and hydrogen atoms to the molecular lookup table based on user-defined settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>settings</strong> (object):\nAn object containing user-defined settings.</li>\n<li><strong>existing_classes_objs</strong> (list):\nA list of HeteroAtoms objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">existing_classes_objs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.runworker", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.runworker", "kind": "function", "doc": "<p>Run the molecular formula lookup table worker.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_search_settings</strong> (object):\nAn object containing user-defined settings.</li>\n<li><strong>kwargs</strong> (dict):\nA dictionary of keyword arguments.\nMost notably, the print_time argument which is passed to the timeit decorator.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of tuples with the class name and the class dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kw</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_classes_in_order", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_classes_in_order", "kind": "function", "doc": "<p>Get the classes in order</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecular_search_settings</strong> (object):\nAn object containing user-defined settings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary of classes in order.\nstructure is  ('HC', {'HC': 1})</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">molecular_search_settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.sort_classes", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.sort_classes", "kind": "function", "doc": "<p>Sort the classes in order</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atoms_in_order</strong> (list):\nA list of atoms in order.</li>\n<li><strong>combination_dict</strong> (dict):\nA dictionary of classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary of classes in order.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms_in_order</span>, </span><span class=\"param\"><span class=\"n\">combination_dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_fixed_initial_number_of_hydrogen", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_fixed_initial_number_of_hydrogen", "kind": "function", "doc": "<p>Get the fixed initial number of hydrogen atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>min_h</strong> (int):\nThe minimum number of hydrogen atoms.</li>\n<li><strong>odd_even</strong> (str):\nA string indicating whether to retrieve even or odd hydrogen atoms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">min_h</span>, </span><span class=\"param\"><span class=\"n\">odd_even</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.calc_mz", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.calc_mz", "kind": "function", "doc": "<p>Calculate the mass-to-charge ratio (m/z) of a molecular formula.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>datadict</strong> (dict):\nA dictionary of classes.</li>\n<li><strong>class_mass</strong> (int):\nThe mass of the class.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The mass-to-charge ratio (m/z) of a molecular formula.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">datadict</span>, </span><span class=\"param\"><span class=\"n\">class_mass</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.calc_dbe_class", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.calc_dbe_class", "kind": "function", "doc": "<p>Calculate the double bond equivalent (DBE) of a molecular formula.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>datadict</strong> (dict):\nA dictionary of classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The double bond equivalent (DBE) of a molecular formula.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">datadict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.populate_combinations", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.populate_combinations", "kind": "function", "doc": "<p>Populate the combinations</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe_tuple</strong> (tuple):\nA tuple containing the class name, the class dictionary, and the class ID.</li>\n<li><strong>settings</strong> (object):\nAn object containing user-defined settings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of molecular formula data dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe_tuple</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_or_add", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_or_add", "kind": "function", "doc": "<p>Get or add a class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SomeClass</strong> (object):\nA class object.</li>\n<li><strong>kw</strong> (dict):\nA dictionary of classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>object</strong>: A class object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">SomeClass</span>, </span><span class=\"param\"><span class=\"n\">kw</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_mol_formulas", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_mol_formulas", "kind": "function", "doc": "<p>Get the molecular formulas</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>odd_even_tag</strong> (str):\nA string indicating whether to retrieve even or odd hydrogen atoms.</li>\n<li><p><strong>classe_tuple</strong> (tuple):</p></li>\n<li><p><strong>settings</strong> (object):\nAn object containing user-defined settings.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of molecular formula data dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">odd_even_tag</span>, </span><span class=\"param\"><span class=\"n\">classe_tuple</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_h_odd_or_even", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_h_odd_or_even", "kind": "function", "doc": "<p>Get the hydrogen odd or even</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>class_dict</strong> (dict):\nA dictionary of classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: A string indicating whether to retrieve even or odd hydrogen atoms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">class_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_total_heteroatoms", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_total_heteroatoms", "kind": "function", "doc": "<p>Get the total number of heteroatoms other than N, F, Cl, Br</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>class_dict</strong> (dict):\nA dictionary of classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The total number of heteroatoms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">class_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_total_hetero_valence", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_total_hetero_valence", "kind": "function", "doc": "<p>Get the total valence of heteroatoms other than N, F, Cl, Br</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>class_dict</strong> (dict):\nA dictionary of classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The total heteroatom valence.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">class_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.MolecularLookupTable.MolecularCombinations.get_total_halogen_atoms", "modulename": "corems.molecular_id.factory.MolecularLookupTable", "qualname": "MolecularCombinations.get_total_halogen_atoms", "kind": "function", "doc": "<p>Get the total number of halogen atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>class_dict</strong> (dict):\nA dictionary of classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The total number of halogen atoms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">class_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification", "modulename": "corems.molecular_id.factory.classification", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.flatten_list", "modulename": "corems.molecular_id.factory.classification", "qualname": "flatten_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification", "kind": "class", "doc": "<p>Class for grouping mass spectrum data by heteroatom classes (Nn, Oo, Ss, NnOo, NnSs, etc..)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>choose_molecular_formula</strong> (bool, optional):\nIf True, the molecular formula with the highest abundance is chosen. If False, all molecular formulas are considered. Default is True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If no molecular formula is associated with any mspeak objects.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_ms_grouped_class</strong> (dict):\nA dictionary of classes and a list of ms_peak objects.</li>\n<li><strong>choose_mf</strong> (bool):\nIf True, the molecular formula with the highest abundance is chosen. If False, all molecular formulas are considered.</li>\n<li><strong>total_peaks</strong> (int):\nThe total number of peaks.</li>\n<li><strong>sum_abundance</strong> (float):\nThe sum of the abundance of all peaks.</li>\n<li><strong>min_max_mz</strong> (tuple):\nThe minimum and maximum mz values.</li>\n<li><strong>min_max_abundance</strong> (tuple):\nThe minimum and maximum abundance values.</li>\n<li><strong>min_ppm_error</strong> (float):\nThe minimum ppm error.</li>\n<li><strong>max_ppm_error</strong> (float):\nThe maximum ppm error.</li>\n<li><strong>all_identified_atoms</strong> (list):\nA list of all identified atoms.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>__len__().\nReturns the number of classes.</li>\n<li>__getitem__(classe)\nReturns the molecular formula list for specified class.</li>\n<li>__iter__().\nReturns an iterator over the keys of the dictionary.</li>\n<li>get_classes(threshold_perc=1, isotopologue=True).\nReturns a list of classes with abundance percentile above threshold.</li>\n<li>molecular_formula_string(classe).\nReturns a list of molecular formula string for specified class.</li>\n<li>molecular_formula(classe).\nReturns a list of molecular formula for specified class.</li>\n<li>carbon_number(classe).\nReturns a list of carbon number for specified class.</li>\n<li>atom_count(atom, classe).\nReturns a list of atom count for specified class.</li>\n<li>dbe(classe).\nReturns a list of DBE for specified class.</li>\n<li>atoms_ratio(classe, numerator, denominator).\nReturns a list of atoms ratio for specified class.</li>\n<li>mz_exp(classe).\nReturns a list of experimental mz for specified class.</li>\n<li>abundance(classe).\nReturns a list of abundance for specified class.</li>\n<li>mz_error(classe).\nReturns a list of mz error for specified class.</li>\n<li>mz_calc(classe).\nReturns a list of calculated mz for specified class.</li>\n<li>peaks_count_percentile(classe).\nReturns the peaks count percentile of a specific class.</li>\n<li>abundance_count_percentile(classe).\nReturns the abundance percentile of a specific class.</li>\n<li>mz_exp_assigned().\nReturns a list of experimental mz for all assigned classes.</li>\n<li>abundance_assigned().\nReturns a list of abundance for all classes.</li>\n<li>mz_exp_all().\nReturns a list of mz for all classes.</li>\n</ul>\n", "bases": "collections.abc.Mapping"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.__init__", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass_spectrum</span>, </span><span class=\"param\"><span class=\"n\">choose_molecular_formula</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.choose_mf", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.choose_mf", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.total_peaks", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.total_peaks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.sum_abundance", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.sum_abundance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.min_max_mz", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.min_max_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.min_max_abundance", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.min_max_abundance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.min_ppm_error", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.min_ppm_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.max_ppm_error", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.max_ppm_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.all_identified_atoms", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.all_identified_atoms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.get_classes", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.get_classes", "kind": "function", "doc": "<p>Return a list of classes with abundance percentile above threshold</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold_perc</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">isotopologue</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.molecular_formula_string", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.molecular_formula_string", "kind": "function", "doc": "<p>Return a list of molecular formula string for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.molecular_formula", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.molecular_formula", "kind": "function", "doc": "<p>Return a list of molecular formula for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.carbon_number", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.carbon_number", "kind": "function", "doc": "<p>Return a list of carbon number for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.atom_count", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.atom_count", "kind": "function", "doc": "<p>Return a list of atom count for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atom</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.dbe", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.dbe", "kind": "function", "doc": "<p>Return a list of DBE for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.atoms_ratio", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.atoms_ratio", "kind": "function", "doc": "<p>Return a list of atoms ratio for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span>, </span><span class=\"param\"><span class=\"n\">numerator</span>, </span><span class=\"param\"><span class=\"n\">denominator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.mz_exp", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.mz_exp", "kind": "function", "doc": "<p>Return a list of experimental mz for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.abundance", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.abundance", "kind": "function", "doc": "<p>Return a list of abundance for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.mz_error", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.mz_error", "kind": "function", "doc": "<p>Return a list of mz error for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.mz_calc", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.mz_calc", "kind": "function", "doc": "<p>Return a list of calculated mz for specified class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.peaks_count_percentile", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.peaks_count_percentile", "kind": "function", "doc": "<p>Return the peaks count percentile of a specific class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.abundance_count_percentile", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.abundance_count_percentile", "kind": "function", "doc": "<p>Return the abundance percentile of a specific class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.mz_exp_assigned", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.mz_exp_assigned", "kind": "function", "doc": "<p>Return a list of experimental mz for all assigned classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.abundance_assigned", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.abundance_assigned", "kind": "function", "doc": "<p>Return a list of abundance for all classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.mz_exp_all", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.mz_exp_all", "kind": "function", "doc": "<p>Return a list of mz for all classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.mz_error_all", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.mz_error_all", "kind": "function", "doc": "<p>Return a list of mz error for all classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.carbon_number_all", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.carbon_number_all", "kind": "function", "doc": "<p>Return a list of carbon number for all classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.dbe_all", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.dbe_all", "kind": "function", "doc": "<p>Return a list of DBE for all classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.atoms_ratio_all", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.atoms_ratio_all", "kind": "function", "doc": "<p>Return a list of atoms ratio for all classes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">numerator</span>, </span><span class=\"param\"><span class=\"n\">denominator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.to_dataframe", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.to_dataframe", "kind": "function", "doc": "<p>Return a pandas dataframe with all the data from the class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>include_isotopologue</strong> (bool, optional):\nInclude isotopologues, by default False</li>\n<li><strong>abundance_perc_threshold</strong> (int, optional):\nAbundance percentile threshold, by default 5</li>\n<li><strong>include_unassigned</strong> (bool, optional):\nInclude unassigned peaks, by default False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFrame</strong>: Pandas dataframe with all the data from the class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">include_isotopologue</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">abundance_perc_threshold</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">include_unassigned</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.plot_ms_assigned_unassigned", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.plot_ms_assigned_unassigned", "kind": "function", "doc": "<p>Plot stick mass spectrum of all classes</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assigned_color</strong> (str, optional):\nMatplotlib color for the assigned peaks, by default \"b\"</li>\n<li><strong>unassigned_color</strong> (str, optional):\nMatplotlib color for the unassigned peaks, by default \"r\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes):\nMatplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">assigned_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span>, </span><span class=\"param\"><span class=\"n\">unassigned_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.plot_mz_error", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.plot_mz_error", "kind": "function", "doc": "<p>Plot mz error scatter plot of all classes</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>color</strong> (str, optional):\nMatplotlib color, by default \"g\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes):\nMatplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;g&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.plot_mz_error_class", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.plot_mz_error_class", "kind": "function", "doc": "<p>Plot mz error scatter plot of a specific class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe</strong> (str):\nClass name</li>\n<li><strong>color</strong> (str, optional):\nMatplotlib color, by default \"g\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes):\nMatplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;g&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.plot_ms_class", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.plot_ms_class", "kind": "function", "doc": "<p>Plot stick mass spectrum of a specific class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe</strong> (str):\nClass name</li>\n<li><strong>color</strong> (str, optional):\nMatplotlib color, by default \"g\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes):\nMatplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;g&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.plot_van_krevelen", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.plot_van_krevelen", "kind": "function", "doc": "<p>Plot Van Krevelen Diagram</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe</strong> (str):\nClass name</li>\n<li><strong>max_hc</strong> (float, optional):\nMax H/C ratio, by default 2.5</li>\n<li><strong>max_oc</strong> (float, optional):\nMax O/C ratio, by default 2</li>\n<li><strong>ticks_number</strong> (int, optional):\nNumber of ticks, by default 5</li>\n<li><strong>color</strong> (str, optional):\nMatplotlib color, by default \"viridis\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes):\nMatplotlib axes object</li>\n<li><strong>abun_perc</strong> (float):\nClass percentile of the relative abundance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span>, </span><span class=\"param\"><span class=\"n\">max_hc</span><span class=\"o\">=</span><span class=\"mf\">2.5</span>, </span><span class=\"param\"><span class=\"n\">max_oc</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">ticks_number</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;viridis&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.classification.HeteroatomsClassification.plot_dbe_vs_carbon_number", "modulename": "corems.molecular_id.factory.classification", "qualname": "HeteroatomsClassification.plot_dbe_vs_carbon_number", "kind": "function", "doc": "<p>Plot DBE vs Carbon Number</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe</strong> (str):\nClass name</li>\n<li><strong>max_c</strong> (int, optional):\nMax Carbon Number, by default 50</li>\n<li><strong>max_dbe</strong> (int, optional):\nMax DBE, by default 40</li>\n<li><strong>dbe_incr</strong> (int, optional):\nDBE increment, by default 5</li>\n<li><strong>c_incr</strong> (int, optional):\nCarbon Number increment, by default 10</li>\n<li><strong>color</strong> (str, optional):\nMatplotlib color, by default \"viridis\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes):\nMatplotlib axes object</li>\n<li><strong>abun_perc</strong> (float):\nClass percentile of the relative abundance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">classe</span>,</span><span class=\"param\">\t<span class=\"n\">max_c</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">max_dbe</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">dbe_incr</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">c_incr</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;viridis&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata", "kind": "class", "doc": "<p>Dataclass for the Lipid Metadata</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nThe name of the lipid, using the LIPID MAPS nomenclature</li>\n<li><strong>casno</strong> (str):\nThe CAS number of the lipid</li>\n<li><strong>formula</strong> (str):\nThe molecular formula of the lipid</li>\n<li><strong>pubchem_id</strong> (str):\nThe PubChem ID of the lipid</li>\n<li><strong>structure_level</strong> (str):\nThe structure level of the lipid, following the LIPID MAPS classification</li>\n<li><strong>lipid_summed_name</strong> (str):\nThe summed name of the lipid, aka lipid species,\nfollowing the LIPID MAPS classification</li>\n<li><strong>lipid_subclass</strong> (str):\nThe subclass of the lipid, following the LIPID MAPS classification</li>\n<li><strong>lipid_class</strong> (str):\nThe class of the lipid, following the LIPID MAPS classification</li>\n<li><strong>lipid_category</strong> (str):\nThe category of the lipid, following the LIPID MAPS classification</li>\n</ul>\n", "bases": "corems.molecular_id.factory.EI_SQL.MetaboliteMetadata"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.__init__", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cas</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inchikey</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inchi</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chebi</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">smiles</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">kegg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">iupac_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">traditional_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">common_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">casno</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">formula</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pubchem_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">structure_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lipid_summed_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lipid_subclass</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lipid_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lipid_category</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.name", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.casno", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.casno", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.formula", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.formula", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.pubchem_id", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.pubchem_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.structure_level", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.structure_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.lipid_summed_name", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.lipid_summed_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.lipid_subclass", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.lipid_subclass", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.lipid_class", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.lipid_class", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.lipid_molecular_metadata.LipidMetadata.lipid_category", "modulename": "corems.molecular_id.factory.lipid_molecular_metadata", "qualname": "LipidMetadata.lipid_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "corems.molecular_id.factory.molecularSQL", "modulename": "corems.molecular_id.factory.molecularSQL", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.Base", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "Base", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.Base.__init__", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.molecularSQL.Base.registry", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "corems.molecular_id.factory.molecularSQL.Base.metadata", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "default_value": "MetaData()"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms", "kind": "class", "doc": "<p>HeteroAtoms class for the heteroAtoms table in the SQLite database.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nThe primary key for the table.</li>\n<li><strong>name</strong> (str):\nThe name of the heteroAtoms class.</li>\n<li><strong>halogensCount</strong> (int):\nThe number of halogens in the heteroAtoms class.</li>\n<li><strong>carbonHydrogen</strong> (relationship):\nThe relationship to the carbonHydrogen table.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>__repr__()\nReturns the string representation of the object.</li>\n<li>to_dict()\nReturns the heteroAtoms class as a dictionary.</li>\n<li>halogens_count()\nReturns the number of halogens as a float.</li>\n</ul>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms.__init__", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms.id", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms.name", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms.halogensCount", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms.halogensCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms.carbonHydrogen", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms.carbonHydrogen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms.halogens_count", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms.halogens_count", "kind": "variable", "doc": "<p>Returns the number of halogens as a float.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.HeteroAtoms.to_dict", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "HeteroAtoms.to_dict", "kind": "function", "doc": "<p>Returns the heteroAtoms class as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen", "kind": "class", "doc": "<p>CarbonHydrogen class for the carbonHydrogen table in the SQLite database.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nThe primary key for the table.</li>\n<li><strong>C</strong> (int):\nThe number of carbon atoms.</li>\n<li><strong>H</strong> (int):\nThe number of hydrogen atoms.</li>\n<li><strong>heteroAtoms</strong> (relationship):\nThe relationship to the heteroAtoms table.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>__repr__()\nReturns the string representation of the object.</li>\n<li>mass()\nReturns the mass of the carbonHydrogen class as a float.</li>\n<li>c()\nReturns the number of carbon atoms as a float.</li>\n<li>h()\nReturns the number of hydrogen atoms as a float.</li>\n<li>dbe()\nReturns the double bond equivalent as a float.</li>\n</ul>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.__init__", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.id", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.C", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.C", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.H", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.H", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.heteroAtoms", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.heteroAtoms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.mass", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.mass", "kind": "variable", "doc": "<p>Returns the mass of the carbonHydrogen class as a float.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.c", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.c", "kind": "variable", "doc": "<p>Returns the number of carbon atoms as a float.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.h", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.h", "kind": "variable", "doc": "<p>Returns the number of hydrogen atoms as a float.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.CarbonHydrogen.dbe", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "CarbonHydrogen.dbe", "kind": "variable", "doc": "<p>Returns the double bond equivalent as a float.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink", "kind": "class", "doc": "<p>MolecularFormulaLink class for the molecularformula table in the SQLite database.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>heteroAtoms_id</strong> (int):\nThe foreign key for the heteroAtoms table.</li>\n<li><strong>carbonHydrogen_id</strong> (int):\nThe foreign key for the carbonHydrogen table.</li>\n<li><strong>mass</strong> (float):\nThe mass of the molecular formula.</li>\n<li><strong>DBE</strong> (float):\nThe double bond equivalent of the molecular formula.</li>\n<li><strong>carbonHydrogen</strong> (relationship):\nThe relationship to the carbonHydrogen table.</li>\n<li><strong>heteroAtoms</strong> (relationship):\nThe relationship to the heteroAtoms table.</li>\n<li><strong>C</strong> (association_proxy):\nThe association proxy for the carbonHydrogen table.</li>\n<li><strong>H</strong> (association_proxy):\nThe association proxy for the carbonHydrogen table.</li>\n<li><strong>classe</strong> (association_proxy):\nThe association proxy for the heteroAtoms table.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>__repr__()\nReturns the string representation of the object.</li>\n<li>to_dict()\nReturns the molecular formula as a dictionary.</li>\n<li>formula_string()\nReturns the molecular formula as a string.</li>\n<li>classe_string()\nReturns the heteroAtoms class as a string.</li>\n<li>_adduct_mz(ion_charge, adduct_atom)\nReturns the m/z of the adduct ion as a float.</li>\n<li>_protonated_mz(ion_charge)\nReturns the m/z of the protonated ion as a float.</li>\n<li>_radical_mz(ion_charge)\nReturns the m/z of the radical ion as a float.</li>\n</ul>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.__init__", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.heteroAtoms_id", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.heteroAtoms_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.carbonHydrogen_id", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.carbonHydrogen_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.mass", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.mass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.DBE", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.DBE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.carbonHydrogen", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.carbonHydrogen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.heteroAtoms", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.heteroAtoms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.C", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.C", "kind": "variable", "doc": "<p>A descriptor that presents a read/write view of an object attribute.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.H", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.H", "kind": "variable", "doc": "<p>A descriptor that presents a read/write view of an object attribute.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.classe", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.classe", "kind": "variable", "doc": "<p>A descriptor that presents a read/write view of an object attribute.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.to_dict", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.to_dict", "kind": "function", "doc": "<p>Returns the molecular formula as a dictionary.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The molecular formula as a dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.formula_string", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.formula_string", "kind": "variable", "doc": "<p>Returns the molecular formula as a string.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolecularFormulaLink.classe_string", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolecularFormulaLink.classe_string", "kind": "variable", "doc": "<p>Returns the heteroAtoms class as a string.</p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL", "kind": "class", "doc": "<p>MolForm_SQL class for the SQLite database.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>engine</strong> (sqlalchemy.engine.base.Engine):\nThe SQLAlchemy engine.</li>\n<li><strong>session</strong> (sqlalchemy.orm.session.Session):\nThe SQLAlchemy session.</li>\n<li><strong>type</strong> (str):\nThe type of database.</li>\n<li><strong>chunks_count</strong> (int):\nThe number of chunks to use when querying the database.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>__init__(url=None, echo=False)\nInitializes the database.</li>\n<li>__exit__(exc_type, exc_val, exc_tb)\nCloses the database.</li>\n<li>initiate_database(url, database_name)\nCreates the database.</li>\n<li>commit()\nCommits the session.</li>\n<li>init_engine(url)\nInitializes the SQLAlchemy engine.</li>\n<li><p>__enter__()</p></li>\n<li><p>get_dict_by_classes(classes, ion_type, nominal_mzs, ion_charge, molecular_search_settings, adducts=None)\nReturns a dictionary of molecular formulas.</p></li>\n<li>check_entry(classe, ion_type, molecular_search_settings)\nChecks if a molecular formula is in the database.</li>\n<li>get_all_classes()\nReturns a list of all classes in the database.</li>\n<li>get_all()\nReturns a list of all molecular formulas in the database.</li>\n<li>delete_entry(row)\nDeletes a molecular formula from the database.</li>\n<li>purge(cls)\nDeletes all molecular formulas from the database.</li>\n<li>clear_data()\nClears the database.</li>\n<li>close(commit=True)\nCloses the database.</li>\n<li>add_engine_pidguard(engine)\nAdds multiprocessing guards.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.__init__", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">echo</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.engine", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.engine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.session", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.initiate_database", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.initiate_database", "kind": "function", "doc": "<p>Creates the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (str):\nThe URL for the database.</li>\n<li><strong>database_name</strong> (str):\nThe name of the database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">database_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.commit", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.commit", "kind": "function", "doc": "<p>Commits the session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.init_engine", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.init_engine", "kind": "function", "doc": "<p>Initializes the SQLAlchemy engine.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (str):\nThe URL for the database.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sqlalchemy.engine.base.Engine</strong>: The SQLAlchemy engine.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.get_dict_by_classes", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.get_dict_by_classes", "kind": "function", "doc": "<p>Returns a dictionary of molecular formulas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classes</strong> (list):\nThe list of classes.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type.</li>\n<li><strong>nominal_mzs</strong> (list):\nThe list of nominal m/z values.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>molecular_search_settings</strong> (MolecularFormulaSearchSettings):\nThe molecular formula search settings.</li>\n<li><strong>adducts</strong> (list, optional):\nThe list of adducts. Default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The dictionary of molecular formulas.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Known issue, when using SQLite:\nif the number of classes and nominal_m/zs are higher than 999 the query will fail\nSolution: use postgres or split query</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span>,</span><span class=\"param\">\t<span class=\"n\">nominal_mzs</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span>,</span><span class=\"param\">\t<span class=\"n\">molecular_search_settings</span>,</span><span class=\"param\">\t<span class=\"n\">adducts</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.check_entry", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.check_entry", "kind": "function", "doc": "<p>Checks if a molecular formula is in the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe</strong> (str):\nThe class of the molecular formula.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type.</li>\n<li><strong>molecular_search_settings</strong> (MolecularFormulaSearchSettings):\nThe molecular formula search settings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sqlalchemy.orm.query.Query</strong>: The query.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe</span>, </span><span class=\"param\"><span class=\"n\">ion_type</span>, </span><span class=\"param\"><span class=\"n\">molecular_search_settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.get_all_classes", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.get_all_classes", "kind": "function", "doc": "<p>Returns a list of all classes in the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.get_all", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.get_all", "kind": "function", "doc": "<p>Returns a list of all molecular formulas in the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.delete_entry", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.delete_entry", "kind": "function", "doc": "<p>Deletes a molecular formula from the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.purge", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.purge", "kind": "function", "doc": "<p>Deletes all molecular formulas from the database.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Careful, this will delete the entire database table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.clear_data", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.clear_data", "kind": "function", "doc": "<p>Clears the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.close", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.close", "kind": "function", "doc": "<p>Closes the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>commit</strong> (bool, optional):\nWhether to commit the session. Default is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">commit</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.molecularSQL.MolForm_SQL.add_engine_pidguard", "modulename": "corems.molecular_id.factory.molecularSQL", "qualname": "MolForm_SQL.add_engine_pidguard", "kind": "function", "doc": "<p>Adds multiprocessing guards.</p>\n\n<p>Forces a connection to be reconnected if it is detected\nas having been shared to a sub-process.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>engine</strong> (sqlalchemy.engine.base.Engine):\nThe SQLAlchemy engine.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">engine</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.factory.spectrum_search_results", "modulename": "corems.molecular_id.factory.spectrum_search_results", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.spectrum_search_results.SpectrumSearchResults", "modulename": "corems.molecular_id.factory.spectrum_search_results", "qualname": "SpectrumSearchResults", "kind": "class", "doc": "<p>Class for storing Search Results for a single Spectrum Query</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query_spectrum</strong> (MassSpectrum):\nThe queried mass spectrum</li>\n<li><strong>precursor_mz</strong> (float, optional):\nThe queried precursor_mz. None is interpreted as an open query, i.e. no precursor_mz</li>\n<li><strong>spectral_similarity_search_results</strong> (dict):\nThe search results for the queried spectrum, which will be unpacked into attributes</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>query_spectrum</strong> (MassSpectrum):\nThe queried mass spectrum</li>\n<li><strong>query_spectrum_id</strong> (int):\nThe id of the queried spectrum (the scan number within an MassSpectra object)</li>\n<li><strong>precursor_mz</strong> (float):\nThe precursor m/z of the queried spectrum</li>\n</ul>\n\n<h6 id=\"other-possible-attributes\">Other Possible Attributes</h6>\n\n<p>ref_mol_id : str\n    The id of the molecule associated with the query spectrum in reference database\nref_ms_id : str\n    The id of the query spectrum in reference database\nref_precursor_mz : float\n    The precursor mass of the query spectrum\nprecursor_mz_error_ppm : float\n    The ppm error between the query spectrum and the reference spectrum\nentropy_similarity : float\n    The entropy similarity between the query spectrum and the reference spectrum\nref_ion_type : str\n    The ion type of the reference spectrum, i.e. [M+H]+, [M+Na]+, etc.\nquery_mz_in_ref_n : list\n    The number of query m/z peaks that are in the reference spectrum\nquery_mz_in_ref_fract : float\n    The fraction of query m/z peaks that are in the reference spectrum\nquery_frag_types : list\n    The fragment types of the query spectrum that are in the reference spectrum,\n    i.e. LSF (lipid species fragments) or MSF (molecular species fragments),\n    generally used for only for lipidomics\nref_mz_in_query_n : list\n    The number of reference m/z peaks that are in the query spectrum\nref_mz_in_query_fract : float\n    The fraction of reference m/z peaks that are in the query spectrum\nref_frag_types : list\n    The fragment types of the reference spectrum,\n    i.e. LSF (lipid species fragments) or MSF (molecular species fragments),\n    generally used for only for lipidomics</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>*to_dataframe().\n    Convert the SpectrumSearchResults to a pandas DataFrame</p>\n"}, {"fullname": "corems.molecular_id.factory.spectrum_search_results.SpectrumSearchResults.__init__", "modulename": "corems.molecular_id.factory.spectrum_search_results", "qualname": "SpectrumSearchResults.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query_spectrum</span>, </span><span class=\"param\"><span class=\"n\">precursor_mz</span>, </span><span class=\"param\"><span class=\"n\">spectral_similarity_search_results</span></span>)</span>"}, {"fullname": "corems.molecular_id.factory.spectrum_search_results.SpectrumSearchResults.query_spectrum", "modulename": "corems.molecular_id.factory.spectrum_search_results", "qualname": "SpectrumSearchResults.query_spectrum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.spectrum_search_results.SpectrumSearchResults.precursor_mz", "modulename": "corems.molecular_id.factory.spectrum_search_results", "qualname": "SpectrumSearchResults.precursor_mz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.factory.spectrum_search_results.SpectrumSearchResults.to_dataframe", "modulename": "corems.molecular_id.factory.spectrum_search_results", "qualname": "SpectrumSearchResults.to_dataframe", "kind": "function", "doc": "<p>Convert the SpectrumSearchResults to a pandas DataFrame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cols_to_drop</strong> (list, optional):\nA list of columns to drop from the DataFrame. Default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: A DataFrame with the SpectrumSearchResults attributes as columns</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols_to_drop</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.input", "modulename": "corems.molecular_id.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.input.nistMSI", "modulename": "corems.molecular_id.input.nistMSI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.input.nistMSI.ReadNistMSI", "modulename": "corems.molecular_id.input.nistMSI", "qualname": "ReadNistMSI", "kind": "class", "doc": "<p>A class for reading NIST MSI files and storing the data in a SQLite database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong> (str):\nThe path to the NIST MSI file.</li>\n<li><strong>url</strong> (str, optional):\nThe URL for the SQLite database. Default is 'sqlite://'.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileExistsError</strong>: If the specified file does not exist.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>file_path</strong> (str):\nThe path to the NIST MSI file.</li>\n<li><strong>url</strong> (str):\nThe URL for the SQLite database.</li>\n<li><strong>sqlLite_obj</strong> (EI_LowRes_SQLite):\nThe SQLite object for storing the compound data.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>run().\nRuns the thread and initializes the SQLite object.</li>\n<li>get_sqlLite_obj().\nReturns the SQLite object.</li>\n<li>get_compound_data_dict_list().\nParses the NIST MSI file and returns a list of compound data dictionaries.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.molecular_id.input.nistMSI.ReadNistMSI.__init__", "modulename": "corems.molecular_id.input.nistMSI", "qualname": "ReadNistMSI.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">&#39;sqlite://&#39;</span></span>)</span>"}, {"fullname": "corems.molecular_id.input.nistMSI.ReadNistMSI.file_path", "modulename": "corems.molecular_id.input.nistMSI", "qualname": "ReadNistMSI.file_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.input.nistMSI.ReadNistMSI.url", "modulename": "corems.molecular_id.input.nistMSI", "qualname": "ReadNistMSI.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.input.nistMSI.ReadNistMSI.run", "modulename": "corems.molecular_id.input.nistMSI", "qualname": "ReadNistMSI.run", "kind": "function", "doc": "<p>Runs the thread and initializes the SQLite object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.input.nistMSI.ReadNistMSI.get_sqlLite_obj", "modulename": "corems.molecular_id.input.nistMSI", "qualname": "ReadNistMSI.get_sqlLite_obj", "kind": "function", "doc": "<p>Returns the SQLite object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>EI_LowRes_SQLite</strong>: The SQLite object for storing the compound data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.input.nistMSI.ReadNistMSI.get_compound_data_dict_list", "modulename": "corems.molecular_id.input.nistMSI", "qualname": "ReadNistMSI.get_compound_data_dict_list", "kind": "function", "doc": "<p>Parses the NIST MSI file and returns a list of compound data dictionaries.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of compound data dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search", "modulename": "corems.molecular_id.search", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.compoundSearch", "modulename": "corems.molecular_id.search.compoundSearch", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.compoundSearch.LowResMassSpectralMatch", "modulename": "corems.molecular_id.search.compoundSearch", "qualname": "LowResMassSpectralMatch", "kind": "class", "doc": "<p>A class representing a low-resolution mass spectral match.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gcms_obj</strong> (object):\nThe GC-MS object.</li>\n<li><strong>sql_obj</strong> (object, optional):\nThe SQL object for database operations. Default is None.</li>\n<li><strong>calibration</strong> (bool, optional):\nFlag indicating if the match is for calibration. Default is False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>gcms_obj</strong> (object):\nThe GC-MS object.</li>\n<li><strong>sql_obj</strong> (object):\nThe SQL object for database operations.</li>\n<li><strong>calibration</strong> (bool):\nFlag indicating if the match is for calibration.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>metabolite_detector_score(gc_peak, ref_obj, spectral_simi).\nCalculates the spectral similarity scores and the similarity score for a given GC peak and reference object.</li>\n<li>run().\nRuns the low-resolution mass spectral match.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.molecular_id.search.compoundSearch.LowResMassSpectralMatch.__init__", "modulename": "corems.molecular_id.search.compoundSearch", "qualname": "LowResMassSpectralMatch.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gcms_obj</span>, </span><span class=\"param\"><span class=\"n\">sql_obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">calibration</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.molecular_id.search.compoundSearch.LowResMassSpectralMatch.gcms_obj", "modulename": "corems.molecular_id.search.compoundSearch", "qualname": "LowResMassSpectralMatch.gcms_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.compoundSearch.LowResMassSpectralMatch.calibration", "modulename": "corems.molecular_id.search.compoundSearch", "qualname": "LowResMassSpectralMatch.calibration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.compoundSearch.LowResMassSpectralMatch.metabolite_detector_score", "modulename": "corems.molecular_id.search.compoundSearch", "qualname": "LowResMassSpectralMatch.metabolite_detector_score", "kind": "function", "doc": "<p>Calculates the spectral similarity scores and the similarity score for a given GC peak and reference object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gc_peak</strong> (object):\nThe GC peak object.</li>\n<li><strong>ref_obj</strong> (object):\nThe reference object.</li>\n<li><strong>spectral_simi</strong> (object):\nThe spectral similarity object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the spectral similarity scores, RI score, and similarity score.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gc_peak</span>, </span><span class=\"param\"><span class=\"n\">ref_obj</span>, </span><span class=\"param\"><span class=\"n\">spectral_simi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.compoundSearch.LowResMassSpectralMatch.run", "modulename": "corems.molecular_id.search.compoundSearch", "qualname": "LowResMassSpectralMatch.run", "kind": "function", "doc": "<p>Runs the low-resolution mass spectral match.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces", "modulename": "corems.molecular_id.search.database_interfaces", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface", "kind": "class", "doc": "<p>Base class that facilitates connection to spectral reference databases,\nsuch as EMSL's Metabolomics Reference Database (MetabRef).</p>\n", "bases": "abc.ABC"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface.__init__", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface.__init__", "kind": "function", "doc": "<p>Initialize instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (str):\nToken key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface.key", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface.key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface.set_token", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface.set_token", "kind": "function", "doc": "<p>Set environment variable for MetabRef database token.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nPath to token.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface.get_token", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface.get_token", "kind": "function", "doc": "<p>Get environment variable for database token.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Token string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface.get_header", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface.get_header", "kind": "function", "doc": "<p>Access stored database token and prepare as header.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Header string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface.get_query", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface.get_query", "kind": "function", "doc": "<p>Request payload from URL according to <code>get</code> protocol.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (str):\nURL for request.</li>\n<li><strong>use_header</strong> (bool):\nWhether or not the query should include the header</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Response as JSON.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">use_header</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.SpectralDatabaseInterface.post_query", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "SpectralDatabaseInterface.post_query", "kind": "function", "doc": "<p>Request payload from URL according to <code>post</code> protocol.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (str):\nURL for request.</li>\n<li><strong>variable</strong> (str):\nVariable to query.</li>\n<li><strong>values</strong> (str):\nSpecific values of <code>variable</code> to query.</li>\n<li><strong>tolerance</strong> (str):\nQuery tolerance relative to <code>values</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Response as JSON.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">variable</span>, </span><span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefInterface", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefInterface", "kind": "class", "doc": "<p>Interface to the Metabolomics Reference Database.</p>\n", "bases": "SpectralDatabaseInterface"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefInterface.__init__", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefInterface.__init__", "kind": "function", "doc": "<p>Initialize instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefInterface.spectrum_to_array", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefInterface.spectrum_to_array", "kind": "function", "doc": "<p>Convert MetabRef-formatted spectrum to array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spectrum</strong> (str):\nMetabRef spectrum, i.e. list of (m/z,abundance) pairs.</li>\n<li><strong>normalize</strong> (bool):\nNormalize the spectrum by its magnitude.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>~numpy.array</code></strong>: Array of shape (N, 2), with m/z in the first column and abundance in\nthe second.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">spectrum</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefInterface.get_query", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefInterface.get_query", "kind": "function", "doc": "<p>Overwrites the get_query method on the parent class to default to not use a header</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>As of January 2025, the metabref database no longer requires a token and therefore no header is needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">use_header</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefGCInterface", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefGCInterface", "kind": "class", "doc": "<p>Interface to the Metabolomics Reference Database.</p>\n", "bases": "MetabRefInterface"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefGCInterface.__init__", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefGCInterface.__init__", "kind": "function", "doc": "<p>Initialize instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefGCInterface.GCMS_LIBRARY_URL", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefGCInterface.GCMS_LIBRARY_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefGCInterface.FAMES_URL", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefGCInterface.FAMES_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefGCInterface.available_formats", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefGCInterface.available_formats", "kind": "function", "doc": "<p>View list of available formats.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: Format map keys.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefGCInterface.get_library", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefGCInterface.get_library", "kind": "function", "doc": "<p>Request MetabRef GC/MS library.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format</strong> (str):\nFormat of requested library, i.e. \"json\", \"sql\", \"flashentropy\".\nSee <code>available_formats</code> method for aliases.</li>\n<li><strong>normalize</strong> (bool):\nNormalize the spectrum by its magnitude.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Library in requested format.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefGCInterface.get_fames", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefGCInterface.get_fames", "kind": "function", "doc": "<p>Request MetabRef GC/MS FAMEs library.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format</strong> (str):\nFormat of requested library, i.e. \"json\", \"sql\", \"flashentropy\".\nSee <code>available_formats</code> method for aliases.</li>\n<li><strong>normalize</strong> (bool):\nNormalize the spectrum by its magnitude.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Library in requested format.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefLCInterface", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefLCInterface", "kind": "class", "doc": "<p>Interface to the Metabolomics Reference Database for LC-MS data.</p>\n", "bases": "MetabRefInterface"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefLCInterface.__init__", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefLCInterface.__init__", "kind": "function", "doc": "<p>Initialize instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefLCInterface.PRECURSOR_MZ_URL", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefLCInterface.PRECURSOR_MZ_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefLCInterface.PRECURSOR_MZ_ALL_URL", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefLCInterface.PRECURSOR_MZ_ALL_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefLCInterface.query_by_precursor", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefLCInterface.query_by_precursor", "kind": "function", "doc": "<p>Query MetabRef by precursor m/z values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_list</strong> (list):\nList of precursor m/z values.</li>\n<li><strong>polarity</strong> (str):\nIonization polarity, either \"positive\" or \"negative\".</li>\n<li><strong>mz_tol_ppm</strong> (float):\nTolerance in ppm for each precursor m/z value.\nUsed for retrieving from a potential match from database.</li>\n<li><strong>mz_tol_da_api</strong> (float, optional):\nMaximum tolerance between precursor m/z values for API search, in daltons.\nUsed to group similar mzs into a single API query for speed. Default is 0.2.</li>\n<li><strong>max_per_page</strong> (int, optional):\nMaximum records to return from MetabRef API query at a time.  Default is 50.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: List of library entries in original JSON format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mz_list</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">mz_tol_ppm</span>,</span><span class=\"param\">\t<span class=\"n\">mz_tol_da_api</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">max_per_page</span><span class=\"o\">=</span><span class=\"mi\">50</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefLCInterface.request_all_precursors", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefLCInterface.request_all_precursors", "kind": "function", "doc": "<p>Request all precursor m/z values for MS2 spectra from MetabRef.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>polarity</strong> (str):\nIonization polarity, either \"positive\" or \"negative\".</li>\n<li><strong>per_page</strong> (int, optional):\nNumber of records to fetch per call. Default is 50000</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: List of all precursor m/z values, sorted.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">50000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.database_interfaces.MetabRefLCInterface.get_lipid_library", "modulename": "corems.molecular_id.search.database_interfaces", "qualname": "MetabRefLCInterface.get_lipid_library", "kind": "function", "doc": "<p>Request MetabRef lipid library.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_list</strong> (list):\nList of precursor m/z values.</li>\n<li><strong>polarity</strong> (str):\nIonization polarity, either \"positive\" or \"negative\".</li>\n<li><strong>mz_tol_ppm</strong> (float):\nTolerance in ppm for each precursor m/z value.\nUsed for retrieving from a potential match from database.</li>\n<li><strong>mz_tol_da_api</strong> (float, optional):\nMaximum tolerance between precursor m/z values for API search, in daltons.\nUsed to group similar mzs into a single API query for speed. Default is 0.2.</li>\n<li><strong>format</strong> (str, optional):\nFormat of requested library, i.e. \"json\", \"sql\", \"flashentropy\".\nSee <code>available_formats</code> method for aliases. Default is \"json\".</li>\n<li><strong>normalize</strong> (bool, optional):\nNormalize the spectrum by its magnitude. Default is True.</li>\n<li><strong>fe_kwargs</strong> (dict, optional):\nKeyword arguments for FlashEntropy search. Default is {}.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: Library in requested format and lipid metadata as a LipidMetadata dataclass.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mz_list</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">mz_tol_ppm</span>,</span><span class=\"param\">\t<span class=\"n\">mz_tol_da_api</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fe_kwargs</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks", "modulename": "corems.molecular_id.search.findOxygenPeaks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks", "kind": "class", "doc": "<p>Class to find Oxygen peaks in a mass spectrum for formula assignment search</p>\n\n<p>Class to walk 14Da units over oxygen space for negative ion mass spectrum of natural organic matter\nReturns a list of MSPeak class containing the possible Molecular Formula class objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpec class):\nThis is where we store MassSpec class obj,</li>\n<li><strong>lookupTableSettings</strong> (MolecularLookupTableSettings class):\nThis is where we store MolecularLookupTableSettings class obj</li>\n<li><strong>min_O , max_O</strong> (int):\nminium and maximum of Oxygen to allow the software to look for\nit will override the settings at lookupTableSettings.usedAtoms\ndefault min = 1, max = 22</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpec class):\nThis is where we store MassSpec class obj,</li>\n<li><strong>lookupTableSettings</strong> (MolecularLookupTableSettings class):\nThis is where we store MolecularLookupTableSettings class obj</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>run().\nwill be called when the instantiated class method start is called</li>\n<li>get_list_found_peaks().\nreturns a list of MSpeaks classes cotaining all the MolecularFormula candidates inside the MSPeak\nfor more details of the structure see MSPeak class and MolecularFormula class</li>\n<li>set_mass_spec_indexes_by_found_peaks().\nset the mass spectrum to interate over only the selected indexes</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.__init__", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mass_spectrum_obj</span>,</span><span class=\"param\">\t<span class=\"n\">sql_db</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">min_O</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_O</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">22</span></span>)</span>"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.mass_spectrum_obj", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.mass_spectrum_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.min_0", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.min_0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.max_O", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.max_O", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.run", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.run", "kind": "function", "doc": "<p>Run the thread</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.find_most_abundant_formula", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.find_most_abundant_formula", "kind": "function", "doc": "<p>Find the most abundant formula in the mass spectrum</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpec class):\nMass spectrum object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MolecularFormula class obj</strong>: most abundant MolecularFormula with the lowest mass error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.find_most_abundant_formula_test", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.find_most_abundant_formula_test", "kind": "function", "doc": "<p>[Test function] Find the most abundant formula in the mass spectrum</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpec class):\nMass spectrum object</li>\n<li><strong>settings</strong> (MolecularSearchSettings class):\nMolecular search settings object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MolecularFormula class obj</strong>: most abundant MolecularFormula with the lowest mass error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.find_series_mspeaks", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.find_series_mspeaks", "kind": "function", "doc": "<p>Find a series of abundant peaks in the mass spectrum for a given molecular formula</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpec class):\nMass spectrum object</li>\n<li><strong>molecular_formula_obj_reference</strong> (MolecularFormula class):\nMolecular formula object</li>\n<li><strong>deltamz</strong> (float):\ndelta m/z to look for peaks</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: list of MSpeak class objects</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span>, </span><span class=\"param\"><span class=\"n\">molecular_formula_obj_reference</span>, </span><span class=\"param\"><span class=\"n\">deltamz</span><span class=\"o\">=</span><span class=\"mi\">14</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.get_list_found_peaks", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.get_list_found_peaks", "kind": "function", "doc": "<p>Get the list of found peaks</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: list of MSpeak class objects</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.findOxygenPeaks.FindOxygenPeaks.set_mass_spec_indexes_by_found_peaks", "modulename": "corems.molecular_id.search.findOxygenPeaks", "qualname": "FindOxygenPeaks.set_mass_spec_indexes_by_found_peaks", "kind": "function", "doc": "<p>Set the mass spectrum to interate over only the selected indexes.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Warning!!!!\nset the mass spectrum to interate over only the selected indexes\ndon not forget to call mass_spectrum_obj.reset_indexes after the job is done</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.lcms_spectral_search", "modulename": "corems.molecular_id.search.lcms_spectral_search", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.lcms_spectral_search.LCMSSpectralSearch", "modulename": "corems.molecular_id.search.lcms_spectral_search", "qualname": "LCMSSpectralSearch", "kind": "class", "doc": "<p>Methods for searching LCMS spectra.</p>\n\n<p>This class is designed to be a mixin class for the <code>~corems.mass_spectra.factory.lc_class.LCMSBase</code> class.</p>\n"}, {"fullname": "corems.molecular_id.search.lcms_spectral_search.LCMSSpectralSearch.get_more_match_quals", "modulename": "corems.molecular_id.search.lcms_spectral_search", "qualname": "LCMSSpectralSearch.get_more_match_quals", "kind": "function", "doc": "<p>Return additional match qualities between query and library entry.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query_mz_arr</strong> (np.array):\nArray of query spectrum. Shape (N, 2), with m/z in the first column\nand abundance in the second.</li>\n<li><strong>lib_entry</strong> (dict):\nLibrary spectrum entry, with 'mz' key containing the spectrum in\nthe format (mz, abundance),(mz, abundance), i.e. from MetabRef.</li>\n<li><strong>mz_tol_da</strong> (float, optional):\nTolerance in Da for matching peaks (in MS2). Default is 0.1.</li>\n<li><strong>include_fragment_types</strong> (bool, optional):\nIf True, include fragment type comparisons in output.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: Tuple of (query_in_lib, query_in_lib_fract, lib_in_query, lib_in_query_fract, query_frags, lib_frags, lib_precursor_mz).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>query_in_lib : int\n    Number of peaks in query that are present in the library entry (within mz_tol_da).\nquery_in_lib_fract : float\n    Fraction of peaks in query that are present in the library entry (within mz_tol_da).\nlib_in_query : int\n    Number of peaks in the library entry that are present in the query (within mz_tol_da).\nlib_in_query_fract : float\n    Fraction of peaks in the library entry that are present in the query (within mz_tol_da).\nquery_frags : list\n    List of unique fragment types present in the query, generally 'MLF' or 'LSF' or both.\nlib_frags : list\n    List of unique fragment types present in the library entry, generally 'MLF' or 'LSF' or both.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If library entry does not have 'fragment_types' key and include_fragment_types is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query_mz_arr</span>, </span><span class=\"param\"><span class=\"n\">lib_entry</span>, </span><span class=\"param\"><span class=\"n\">mz_tol_da</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>, </span><span class=\"param\"><span class=\"n\">include_fragment_types</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.lcms_spectral_search.LCMSSpectralSearch.fe_search", "modulename": "corems.molecular_id.search.lcms_spectral_search", "qualname": "LCMSSpectralSearch.fe_search", "kind": "function", "doc": "<p>Search LCMS spectra using a FlashEntropy approach.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_list</strong> (list):\nList of scan numbers to search.</li>\n<li><strong>fe_lib</strong> (<code>~ms_entropy.FlashEntropySearch</code>):\nFlashEntropy Search instance.</li>\n<li><strong>precursor_mz_list</strong> (list, optional):\nList of precursor m/z values to search, by default [], which implies\nmatched with mass features; to enable this use_mass_features must be True.</li>\n<li><strong>use_mass_features</strong> (bool, optional):\nIf True, use mass features to get precursor m/z values, by default True.\nIf True, will add search results to mass features' ms2_similarity_results attribute.</li>\n<li><strong>peak_sep_da</strong> (float, optional):\nMinimum separation between m/z peaks spectra in Da. This needs match the\napproximate resolution of the search spectra and the FlashEntropySearch\ninstance, by default 0.01.</li>\n<li><strong>get_additional_metrics</strong> (bool, optional):\nIf True, get additional metrics from FlashEntropy search, by default True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but adds results to self.spectral_search_results and associates these</strong></li>\n<li><strong>spectral_search_results with mass_features within the self.mass_features dictionary.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scan_list</span>,</span><span class=\"param\">\t<span class=\"n\">fe_lib</span>,</span><span class=\"param\">\t<span class=\"n\">precursor_mz_list</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">use_mass_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">peak_sep_da</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">get_additional_metrics</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.last_error", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "last_error", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.last_dif", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "last_dif", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.closest_error", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "closest_error", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.error_average", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "error_average", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.nbValues", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "nbValues", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas", "kind": "class", "doc": "<p>Class for searching molecular formulas in a mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>sql_db</strong> (MolForm_SQL, optional):\nThe SQL database object, by default None.</li>\n<li><strong>first_hit</strong> (bool, optional):\nFlag to indicate whether to skip peaks that already have a molecular formula assigned, by default False.</li>\n<li><strong>find_isotopologues</strong> (bool, optional):\nFlag to indicate whether to find isotopologues, by default True.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>sql_db</strong> (MolForm_SQL):\nThe SQL database object.</li>\n<li><strong>first_hit</strong> (bool):\nFlag to indicate whether to skip peaks that already have a molecular formula assigned.</li>\n<li><strong>find_isotopologues</strong> (bool):\nFlag to indicate whether to find isotopologues.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>run_search().\nRun the molecular formula search.</li>\n<li>run_worker_mass_spectrum().\nRun the molecular formula search on the mass spectrum object.</li>\n<li>run_worker_ms_peaks().\nRun the molecular formula search on the given list of mass spectrum peaks.</li>\n<li>database_to_dict().\nConvert the database results to a dictionary.</li>\n<li>run_molecular_formula().\nRun the molecular formula search on the given list of mass spectrum peaks.</li>\n<li>search_mol_formulas().\nSearch for molecular formulas in the mass spectrum.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.__init__", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mass_spectrum_obj</span>,</span><span class=\"param\">\t<span class=\"n\">sql_db</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">first_hit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">find_isotopologues</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.first_hit", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.first_hit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.find_isotopologues", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.find_isotopologues", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.mass_spectrum_obj", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.mass_spectrum_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.run_search", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.run_search", "kind": "function", "doc": "<p>Run the molecular formula search.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mspeaks</strong> (list of MSPeak):\nThe list of mass spectrum peaks.</li>\n<li><strong>query</strong> (dict):\nThe query dictionary containing the possible molecular formulas.</li>\n<li><strong>min_abundance</strong> (float):\nThe minimum abundance threshold.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>adduct_atom</strong> (str, optional):\nThe adduct atom, by default None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mspeaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">min_abundance</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atom</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.run_worker_mass_spectrum", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.run_worker_mass_spectrum", "kind": "function", "doc": "<p>Run the molecular formula search on the mass spectrum object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.run_worker_ms_peaks", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.run_worker_ms_peaks", "kind": "function", "doc": "<p>Run the molecular formula search on the given list of mass spectrum peaks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_peaks</strong> (list of MSPeak):\nThe list of mass spectrum peaks.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms_peaks</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.database_to_dict", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.database_to_dict", "kind": "function", "doc": "<p>Convert the database results to a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe_str_list</strong> (list):\nThe list of class strings.</li>\n<li><strong>nominal_mzs</strong> (list):\nThe list of nominal m/z values.</li>\n<li><strong>mf_search_settings</strong> (MolecularFormulaSearchSettings):\nThe molecular formula search settings.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The dictionary containing the database results.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">classe_str_list</span>, </span><span class=\"param\"><span class=\"n\">nominal_mzs</span>, </span><span class=\"param\"><span class=\"n\">mf_search_settings</span>, </span><span class=\"param\"><span class=\"n\">ion_charge</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.run_molecular_formula", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.run_molecular_formula", "kind": "function", "doc": "<p>Run the molecular formula search on the given list of mass spectrum peaks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ms_peaks</strong> (list of MSPeak):\nThe list of mass spectrum peaks.</li>\n<li><strong>**kwargs</strong>: Additional keyword arguments. \nMost notably, print_time, which is a boolean flag to indicate whether to print the time \nand passed to the timeit decorator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kw</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulas.search_mol_formulas", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulas.search_mol_formulas", "kind": "function", "doc": "<p>Search for molecular formulas in the mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>possible_formulas_list</strong> (list of MolecularFormula):\nThe list of possible molecular formulas.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type.</li>\n<li><strong>neutral_molform</strong> (bool, optional):\nFlag to indicate whether the molecular formulas are neutral, by default True.</li>\n<li><strong>find_isotopologues</strong> (bool, optional):\nFlag to indicate whether to find isotopologues, by default True.</li>\n<li><strong>adduct_atom</strong> (str, optional):\nThe adduct atom, by default None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list of MSPeak</strong>: The list of mass spectrum peaks with assigned molecular formulas.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">possible_formulas_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">molecular_formula</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MolecularFormulaFactory</span><span class=\"o\">.</span><span class=\"n\">MolecularFormula</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">neutral_molform</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">find_isotopologues</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atom</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">ms_peak</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MSPeakClasses</span><span class=\"o\">.</span><span class=\"n\">_MSPeak</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulaWorker", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulaWorker", "kind": "class", "doc": "<p>Class for searching molecular formulas in a mass spectrum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>find_isotopologues</strong> (bool, optional):\nFlag to indicate whether to find isotopologues, by default True.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>find_isotopologues</strong> (bool):\nFlag to indicate whether to find isotopologues.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>reset_error().\nReset the error variables.</li>\n<li>set_last_error().\nSet the last error.</li>\n<li>find_formulas().\nFind the formulas.</li>\n<li>calc_error().\nCalculate the error.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulaWorker.__init__", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulaWorker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">find_isotopologues</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulaWorker.find_isotopologues", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulaWorker.find_isotopologues", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulaWorker.reset_error", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulaWorker.reset_error", "kind": "function", "doc": "<p>Reset the error variables.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function resets the error variables for the given mass spectrum object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulaWorker.set_last_error", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulaWorker.set_last_error", "kind": "function", "doc": "<p>Set the last error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error</strong> (float):\nThe error.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">error</span>, </span><span class=\"param\"><span class=\"n\">mass_spectrum_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulaWorker.calc_error", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulaWorker.calc_error", "kind": "function", "doc": "<p>Calculate the error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_exp</strong> (float):\nThe experimental m/z value.</li>\n<li><strong>mz_calc</strong> (float):\nThe calculated m/z value.</li>\n<li><strong>method</strong> (str, optional):\nThe method, by default 'ppm'.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the method is not ppm or ppb.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mz_exp</span>, </span><span class=\"param\"><span class=\"n\">mz_calc</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;ppm&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulaWorker.find_formulas", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulaWorker.find_formulas", "kind": "function", "doc": "<p>Find the formulas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>formulas</strong> (list of MolecularFormula):\nThe list of molecular formulas.</li>\n<li><strong>min_abundance</strong> (float):\nThe minimum abundance threshold.</li>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>ms_peak</strong> (MSPeak):\nThe mass spectrum peak.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge.</li>\n<li><strong>adduct_atom</strong> (str, optional):\nThe adduct atom, by default None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list of MSPeak</strong>: The list of mass spectrum peaks with assigned molecular formulas.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Uses the closest error the next search (this is not ideal, it needs to use confidence\nmetric to choose the right candidate then propagate the error using the error from the best candidate).\nIt needs to add s/n to the equation.\nIt need optimization to define the mz_error_range within a m/z unit since it is directly proportional\nwith the mass, and inversely proportional to the rp. It's not linear, i.e., sigma mass.\nThe idea it to correlate sigma to resolving power, signal to noise and sample complexity per mz unit.\nMethod='distance'</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">formulas</span>,</span><span class=\"param\">\t<span class=\"n\">min_abundance</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectrum_obj</span>,</span><span class=\"param\">\t<span class=\"n\">ms_peak</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span>,</span><span class=\"param\">\t<span class=\"n\">adduct_atom</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC", "kind": "class", "doc": "<p>Class for searching molecular formulas in a LC object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcms_obj</strong> (LCMSBase):\nThe LCMSBase object.</li>\n<li><strong>sql_db</strong> (MolForm_SQL, optional):\nThe SQL database object, by default None.</li>\n<li><strong>first_hit</strong> (bool, optional):\nFlag to indicate whether to skip peaks that already have a molecular formula assigned, by default False.</li>\n<li><strong>find_isotopologues</strong> (bool, optional):\nFlag to indicate whether to find isotopologues, by default True.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>search_spectra_against_candidates().\nSearch a list of mass spectra against a list of candidate formulas with a given ion type and charge.</li>\n<li>bulk_run_molecular_formula_search().\nRun the molecular formula search on the given list of mass spectra.\nPulls the settings from the LCMSBase object to set ion type and charge to search for. </li>\n<li>run_mass_feature_search().\nRun the molecular formula search on mass features.\nCalls bulk_run_molecular_formula_search() with specified mass spectra and mass peaks.</li>\n<li>run_untargeted_worker_ms1().\nRun untargeted molecular formula search on the ms1 mass spectrum.\nDEPRECATED: use run_mass_feature_search() or bulk_run_molecular_formula_search() instead.</li>\n<li>run_target_worker_ms1().\nRun targeted molecular formula search on the ms1 mass spectrum.\nDEPRECATED: use run_mass_feature_search() or bulk_run_molecular_formula_search() instead.</li>\n</ul>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.__init__", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lcms_obj</span>, </span><span class=\"param\"><span class=\"n\">sql_db</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">first_hit</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">find_isotopologues</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.first_hit", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.first_hit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.find_isotopologues", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.find_isotopologues", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.lcms_obj", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.lcms_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.search_spectra_against_candidates", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.search_spectra_against_candidates", "kind": "function", "doc": "<p>Search a list of mass spectra against a list of candidate formulas with a given ion type and charge.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_list</strong> (list of MassSpectrum):\nThe list of mass spectra to perform the search on.</li>\n<li><strong>ms_peaks_list</strong> (list of lists of MSPeak objects):\nThe list of mass spectrum peaks to search within each mass spectrum.</li>\n<li><strong>candidate_formulas</strong> (dict):\nThe candidate formulas.</li>\n<li><strong>ion_type</strong> (str):\nThe ion type.</li>\n<li><strong>ion_charge</strong> (int):\nThe ion charge, either 1 or -1.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function is designed to be used with the bulk_run_molecular_formula_search function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectrum_list</span>,</span><span class=\"param\">\t<span class=\"n\">ms_peaks_list</span>,</span><span class=\"param\">\t<span class=\"n\">candidate_formulas</span>,</span><span class=\"param\">\t<span class=\"n\">ion_type</span>,</span><span class=\"param\">\t<span class=\"n\">ion_charge</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.bulk_run_molecular_formula_search", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.bulk_run_molecular_formula_search", "kind": "function", "doc": "<p>Run the molecular formula search on the given list of mass spectra</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_list</strong> (list of MassSpectrum):\nThe list of mass spectra to search.</li>\n<li><strong>ms_peaks_list</strong> (list of lists of MSPeak objects):\nThe mass peaks to perform molecular formula search within each mass spectrum</li>\n<li><strong>mass_spectrum_setting_key</strong> (str, optional):\nThe mass spectrum setting key, by default 'ms1'.\nThis is used to get the appropriate molecular search settings from the LCMSBase object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectrum_list</span>,</span><span class=\"param\">\t<span class=\"n\">ms_peaks_list</span>,</span><span class=\"param\">\t<span class=\"n\">mass_spectrum_setting_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;ms1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.run_mass_feature_search", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.run_mass_feature_search", "kind": "function", "doc": "<p>Run the molecular formula search on the mass features.</p>\n\n<p>Calls bulk_run_molecular_formula_search() with specified mass spectra and mass peaks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.run_untargeted_worker_ms1", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.run_untargeted_worker_ms1", "kind": "function", "doc": "<p>Run untargeted molecular formula search on the ms1 mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.molecularFormulaSearch.SearchMolecularFormulasLC.run_target_worker_ms1", "modulename": "corems.molecular_id.search.molecularFormulaSearch", "qualname": "SearchMolecularFormulasLC.run_target_worker_ms1", "kind": "function", "doc": "<p>Run targeted molecular formula search on the ms1 mass spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment", "modulename": "corems.molecular_id.search.priorityAssignment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment", "kind": "class", "doc": "<p>A class for assigning priority to oxygen classes in a molecular search.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>sql_db</strong> (bool, optional):\nWhether to use an SQL database. The default is False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>mass_spectrum_obj</strong> (MassSpectrum):\nThe mass spectrum object.</li>\n<li><strong>sql_db</strong> (MolForm_SQL):\nThe SQL database object.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>run().\nRun the priority assignment process.</li>\n<li>create_data_base().\nCreate the molecular database for the specified heteroatomic classes.</li>\n<li>run_worker_mass_spectrum(assign_classes_order_tuples).\nRun the molecular formula search for each class in the specified order.</li>\n<li>get_dict_molecular_database(classe_str_list).\nGet the molecular database as a dictionary.</li>\n<li>ox_classes_and_peaks_in_order_().\nGet the oxygen classes and associated peaks in order.</li>\n<li>get_classes_in_order(dict_ox_class_and_ms_peak)\nGet the classes in order.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.__init__", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is the argument tuple for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass_spectrum_obj</span>, </span><span class=\"param\"><span class=\"n\">sql_db</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.mass_spectrum_obj", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.mass_spectrum_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.run", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.run", "kind": "function", "doc": "<p>Run the priority assignment process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.create_data_base", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.create_data_base", "kind": "function", "doc": "<p>Create the molecular database for the specified heteroatomic classes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>assign_classes_order_str_dict_tuple_</strong> (list):\nA list of tuples containing the class names and dictionaries of class attributes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.run_worker_mass_spectrum", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.run_worker_mass_spectrum", "kind": "function", "doc": "<p>Run the molecular formula search for each class in the specified order.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assign_classes_order_tuples</strong> (list):\nA list of tuples containing the class names and dictionaries of class attributes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">assign_classes_order_tuples</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.get_dict_molecular_database", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.get_dict_molecular_database", "kind": "function", "doc": "<p>Get the molecular database as a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classe_str_list</strong> (list):\nA list of class names.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the molecular database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classe_str_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.ox_classes_and_peaks_in_order_", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.ox_classes_and_peaks_in_order_", "kind": "function", "doc": "<p>Get the oxygen classes and associated peaks in order.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the oxygen classes and associated peaks.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.get_classes_in_order", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.get_classes_in_order", "kind": "function", "doc": "<p>Get the classes in order.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict_ox_class_and_ms_peak</strong> (dict):\nA dictionary containing the oxygen classes and associated peaks.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of tuples containing the class names and dictionaries of class attributes.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>structure is\n    ('HC', {'HC': 1})</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dict_ox_class_and_ms_peak</span></span><span class=\"return-annotation\">) -> [(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;)]:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.get_class_strings_dict", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.get_class_strings_dict", "kind": "function", "doc": "<p>Get the class strings and dictionaries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>all_atoms_tuples</strong> (tuple):\nA tuple containing the atoms.</li>\n<li><strong>atoms_in_order</strong> (list):\nA list of atoms in order.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of tuples containing the class strings and dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">all_atoms_tuples</span>, </span><span class=\"param\"><span class=\"n\">atoms_in_order</span></span><span class=\"return-annotation\">) -> [(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;)]:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.combine_ox_class_with_other", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.combine_ox_class_with_other", "kind": "function", "doc": "<p>Combine the oxygen classes with other classes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atoms_in_order</strong> (list):\nA list of atoms in order.</li>\n<li><p><strong>classes_strings_dict_tuples</strong> (list):</p></li>\n<li><p><strong>dict_ox_class_and_ms_peak</strong> (dict):\nA dictionary containing the oxygen classes and associated peaks.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">atoms_in_order</span>,</span><span class=\"param\">\t<span class=\"n\">classes_strings_dict_tuples</span>,</span><span class=\"param\">\t<span class=\"n\">dict_ox_class_and_ms_peak</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;dict&#x27;&gt;]:</span></span>", "funcdef": "def"}, {"fullname": "corems.molecular_id.search.priorityAssignment.OxygenPriorityAssignment.sort_classes", "modulename": "corems.molecular_id.search.priorityAssignment", "qualname": "OxygenPriorityAssignment.sort_classes", "kind": "function", "doc": "<p>Sort the classes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atoms_in_order</strong> (list):\nA list of atoms in order.</li>\n<li><strong>combination_tuples</strong> (list):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of tuples containing the class strings and dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms_in_order</span>, </span><span class=\"param\"><span class=\"n\">combination_tuples</span></span><span class=\"return-annotation\">) -> [(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;)]:</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak", "modulename": "corems.ms_peak", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.ms_peak.calc", "modulename": "corems.ms_peak.calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc", "modulename": "corems.ms_peak.calc.MSPeakCalc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation", "kind": "class", "doc": "<p>Class to perform calculations on MSPeak objects.</p>\n\n<p>This class provides methods to perform various calculations on MSPeak objects, such as calculating Kendrick Mass Defect (KMD) and Kendrick Mass (KM), calculating peak area, and fitting peak lineshape using different models.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_ms_parent</strong> (MSParent):\nThe parent MSParent object associated with the MSPeakCalculation object.</li>\n<li><strong>mz_exp</strong> (float):\nThe experimental m/z value of the peak.</li>\n<li><strong>peak_left_index</strong> (int):\nThe start scan index of the peak.</li>\n<li><strong>peak_right_index</strong> (int):\nThe final scan index of the peak.</li>\n<li><strong>resolving_power</strong> (float):\nThe resolving power of the peak.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>_calc_kmd(dict_base).\nCalculate the Kendrick Mass Defect (KMD) and Kendrick Mass (KM) for a given base formula.</li>\n<li>calc_area().\nCalculate the peak area using numpy's trapezoidal fit.</li>\n<li>fit_peak(mz_extend=6, delta_rp=0, model='Gaussian').\nPerform lineshape analysis on a peak using lmfit module.</li>\n<li>voigt_pso(w, r, yoff, width, loc, a).\nCalculate the Voigt function for particle swarm optimization (PSO) fitting.</li>\n<li>objective_pso(x, w, u).\nCalculate the objective function for PSO fitting.</li>\n<li>minimize_pso(lower, upper, w, u).\nMinimize the objective function using the particle swarm optimization algorithm.</li>\n<li>fit_peak_pso(mz_extend=6, upsample_multiplier=5).\nPerform lineshape analysis on a peak using particle swarm optimization (PSO) fitting.</li>\n<li>voigt(oversample_multiplier=1, delta_rp=0, mz_overlay=1).\n[Legacy] Perform voigt lineshape analysis on a peak.</li>\n<li>pseudovoigt(oversample_multiplier=1, delta_rp=0, mz_overlay=1, fraction=0.5).\n[Legacy] Perform pseudovoigt lineshape analysis on a peak.</li>\n<li>lorentz(oversample_multiplier=1, delta_rp=0, mz_overlay=1).\n[Legacy] Perform lorentz lineshape analysis on a peak.</li>\n<li>gaussian(oversample_multiplier=1, delta_rp=0, mz_overlay=1).\n[Legacy] Perform gaussian lineshape analysis on a peak.</li>\n<li>get_mz_domain(oversample_multiplier, mz_overlay).\n[Legacy] Resample/interpolate datapoints for lineshape analysis.</li>\n<li>number_possible_assignments().\nReturn the number of possible molecular formula assignments for the peak.</li>\n<li>molecular_formula_lowest_error().\nReturn the molecular formula with the smallest absolute mz error.</li>\n<li>molecular_formula_highest_prob_score().\nReturn the molecular formula with the highest confidence score.</li>\n<li>molecular_formula_earth_filter(lowest_error=True).\nFilter molecular formula using the 'Earth' filter.</li>\n<li>molecular_formula_water_filter(lowest_error=True).\nFilter molecular formula using the 'Water' filter.</li>\n<li>molecular_formula_air_filter(lowest_error=True).\nFilter molecular formula using the 'Air' filter.</li>\n<li>cia_score_S_P_error().\nCompound Identification Algorithm SP Error - Assignment Filter.</li>\n<li>cia_score_N_S_P_error().\nCompound Identification Algorithm NSP Error - Assignment Filter.</li>\n</ul>\n"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.calc_area", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.calc_area", "kind": "function", "doc": "<p>Calculate the peak area using numpy's trapezoidal fit</p>\n\n<p>uses provided mz_domain to accurately integrate areas independent of digital resolution</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: peak area</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.fit_peak", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.fit_peak", "kind": "function", "doc": "<p>Lineshape analysis on a peak using lmfit module.</p>\n\n<p>Model and fit peak lineshape by defined function - using lmfit module\nDoes not oversample/resample/interpolate data points\nBetter to go back to time domain and perform more zero filling - if possible.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_extend</strong> (int):\nextra points left and right of peak definition to include in fitting</li>\n<li><strong>delta_rp</strong> (float):\ndelta resolving power to add to resolving power</li>\n<li><strong>model</strong> (str):\nType of lineshape model to use.\nModels allowed: Gaussian, Lorentz, Voigt</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_domain</strong> (ndarray):\nx-axis domain for fit</li>\n<li><strong>fit_peak</strong> (lmfit object):\nfit results object from lmfit module</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Returns the calculated mz domain, initial defined abundance profile, and the fit peak results object from lmfit module\nmz_extend here extends the x-axis domain so that we have sufficient points either side of the apex to fit.\nTakes about 10ms per peak</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz_extend</span><span class=\"o\">=</span><span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">delta_rp</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gaussian&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.voigt_pso", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.voigt_pso", "kind": "function", "doc": "<p>Voigt function for particle swarm optimisation (PSO) fitting</p>\n\n<p>From <a href=\"https://github.com/pnnl/nmrfit/blob/master/nmrfit/equations.py\">https://github.com/pnnl/nmrfit/blob/master/nmrfit/equations.py</a>.\nCalculates a Voigt function over w based on the relevant properties of the distribution.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (ndarray):\nArray over which the Voigt function will be evaluated.</li>\n<li><strong>r</strong> (float):\nRatio between the Guassian and Lorentzian functions.</li>\n<li><strong>yoff</strong> (float):\nY-offset of the Voigt function.</li>\n<li><strong>width</strong> (float):\nThe width of the Voigt function.</li>\n<li><strong>loc</strong> (float):\nCenter of the Voigt function.</li>\n<li><strong>a</strong> (float):\nArea of the Voigt function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>V</strong> (ndarray):\nArray defining the Voigt function over w.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li><a href=\"https://github.com/pnnl/nmrfit\">https://github.com/pnnl/nmrfit</a></li>\n</ol>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Particle swarm optimisation (PSO) fitting function can be significantly more computationally expensive than lmfit, with more parameters to optimise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">yoff</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">loc</span>, </span><span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.objective_pso", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.objective_pso", "kind": "function", "doc": "<p>Objective function for particle swarm optimisation (PSO) fitting</p>\n\n<p>The objective function used to fit supplied data.  Evaluates sum of squared differences between the fit and the data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (list of floats):\nParameter vector.</li>\n<li><strong>w</strong> (ndarray):\nArray of frequency data.</li>\n<li><strong>u</strong> (ndarray):\nArray of data to be fit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rmse</strong> (float):\nRoot mean square error between the data and fit.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li><a href=\"https://github.com/pnnl/nmrfit\">https://github.com/pnnl/nmrfit</a></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">u</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.minimize_pso", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.minimize_pso", "kind": "function", "doc": "<p>Minimization function for particle swarm optimisation (PSO) fitting</p>\n\n<p>Minimizes the objective function using the particle swarm optimization algorithm.\nMinimization function based on defined parameters</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lower</strong> (list of floats):\nLower bounds for the parameters.</li>\n<li><strong>upper</strong> (list of floats):\nUpper bounds for the parameters.</li>\n<li><strong>w</strong> (ndarray):\nArray of frequency data.</li>\n<li><strong>u</strong> (ndarray):\nArray of data to be fit.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Particle swarm optimisation (PSO) fitting function can be significantly more computationally expensive than lmfit, with more parameters to optimise.\nCurrent parameters take ~2 seconds per peak.</p>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li><a href=\"https://github.com/pnnl/nmrfit\">https://github.com/pnnl/nmrfit</a></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lower</span>, </span><span class=\"param\"><span class=\"n\">upper</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">u</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.fit_peak_pso", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.fit_peak_pso", "kind": "function", "doc": "<p>Lineshape analysis on a peak using particle swarm optimisation (PSO) fitting</p>\n\n<p>Function to fit a Voigt peakshape using particle swarm optimisation (PSO).\nShould return better results than lmfit, but much more computationally expensive</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_extend</strong> (int, optional):\nextra points left and right of peak definition to include in fitting. Defaults to 6.</li>\n<li><strong>upsample_multiplier</strong> (int, optional):\nfactor to increase x-axis points by for simulation of fitted lineshape function. Defaults to 5.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>xopt</strong> (array):\nvariables describing the voigt function.\nG/L ratio, width (fwhm), apex (x-axis), area.\ny-axis offset is fixed at 0</li>\n<li><strong>fopt</strong> (float):\nobjective score (rmse)</li>\n<li><strong>psfit</strong> (array):\nrecalculated y values based on function and optimised fit</li>\n<li><strong>psfit_hdp</strong> (tuple of arrays):\n0 - linspace x-axis upsampled grid\n1 - recalculated y values based on function and upsampled x-axis grid\nDoes not change results, but aids in visualisation of the 'true' voigt lineshape</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Particle swarm optimisation (PSO) fitting function can be significantly more computationally expensive than lmfit, with more parameters to optimise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mz_extend</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">upsample_multiplier</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.voigt", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.voigt", "kind": "function", "doc": "<p>[Legacy] Voigt lineshape analysis function\nLegacy function for voigt lineshape analysis</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>oversample_multiplier</strong> (int):\nfactor to increase x-axis points by for simulation of fitted lineshape function</li>\n<li><strong>delta_rp</strong> (float):\ndelta resolving power to add to resolving power</li>\n<li><strong>mz_overlay</strong> (int):\nextra points left and right of peak definition to include in fitting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_domain</strong> (ndarray):\nx-axis domain for fit</li>\n<li><strong>calc_abundance</strong> (ndarray):\ncalculated abundance profile based on voigt function</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">oversample_multiplier</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">delta_rp</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">mz_overlay</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.pseudovoigt", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.pseudovoigt", "kind": "function", "doc": "<p>[Legacy] pseudovoigt lineshape function</p>\n\n<p>Legacy function for pseudovoigt lineshape analysis.\nNote - Code may not be functional currently.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>oversample_multiplier</strong> (int, optional):\nfactor to increase x-axis points by for simulation of fitted lineshape function. Defaults to 1.</li>\n<li><strong>delta_rp</strong> (float, optional):\ndelta resolving power to add to resolving power. Defaults to 0.</li>\n<li><strong>mz_overlay</strong> (int, optional):\nextra points left and right of peak definition to include in fitting. Defaults to 1.</li>\n<li><strong>fraction</strong> (float, optional):\nfraction of gaussian component in pseudovoigt function. Defaults to 0.5.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">oversample_multiplier</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">delta_rp</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">mz_overlay</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">fraction</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.lorentz", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.lorentz", "kind": "function", "doc": "<p>[Legacy] Lorentz lineshape analysis function</p>\n\n<p>Legacy function for lorentz lineshape analysis</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>oversample_multiplier</strong> (int):\nfactor to increase x-axis points by for simulation of fitted lineshape function</li>\n<li><strong>delta_rp</strong> (float):\ndelta resolving power to add to resolving power</li>\n<li><strong>mz_overlay</strong> (int):\nextra points left and right of peak definition to include in fitting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_domain</strong> (ndarray):\nx-axis domain for fit</li>\n<li><strong>calc_abundance</strong> (ndarray):\ncalculated abundance profile based on lorentz function</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">oversample_multiplier</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">delta_rp</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">mz_overlay</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.gaussian", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.gaussian", "kind": "function", "doc": "<p>[Legacy] Gaussian lineshape analysis function\nLegacy gaussian lineshape analysis function</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>oversample_multiplier</strong> (int):\nfactor to increase x-axis points by for simulation of fitted lineshape function</li>\n<li><strong>delta_rp</strong> (float):\ndelta resolving power to add to resolving power</li>\n<li><strong>mz_overlay</strong> (int):\nextra points left and right of peak definition to include in fitting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_domain</strong> (ndarray):\nx-axis domain for fit</li>\n<li><strong>calc_abundance</strong> (ndarray):\ncalculated abundance profile based on gaussian function</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">oversample_multiplier</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">delta_rp</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">mz_overlay</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.get_mz_domain", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.get_mz_domain", "kind": "function", "doc": "<p>[Legacy] function to resample/interpolate datapoints for lineshape analysis</p>\n\n<p>This code is used for the legacy line fitting functions and not recommended.\nLegacy function to support expanding mz domain for legacy lineshape functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>oversample_multiplier</strong> (int):\nfactor to increase x-axis points by for simulation of fitted lineshape function</li>\n<li><strong>mz_overlay</strong> (int):\nextra points left and right of peak definition to include in fitting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_domain</strong> (ndarray):\nx-axis domain for fit</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">oversample_multiplier</span>, </span><span class=\"param\"><span class=\"n\">mz_overlay</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.number_possible_assignments", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.number_possible_assignments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.molecular_formula_lowest_error", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.molecular_formula_lowest_error", "kind": "function", "doc": "<p>Return the molecular formula with the smallest absolute mz error</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.molecular_formula_highest_prob_score", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.molecular_formula_highest_prob_score", "kind": "function", "doc": "<p>Return the molecular formula with the highest confidence score score</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.molecular_formula_earth_filter", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.molecular_formula_earth_filter", "kind": "function", "doc": "<p>Filter molecular formula using the 'Earth' filter</p>\n\n<p>This function applies the Formularity-esque 'Earth' filter to possible molecular formula assignments.\nEarth Filter:\n    O &gt; 0 AND N &lt;= 3 AND P &lt;= 2 AND 3P &lt;= O</p>\n\n<p>If the lowest_error method is also used, it will return the single formula annotation with the smallest absolute error which also fits the Earth filter.\nOtherwise, it will return all Earth-filter compliant formulas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lowest_error</strong> (bool, optional.):\nReturn only the lowest error formula which also fits the Earth filter.\nIf False, return all Earth-filter compliant formulas. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: List of molecular formula objects which fit the Earth filter</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Nikola Tolic et al., \"Formularity: Software for Automated Formula Assignment of Natural and Other Organic Matter from Ultrahigh-Resolution Mass Spectra\"\nAnal. Chem. 2017, 89, 23, 12659\u201312665\ndoi: 10.1021/acs.analchem.7b03318</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lowest_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.molecular_formula_water_filter", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.molecular_formula_water_filter", "kind": "function", "doc": "<p>Filter molecular formula using the 'Water' filter</p>\n\n<p>This function applies the Formularity-esque 'Water' filter to possible molecular formula assignments.\nWater Filter:\n    O &gt; 0 AND N &lt;= 3 AND S &lt;= 2 AND P &lt;= 2</p>\n\n<p>If the lowest_error method is also used, it will return the single formula annotation with the smallest absolute error which also fits the Water filter.\nOtherwise, it will return all Water-filter compliant formulas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lowest_error</strong> (bool, optional):\nReturn only the lowest error formula which also fits the Water filter.\nIf False, return all Water-filter compliant formulas. Defaults to 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: List of molecular formula objects which fit the Water filter</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Nikola Tolic et al., \"Formularity: Software for Automated Formula Assignment of Natural and Other Organic Matter from Ultrahigh-Resolution Mass Spectra\"\nAnal. Chem. 2017, 89, 23, 12659\u201312665\ndoi: 10.1021/acs.analchem.7b03318</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lowest_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.molecular_formula_air_filter", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.molecular_formula_air_filter", "kind": "function", "doc": "<p>Filter molecular formula using the 'Air' filter</p>\n\n<p>This function applies the Formularity-esque 'Air' filter to possible molecular formula assignments.\nAir Filter:\n    O &gt; 0 AND N &lt;= 3 AND S &lt;= 1 AND P = 0 AND 3(S+N) &lt;= O</p>\n\n<p>If the lowest_error method is also used, it will return the single formula annotation with the smallest absolute error which also fits the Air filter.\nOtherwise, it will return all Air-filter compliant formulas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lowest_error</strong> (bool, optional):\nReturn only the lowest error formula which also fits the Air filter.\nIf False, return all Air-filter compliant formulas. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: List of molecular formula objects which fit the Air filter</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Nikola Tolic et al., \"Formularity: Software for Automated Formula Assignment of Natural and Other Organic Matter from Ultrahigh-Resolution Mass Spectra\"\nAnal. Chem. 2017, 89, 23, 12659\u201312665\ndoi: 10.1021/acs.analchem.7b03318</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lowest_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.cia_score_S_P_error", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.cia_score_S_P_error", "kind": "function", "doc": "<p>Compound Identification Algorithm SP Error - Assignment Filter</p>\n\n<p>This function applies the Compound Identification Algorithm (CIA) SP Error filter to possible molecular formula assignments.</p>\n\n<p>It takes the molecular formula with the lowest S+P count, and returns the formula with the lowest absolute error from this subset.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MolecularFormula</strong>: A single molecular formula which fits the rules of the CIA SP Error filter</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Elizabeth B. Kujawinski and Mark D. Behn, \"Automated Analysis of Electrospray Ionization Fourier Transform Ion Cyclotron Resonance Mass Spectra of Natural Organic Matter\"\nAnal. Chem. 2006, 78, 13, 4363\u20134373\ndoi: 10.1021/ac0600306</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.calc.MSPeakCalc.MSPeakCalculation.cia_score_N_S_P_error", "modulename": "corems.ms_peak.calc.MSPeakCalc", "qualname": "MSPeakCalculation.cia_score_N_S_P_error", "kind": "function", "doc": "<p>Compound Identification Algorithm NSP Error - Assignment Filter</p>\n\n<p>This function applies the Compound Identification Algorithm (CIA) NSP Error filter to possible molecular formula assignments.</p>\n\n<p>It takes the molecular formula with the lowest N+S+P count, and returns the formula with the lowest absolute error from this subset.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MolecularFormula</strong>: A single molecular formula which fits the rules of the CIA NSP Error filter</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Elizabeth B. Kujawinski and Mark D. Behn, \"Automated Analysis of Electrospray Ionization Fourier Transform Ion Cyclotron Resonance Mass Spectra of Natural Organic Matter\"\nAnal. Chem. 2006, 78, 13, 4363\u20134373\ndoi: 10.1021/ac0600306</li>\n</ol>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If no molecular formula are associated with mass spectrum peak.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.factory", "modulename": "corems.ms_peak.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses", "modulename": "corems.ms_peak.factory.MSPeakClasses", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.ICRMassPeak", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "ICRMassPeak", "kind": "class", "doc": "<p>A class representing a peak in an ICR mass spectrum.</p>\n", "bases": "_MSPeak"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.ICRMassPeak.__init__", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "ICRMassPeak.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">ms_parent</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">exp_freq</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.ICRMassPeak.resolving_power_calc", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "ICRMassPeak.resolving_power_calc", "kind": "function", "doc": "<p>Calculate the theoretical resolving power of the peak.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>T</strong> (float):\ntransient time</li>\n<li><strong>B</strong> (float):\nMagnetic Filed Strength (Tesla)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Theoretical resolving power of the peak.</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li>Marshall et al. (Mass Spectrom Rev. 1998 Jan-Feb;17(1):1-35.)\nDOI: 10.1002/(SICI)1098-2787(1998)17:1&lt;1::AID-MAS1>3.0.CO;2-K</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">T</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.ICRMassPeak.set_calc_resolving_power", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "ICRMassPeak.set_calc_resolving_power", "kind": "function", "doc": "<p>Set the resolving power of the peak to the calculated one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.TOFMassPeak", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "TOFMassPeak", "kind": "class", "doc": "<p>A class representing a peak in a TOF mass spectrum.</p>\n", "bases": "_MSPeak"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.TOFMassPeak.__init__", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "TOFMassPeak.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">exp_freq</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.TOFMassPeak.set_calc_resolving_power", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "TOFMassPeak.set_calc_resolving_power", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.OrbiMassPeak", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "OrbiMassPeak", "kind": "class", "doc": "<p>A class representing a peak in an Orbitrap mass spectrum.</p>\n", "bases": "_MSPeak"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.OrbiMassPeak.__init__", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "OrbiMassPeak.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">exp_freq</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "corems.ms_peak.factory.MSPeakClasses.OrbiMassPeak.set_calc_resolving_power", "modulename": "corems.ms_peak.factory.MSPeakClasses", "qualname": "OrbiMassPeak.set_calc_resolving_power", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient", "modulename": "corems.transient", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.calc", "modulename": "corems.transient.calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.calc.TransientCalc", "modulename": "corems.transient.calc.TransientCalc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations", "kind": "class", "doc": "<p>Transient Calculations</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parameters</strong> (corems.transient.parameters.TransientParameters):\nThe transient parameters</li>\n<li><strong>bandwidth</strong> (float):\nThe bandwidth of the transient (Hz)</li>\n<li><strong>number_data_points</strong> (int):\nThe number of data points of the transient</li>\n<li><strong>exc_low_freq</strong> (float):\nThe low frequency of the excitation (Hz)</li>\n<li><strong>exc_high_freq</strong> (float):\nThe high frequency of the excitation (Hz)</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>parameters</strong> (corems.transient.parameters.TransientParameters):\nThe transient parameters</li>\n<li><strong>bandwidth</strong> (float):\nThe bandwidth of the transient (Hz)</li>\n<li><strong>number_data_points</strong> (int):\nThe number of data points of the transient</li>\n<li><strong>exc_low_freq</strong> (float):\nThe low frequency of the excitation (Hz)</li>\n<li><strong>exc_high_freq</strong> (float):\nThe high frequency of the excitation (Hz)</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>cal_transient_time().\nCalculate the time domain length of the transient</li>\n<li>zero_fill(transient).\nZero fill the transient</li>\n<li>truncation(transient).\nTruncate the transient</li>\n<li>apodization(transient).\nApodization of the transient</li>\n<li>calculate_frequency_domain(number_data_points).\nCalculate the frequency domain (axis) of the transient</li>\n<li>cut_freq_domain(freqdomain_X, freqdomain_Y).\nCut the frequency domain of the transient</li>\n<li>phase_and_absorption_mode_ft().\n[Not Functional] Produce a phased absorption mode FT spectrum</li>\n<li>magnitude_mode_ft(transient).\nPerform magnitude mode FT of the transient</li>\n<li>correct_dc_offset().\n[Not Yet Implemented] Correct the DC offset of the transient</li>\n</ul>\n"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.cal_transient_time", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.cal_transient_time", "kind": "function", "doc": "<p>Calculate the time domain length of the transient</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The time domain length of the transient (s)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.zero_fill", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.zero_fill", "kind": "function", "doc": "<p>Zero fill the transient</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transient</strong> (numpy.ndarray):\nThe transient data points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The transient data points zerofilled</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The number of zero fills is defined by the transient parameter number_of_zero_fills.\nThe function first calculate the next power of two of the transient length and zero fills to that length, to take advantage of FFT algorithm.\n    If the parameter next_power_of_two is set to False, the function will zero fill to the length of the original transient times the number of zero fills</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.truncation", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.truncation", "kind": "function", "doc": "<p>Truncate the transient</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transient</strong> (numpy.ndarray):\nThe transient data points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The truncated transient data points</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The number of truncations is defined by the transient parameter number_of_truncations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.apodization", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.apodization", "kind": "function", "doc": "<p>Apodization of the transient</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transient</strong> (numpy.ndarray):\nThe transient data points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The apodized transient data points</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The apodization method is defined by the transient parameter apodization_method.\nThe following apodization methods are available:\n    Hamming,\n    Hanning,\n    Blackman,\n    Full-Sine,\n    Half-Sine,\n    Kaiser,\n    Half-Kaiser.</p>\n\n<p>For Kaiser and Half-Kaiser, an additional parameter 'beta' is required, set by the transient parameter kaiser_beta.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.calculate_frequency_domain", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.calculate_frequency_domain", "kind": "function", "doc": "<p>Calculate the frequency domain (axis) of the transient</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number_data_points</strong> (int):\nThe number of data points of the transient</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The frequency domain of the transient (Hz)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number_data_points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.cut_freq_domain", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.cut_freq_domain", "kind": "function", "doc": "<p>Cut the frequency domain of the transient</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>freqdomain_X</strong> (numpy.ndarray):\nThe frequency domain of the transient (Hz)</li>\n<li><strong>freqdomain_Y</strong> (numpy.ndarray):\nThe frequency domain of the transient (Hz)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The frequency domain of the transient (Hz)</li>\n<li><strong>numpy.ndarray</strong>: The frequency domain of the transient (Hz)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">freqdomain_X</span>, </span><span class=\"param\"><span class=\"n\">freqdomain_Y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.phase_and_absorption_mode_ft", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.phase_and_absorption_mode_ft", "kind": "function", "doc": "<p>[Not Functional] Produce a phased absorption mode FT spectrum</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.perform_magniture_mode_ft", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.perform_magniture_mode_ft", "kind": "function", "doc": "<p>Perform magnitude mode FT of the transient</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transient</strong> (numpy.ndarray):\nThe transient data points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The frequency domain of the transient (Hz)</li>\n<li><strong>numpy.ndarray</strong>: The magnitude of the transient (a.u.)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.calc.TransientCalc.TransientCalculations.correct_dc_offset", "modulename": "corems.transient.calc.TransientCalc", "qualname": "TransientCalculations.correct_dc_offset", "kind": "function", "doc": "<p>[Not Yet Implemented] Correct the DC offset of the transient</p>\n\n<p>A simple baseline correction to compensate for a DC offset in the recorded transient.\nNot implemented.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory", "modulename": "corems.transient.factory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses", "modulename": "corems.transient.factory.TransientClasses", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient", "kind": "class", "doc": "<p>The Transient object contains the transient data and the parameters used to process it</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (numpy.ndarray):\nArray with the transient data</li>\n<li><strong>d_params</strong> (dict):\nDictionary with the parameters to be set</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>calibration_terms</strong> (tuple):\nTuple with the calibration terms (A, B, C)</li>\n<li><strong>bandwidth</strong> (float):\nThe bandwidth of the transient (Hz)</li>\n<li><strong>number_data_points</strong> (int):\nThe number of data points of the transient</li>\n<li><strong>polarity</strong> (int):\nThe polarity of the transient</li>\n<li><strong>transient_time</strong> (float):\nThe time domain length of the transient</li>\n<li><strong>d_params</strong> (dict):\nDictionary with the parameters to be set</li>\n<li><strong>frequency_domain</strong> (numpy.ndarray):\nArray with the frequency domain</li>\n<li><strong>magnitude</strong> (numpy.ndarray):\nArray with the magnitude</li>\n<li><strong>_full_filename_path</strong> (str):\nThe full path of the transient file</li>\n<li><strong>_exc_high_freq</strong> (float):\nThe high frequency of the excitation (Hz)</li>\n<li><strong>_exc_low_freq</strong> (float):\nThe low frequency of the excitation (Hz)</li>\n<li><strong>_parameters</strong> (corems.transient.parameters.TransientParameters):\nThe transient parameters</li>\n<li><strong>_transient_data</strong> (numpy.ndarray):\nArray with the transient data</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_frequency_domain(plot_result=True).\nGet the frequency domain and magnitude from the transient data</li>\n<li>get_mass_spectrum(auto_process=True, plot_result=True, keep_profile=True).\nGet the mass spectrum from the transient data</li>\n<li>set_processing_parameter(apodization_method, number_of_truncations, number_of_zero_fills).\nSet the processing parameters</li>\n<li>scale_plot_size(factor=1.5).\nScale the plot size by a factor</li>\n<li>plot_transient(ax=None, c='k').\nPlot the transient data</li>\n<li>plot_zerofilled_transient(ax=None, c='k').\nPlot the transient data with zero fill</li>\n<li>plot_apodized_transient(ax=None, c='k').\nPlot the transient data with apodization</li>\n<li>plot_frequency_domain(ax=None, c='k').\nPlot the frequency domain and magnitude</li>\n<li>set_parameter_from_toml(parameters_path).\nSet the processing parameters from a toml file</li>\n<li>set_parameter_from_json(parameters_path).\nSet the processing parameters from a json file</li>\n</ul>\n", "bases": "corems.transient.calc.TransientCalc.TransientCalculations"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.__init__", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">d_params</span></span>)</span>"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.d_params", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.d_params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.frequency_domain", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.frequency_domain", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.magnitude", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.magnitude", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.scale_plot_size", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.scale_plot_size", "kind": "function", "doc": "<p>Scale the plot size by a factor</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>factor</strong> (float, optional):\nThe factor to scale the plot size, by default 1.5</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">factor</span><span class=\"o\">=</span><span class=\"mf\">1.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.set_processing_parameter", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.set_processing_parameter", "kind": "function", "doc": "<p>Set the processing parameters</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>apodization_method</strong> (str):\nApodization method to be used</li>\n<li><strong>number_of_truncations</strong> (int):\nNumber of truncations to be used</li>\n<li><strong>number_of_zero_fills</strong> (int):\nNumber of zero fills to be used</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">apodization_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_truncations</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_zero_fills</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.parameters", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.parameters", "kind": "variable", "doc": "<p>The transient parameters</p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.set_parameter_from_toml", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.set_parameter_from_toml", "kind": "function", "doc": "<p>Set the processing parameters from a toml file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.set_parameter_from_json", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.set_parameter_from_json", "kind": "function", "doc": "<p>Set the processing parameters from a json file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.get_frequency_domain", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.get_frequency_domain", "kind": "function", "doc": "<p>Get the frequency domain and magnitude from the transient data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>plot_result</strong> (bool, optional):\nPlot the frequency domain and magnitude, by default True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>frequency_domain</strong> (numpy.ndarray):\nArray with the frequency domain</li>\n<li><strong>magnitude</strong> (numpy.ndarray):\nArray with the magnitude</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plot_result</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.get_mass_spectrum", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.get_mass_spectrum", "kind": "function", "doc": "<p>Get the mass spectrum from the transient data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>auto_process</strong> (bool, optional):\nProcess the transient data, by default True</li>\n<li><strong>plot_result</strong> (bool, optional):\nPlot the frequency domain and magnitude, by default True</li>\n<li><strong>keep_profile</strong> (bool, optional):\nKeep the profile data, by default True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MassSpecfromFreq</strong>: Mass spectrum object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">auto_process</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">plot_result</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">keep_profile</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">corems</span><span class=\"o\">.</span><span class=\"n\">mass_spectrum</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">MassSpectrumClasses</span><span class=\"o\">.</span><span class=\"n\">MassSpecfromFreq</span>:</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.filename", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.filename", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.dir_location", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.dir_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.A_therm", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.A_therm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.B_therm", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.B_therm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.C_therm", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.C_therm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.plot_transient", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.plot_transient", "kind": "function", "doc": "<p>Plot the transient data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes, optional):\nMatplotlib axes object, by default None</li>\n<li><strong>c</strong> (str, optional):\nColor, by default 'k'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes</strong>: Matplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">&#39;k&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.plot_zerofilled_transient", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.plot_zerofilled_transient", "kind": "function", "doc": "<p>Plot the transient data with zero fill</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes, optional):\nMatplotlib axes object, by default None</li>\n<li><strong>c</strong> (str, optional):\nColor, by default 'k'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes</strong>: Matplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">&#39;k&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.plot_apodized_transient", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.plot_apodized_transient", "kind": "function", "doc": "<p>Plot the transient data with apodization</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes, optional):\nMatplotlib axes object, by default None</li>\n<li><strong>c</strong> (str, optional):\nColor, by default 'k'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes</strong>: Matplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">&#39;k&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.factory.TransientClasses.Transient.plot_frequency_domain", "modulename": "corems.transient.factory.TransientClasses", "qualname": "Transient.plot_frequency_domain", "kind": "function", "doc": "<p>Plot the frequency domain and magnitude</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (matplotlib.axes, optional):\nMatplotlib axes object, by default None</li>\n<li><strong>c</strong> (str, optional):\nColor, by default 'k'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes</strong>: Matplotlib axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">&#39;k&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input", "modulename": "corems.transient.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.input.brukerSolarix", "modulename": "corems.transient.input.brukerSolarix", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix", "kind": "class", "doc": "<p>A class used to Read a single Transient from Bruker's FT-MS acquisition station (fid, or ser)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d_directory_location</strong> (str):\nthe full path of the .d folder</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>d_directory_location</strong> (str):\nthe full path of the .d folder</li>\n<li><strong>file_location</strong> (str):\nthe full path of the .d folder</li>\n<li><strong>parameter_filename_location</strong> (str):\nthe full path of the apexAcquisition.method file</li>\n<li><strong>transient_data_path</strong> (str):\nthe full path of the fid or ser file</li>\n<li><strong>scan_attr</strong> (str):\nthe full path of the scan.xml file</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>get_transient().\nRead the data and settings returning a Transient class</li>\n<li>get_scan_attr().\nRead the scan retention times, TIC values and scan indices.</li>\n<li>locate_file(folder, type_file_name).\nFind the full path of a specific file within the acquisition .d folder or subfolders</li>\n<li>parse_parameters(parameters_filename).\nOpen the given file and retrieve all parameters from apexAcquisition.method</li>\n<li>fix_freq_limits(d_parameters).\nRead and set the correct frequency limits for the spectrum</li>\n<li>get_excite_sweep_range(filename).\nDetermine excitation sweep range from ExciteSweep file</li>\n</ul>\n"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.__init__", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d_directory_location</span></span>)</span>"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.d_directory_location", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.d_directory_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.file_location", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.file_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.get_scan_attr", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.get_scan_attr", "kind": "function", "doc": "<p>Function to get the scan retention times, TIC values and scan indices.</p>\n\n<p>Gets information from scan.xml file in the bruker .d folder.\nNote this file is only present in some .d format - e.g. for imaging mode data, it is not present.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict_scan_rt_tic</strong> (dict):\na dictionary with scan number as key and rt and tic as values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.get_transient", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.get_transient", "kind": "function", "doc": "<p>Function to get the transient data and parameters from a Bruker Solarix .d folder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_number</strong> (int):\nthe scan number to be read. Default is 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Transient</strong>: a transient object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_number</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.fix_freq_limits", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.fix_freq_limits", "kind": "function", "doc": "<p>Function to read and set the correct frequency limits for the spectrum</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This is using the excitation limits from the apexAcquisition.method file,\nwhich may not match the intended detection limits in edge cases.\nIn default acquisitions, excitation and detection are the same.\nBut, they may not be in some cases with selective excitation, custom excite waveforms, or in 2DMS applications.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>d_parameters</strong> (dict):\na dictionary with the parameters from the apexAcquisition.method file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d_parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.get_excite_sweep_range", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.get_excite_sweep_range", "kind": "function", "doc": "<p>Function to determine excitation sweep range from ExciteSweep file</p>\n\n<p>This looks at the first and last rows of the ExciteSweep file to determine the excitation frequency range.\nNote that this assumes the excitation sweep was linear and the first and last rows are the lowest and highest frequencies.\nThis is presumably always true, but again may be incorrect for edge cases with custom excitation waveforms.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nthe full path to the ExciteSweep file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.locate_file", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.locate_file", "kind": "function", "doc": "<p>Function to locate a file in a folder</p>\n\n<p>Find the full path of a specific file within the acquisition .d folder or subfolders</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong> (str):\nthe full path to the folder</li>\n<li><strong>type_file_name</strong> (str):\nthe name of the file to be located\nExpected options: ExciteSweep or apexAcquisition.method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: the full path to the file</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>adapted from code from SPIKE library, <a href=\"https://github.com/spike-project/spike\">https://github.com/spike-project/spike</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span>, </span><span class=\"param\"><span class=\"n\">type_file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;apexAcquisition.method&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.parse_parameters", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.parse_parameters", "kind": "function", "doc": "<p>Function to parse the parameters from apexAcquisition.method file</p>\n\n<p>Open the given file and retrieve all parameters from apexAcquisition.method\n    None is written when no value for value is found</p>\n\n<pre><code>structure : &lt;param name = \"AMS_ActiveExclusion\"&gt;&lt;value&gt;0&lt;/value&gt;&lt;/param&gt;\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parameters_filename</strong> (str):\nthe full path to the apexAcquisition.method file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: a dictionary with the parameters and values</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Adapted from code from SPIKE library, <a href=\"https://github.com/spike-project/spike\">https://github.com/spike-project/spike</a>.\nCode may not handle all possible parameters, but should be sufficient for most common use cases</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameters_filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.brukerSolarix.ReadBrukerSolarix.parse_sqlite", "modulename": "corems.transient.input.brukerSolarix", "qualname": "ReadBrukerSolarix.parse_sqlite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sqlite_filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;chromatography-data.sqlite&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.midasDatFile", "modulename": "corems.transient.input.midasDatFile", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "corems.transient.input.midasDatFile.ReadMidasDatFile", "modulename": "corems.transient.input.midasDatFile", "qualname": "ReadMidasDatFile", "kind": "class", "doc": "<p>[Not Implemented] Reads MIDAS .dat files (binary transient data)</p>\n\n<p>This class will read .dat binary format transient data, e.g. midas format from Predator or Thermo datastations\nThis code is not yet implemented and is not fully functional.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename_path</strong> (str):\nThe path to the .dat file</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>filename_path</strong> (str):\nThe path to the .dat file</li>\n<li><strong>d_params</strong> (dict):\nA dictionary with the parameters of the .dat file</li>\n<li><strong>transient_data</strong> (numpy.ndarray):\nThe transient data</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li>read_file().\nReads the .dat file and returns the transient data and the parameters</li>\n<li>get_transient_data(data_file, d_params).\nReads the transient data from the .dat file</li>\n<li>parse_parameter(f).\nParses the parameters from the .dat file</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: This class is not yet implemented.</li>\n</ul>\n"}, {"fullname": "corems.transient.input.midasDatFile.ReadMidasDatFile.__init__", "modulename": "corems.transient.input.midasDatFile", "qualname": "ReadMidasDatFile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename_path</span></span>)</span>"}, {"fullname": "corems.transient.input.midasDatFile.ReadMidasDatFile.filename_path", "modulename": "corems.transient.input.midasDatFile", "qualname": "ReadMidasDatFile.filename_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "corems.transient.input.midasDatFile.ReadMidasDatFile.read_file", "modulename": "corems.transient.input.midasDatFile", "qualname": "ReadMidasDatFile.read_file", "kind": "function", "doc": "<p>Reads the .dat file and returns the transient data and the parameters</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>transient_data</strong> (numpy.ndarray):\nThe transient data</li>\n<li><strong>d_params</strong> (dict):\nA dictionary with the parameters of the .dat file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.midasDatFile.ReadMidasDatFile.get_transient_data", "modulename": "corems.transient.input.midasDatFile", "qualname": "ReadMidasDatFile.get_transient_data", "kind": "function", "doc": "<p>Reads the transient data from the .dat file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_file</strong> (file):\nThe .dat file</li>\n<li><strong>d_params</strong> (dict):\nA dictionary with the parameters of the .dat file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>myarray</strong> (numpy.ndarray):\nThe transient data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_file</span>, </span><span class=\"param\"><span class=\"n\">d_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "corems.transient.input.midasDatFile.ReadMidasDatFile.parse_parameter", "modulename": "corems.transient.input.midasDatFile", "qualname": "ReadMidasDatFile.parse_parameter", "kind": "function", "doc": "<p>Parses the parameters from the .dat file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f</strong> (file):\nThe .dat file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>output_parameters</strong> (dict):\nA dictionary with the parameters of the .dat file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();